/**
 *
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_EmailIntegrationView extends MM_View
{
	public static $MM_JSACTION_SHOW_LIST_MAPPING_DIALOG = "showListMappingDialog";
	public static $MM_JSACTION_SHOW_PROVIDER_OPTIONS = "showProviderOptions";
	public static $MM_JSACTION_SAVE_PROVIDER_OPTIONS = "saveProviderOptions";
 	
	public function performAction($post) 
	{	
		$response = parent::performAction($post);
		
		if(!($response instanceof MM_Response))
		{
			switch($post[self::$MM_JSACTION]) 
			{
				case self::$MM_JSACTION_SAVE:
					return $this->saveBundleMapping($post);
				case self::$MM_JSACTION_REMOVE:
					return $this->removeBundleMapping($post);
				case self::$MM_JSACTION_SHOW_LIST_MAPPING_DIALOG:
					return $this->generateListMappingDialog($post);
				case self::$MM_JSACTION_SHOW_PROVIDER_OPTIONS:
					return $this->getProviderOptions($post);
				case self::$MM_JSACTION_SAVE_PROVIDER_OPTIONS:
					return $this->saveProviderOptions($post);
				default:
					return new MM_Response($response);
			}
		}
		else 
		{
			return $response;
		}
	}
	
	
	public function saveBundleMapping($post)
	{
		if (!isset($post["mm_bundle_id"]))
		{
			return new MM_Response("Unable to save bundle mapping. Bundle ID is required", MM_Response::$ERROR);
		}
		
		if (!isset($post["mm_provider_id"]))
		{
			return new MM_Response("Unable to save bundle mapping. Provider ID is required", MM_Response::$ERROR);
		}
		
		if(!empty($post["mm_last_bundle_id"]))
		{
			// remove any existing bundle mappings
			global $wpdb;
			$sql = "DELETE FROM ".MM_TABLE_EMAIL_PROVIDER_BUNDLE_MAPPINGS." WHERE bundle_id = '{$post["mm_last_bundle_id"]}' ";
			$sql .= "AND email_service_provider_id = '{$post["mm_provider_id"]}'; ";
			$wpdb->query($sql);
		}
		
		global $wpdb;
		
		if(!empty($post["mm_active_list_id"]))
		{
			$listType = MM_AbstractEmailServiceProvider::$LIST_TYPE_ACTIVE;
			$sql = "INSERT INTO ".MM_TABLE_EMAIL_PROVIDER_BUNDLE_MAPPINGS." (bundle_id, list_id, email_service_provider_id, list_type) ";
			$sql .= "VALUES ('{$post["mm_bundle_id"]}', '{$post["mm_active_list_id"]}', '{$post["mm_provider_id"]}', '{$listType}')";
			$result = $wpdb->query($sql);
			
			if(!$result)
			{
				return new MM_Response("Unable to save active list bundle mapping", MM_Response::$ERROR);
			}
		}
		
		if(!empty($post["mm_canceled_list_id"]))
		{
			$listType = MM_AbstractEmailServiceProvider::$LIST_TYPE_CANCELED;
			$sql = "INSERT INTO ".MM_TABLE_EMAIL_PROVIDER_BUNDLE_MAPPINGS." (bundle_id, list_id, email_service_provider_id, list_type) ";
			$sql .= "VALUES ('{$post["mm_bundle_id"]}', '{$post["mm_canceled_list_id"]}', '{$post["mm_provider_id"]}', '{$listType}')";
			$result = $wpdb->query($sql);
				
			if(!$result)
			{
				return new MM_Response("Unable to save canceled list bundle mapping", MM_Response::$ERROR);
			}
		}
		
		return new MM_Response();
	}
	
	public function removeBundleMapping($post)
	{
		if (!isset($post["id"]) || !is_numeric($post["id"]))
		{
			return new MM_Response("ID is required", MM_Response::$ERROR);
		}
		
		global $wpdb;
		$sql = "DELETE FROM ".MM_TABLE_EMAIL_PROVIDER_BUNDLE_MAPPINGS." WHERE bundle_id='{$post["id"]}';";
		$result = $wpdb->query($sql);
		
		if(!$result)
		{
			return new MM_Response("Unable to delete bundle mapping", MM_Response::$ERROR);
		}
		
		return new MM_Response();
	}
	
	
	public function getViewData(MM_DataGrid $dg)
	{
		global $wpdb;
		
		$provider = MM_EmailServiceProviderFactory::getActiveProvider();
			
		$provider_entity = new MM_EmailServiceProvider();
		$provider_entity->setToken($provider->getToken());
		$provider_entity->getData();
		$provider_entity_id = ($provider_entity->isValid())?$provider_entity->getId():"";
		
		$whereClause = "email_service_provider_id = {$provider_entity_id}";
		$rows = parent::getData(MM_TABLE_EMAIL_PROVIDER_BUNDLE_MAPPINGS, null, $dg, $whereClause);
		return $rows;
	}

	public function generateListMappingDialog($post) 
	{
		if (!isset($post['provider_token'])) 
		{
			//shouldnt ever happen
			return new MM_Response("Failed to retrieve provider options: no token was requested",MM_Response::$ERROR);
		}
		$provider_token = $post['provider_token'];
		$provider = MM_EmailServiceProviderFactory::getProvider($provider_token);
		if ($provider != null) 
		{
			$config_response = $provider->configureFromOptions($post);
			if ($config_response->type == MM_Response::$ERROR)
			{
				return $config_response;
			}
			
			$lists_response = $provider->getLists();
			if ($lists_response->type == MM_Response::$ERROR) 
			{
				return $lists_response;
			}
			else if (is_array($lists_response->message) && (count($lists_response->message) == 0)) 
			{
				return new MM_Response("This email service provider has no lists that can be subscribed to");
			}
			$lists = array(""=>"None") + $lists_response->message;
			
			$encode = create_function('&$key,$val', '$key=htmlentities($key); $val=htmlentities($val);');
			array_walk($lists,$encode); //encode html_entities so funky user data doesn't/can't break the interface
			$membership_mappings = $this->getCurrentMappings($provider_token);
			//use the entity to retrieve the prospect list
			$provider_entity = new MM_EmailServiceProvider();
			$provider_entity->setToken($provider_token);
			$provider_entity->getData();
			$current_prospect_list = "";
			if ($provider_entity->isValid()) 
			{
				$current_prospect_list = $provider_entity->getProspectListID();
				$current_cancellation_list = $provider_entity->getCancellationListID();
			}
			
			$export_url = MM_PLUGIN_URL.'/com/membermouse/esp/util/export_members.php';
			
			// generate HTML
			$list_mapping_output = "<div style=\"width:500px;\"><p class=\"mm-section-header\" style=\"margin-bottom:10px;\">Special List Mappings</p>";
			
			$dataGrid = new MM_DataGrid();
			$dataGrid->showPagingControls = false;
			$rows = array();
			
			$headers = array
			(
				'list_type'	=> array('content' => 'List Type'),
				'list'		=> array('content' => 'Mailing List'),
				'actions'	=> array('content' => 'Export')
			);
			
			// add prospect list
			$prospectListDesc = "Here you can identify a pre-sales mailing list that contains email addresses of prospects that are not members of your membership site yet. When someone from your Prospect List registers as a member, MemberMouse will automatically remove them from this list.";
			$rows[] = array
			(
				array( 'content' => "Prospect List".MM_Utils::getInfoIcon($prospectListDesc)),
				array( 'content' => "<select name='prospect_list_id'>".MM_HtmlUtils::generateSelectionsList($lists,$current_prospect_list)."</select>"),
				array( 'content' => "")
			);
			
			// add cancellation list
			$cancelListDesc = "Here you can identify a mailing list that contains email addresses of canceled members so you can re-engage them in the future. When a member cancels, MemberMouse will automatically add them to this list. ";
			$rows[] = array
			(
				array( 'content' => "Cancellation List".MM_Utils::getInfoIcon($cancelListDesc)),
				array( 'content' => "<select name='cancellation_list_id'>".MM_HtmlUtils::generateSelectionsList($lists,$current_cancellation_list)."</select>"),
				array( 'content' => "<a onclick='mmjs.exportMembers(\"{$export_url}?export_type=cancellation\"); return false;' style='cursor:pointer;' title='Export Canceled Members'>".MM_Utils::getIcon('download', '', '1.3em', '2px')."</a>")
			);
			
			$dataGrid->setHeaders($headers);
			$dataGrid->setRows($rows);
			
			$list_mapping_output .= $dataGrid->generateHtml();
			
			$membershipLvlMappingDesc = "MemberMouse provides the ability of mapping a specific mailing list to a specific membership level. By mapping your membership levels to lists, MemberMouse can automatically move your members from one list to another when members join and as their membership level changes.";
			$list_mapping_output .= "<p class=\"mm-section-header\" style=\"margin-top:20px; margin-bottom:10px;\">Membership Level Mappings".MM_Utils::getInfoIcon($membershipLvlMappingDesc)."</p>";
			
			$dataGrid = new MM_DataGrid();
			$dataGrid->showPagingControls = false;
			$dataGrid->width = "500px;";
			$rows = array();
			
			$headers = array
			(
				'membership'=> array('content' => 'Membership Level'),
				'list'		=> array('content' => 'Mailing List'),
				'actions'	=> array('content' => 'Export')
			);
			
			foreach ($membership_mappings as $membership_id=>$membership_data) 
			{
				$rows[] = array
				(
					array( 'content' => $membership_data['membership_name']),
					array( 'content' => "<select name='member_type_mappings[{$membership_id}]'>".MM_HtmlUtils::generateSelectionsList($lists,$membership_data['list_id'])."</select>"),
					array( 'content' => "<a onclick='mmjs.exportMembers(\"{$export_url}?membership_id={$membership_id}\"); return false;' style='cursor:pointer;' title='Export &apos;{$membership_data['membership_name']}&apos; Members'>".MM_Utils::getIcon('download', '', '1.3em', '2px')."</a>")
				);
			}
			
			$dataGrid->setHeaders($headers);
			$dataGrid->setRows($rows);
			
			$list_mapping_output .= $dataGrid->generateHtml()."</div>";
			
			return new MM_Response($list_mapping_output);
		}
		else 
		{
			return new MM_Response("Failed to retrieve provider configuration for {$provider_token}",MM_Response::$ERROR);
		}
		
	}
	
	private function getCurrentMappings($provider_token) 
	{
		global $wpdb;
		$mappings = array();
		
		//first get provider id
		$sql = "select id from ".MM_TABLE_EMAIL_SERVICE_PROVIDERS." where provider_token='%s'";
		$provider_id = $wpdb->get_col($wpdb->prepare($sql,$provider_token));
		
		//then cleanup mappings for deleted membertypes
		$sql = "delete from ".MM_TABLE_EMAIL_PROVIDER_MAPPINGS." where member_type_id NOT IN (select id from ".MM_TABLE_MEMBERSHIP_LEVELS.")";
		$wpdb->query($sql);
		
		//now get membership levels
		$sql = "select id, name from ".MM_TABLE_MEMBERSHIP_LEVELS;
		$results = $wpdb->get_results($wpdb->prepare($sql,$provider_id),ARRAY_A);
		foreach ($results as $rownum=>$member_type)
		{
			$mappings[$member_type['id']]['membership_name'] = $member_type['name'];
			$mappings[$member_type['id']]['list_id'] = "";
		}
		
		//now update with any mappings present in the table
		$sql = "select member_type_id, list_id from ".MM_TABLE_EMAIL_PROVIDER_MAPPINGS.
				" where email_service_provider_id='%s'";
		$results = $wpdb->get_results($wpdb->prepare($sql,$provider_id),ARRAY_A);
		foreach ($results as $rownum=>$single_mapping) 
		{
			$membership_id = $single_mapping['member_type_id'];
			$mappings[$membership_id]['list_id'] = $single_mapping['list_id'];
		}
		return $mappings;		
	}
	
	public function getProviderOptions($post) 
	{
		if (!isset($post['provider_token'])) 
		{
			//shouldnt ever happen
			return new MM_Response("Failed to retrieve provider options: no token was requested",MM_Response::$ERROR);
		}
		$provider_token = $post['provider_token'];
		$provider = MM_EmailServiceProviderFactory::getProvider($provider_token);
		if ($provider != null) 
		{
			$call_response = $provider->renderOptionsDialog($post);
			//if call_response is an MM_Response object, return it, otherwise wrap it in an MM_Response and return it
			return ($call_response instanceof MM_Response)?$call_response:(new MM_Response($call_response,MM_Response::$SUCCESS));
		}
		else 
		{
			return new MM_Response("Failed to retrieve provider configuration for {$provider_token}",MM_Response::$ERROR);
		}
	}
	
	public function saveProviderOptions($post) 
	{
		if (!isset($post['provider_token'])) 
		{
			//shouldnt ever happen
			return new MM_Response("Failed to save provider options: no token was supplied",MM_Response::$ERROR);
		}
		$provider_token = $post['provider_token'];
		$provider = MM_EmailServiceProviderFactory::getProvider($provider_token);
		if ($provider != null) 
		{
			return $provider->handleOptionsDialog($post);
		}
		else 
		{
			return new MM_Response("Unable to save provider configuration for unknown provider {$provider_token}",MM_Response::$ERROR);
		}
	}
 	
}
