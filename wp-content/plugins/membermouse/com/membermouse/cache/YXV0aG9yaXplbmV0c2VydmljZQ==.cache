/**
 *
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 *
 * MM_AuthorizeNetService is an implementation of the MM_PaymentService interface using Authorize.net AIM for regular charges and
 * ARB for recurring charges. Because ARB transactions are processed based on a remote scheduler, an initial AIM charge is sent through
 * for subscriptions, and the ARB transaction is setup to deal with recurrences
 */
class MM_AuthorizeNetService extends MM_PaymentService implements MM_MemberMouseEventListener
{
	protected $token = "AUTHORIZENET";
	
	protected $login = "";
	protected $transaction_key = "";
	protected $acceptedCardTypes = array();
	
	protected $usingTestGateway = false;
	
	public static $AUTHNET_CARDTYPE_MASTERCARD = "mastercard";
	public static $AUTHNET_CARDTYPE_VISA       = "visa";
	public static $AUTHNET_CARDTYPE_AMEX       = "amex";
	public static $AUTHNET_CARDTYPE_DISCOVER   = "discover";
	
	//AIM gateway urls
	public static $PRODUCTION_AIM_GATEWAY_URL = "https://secure.authorize.net/gateway/transact.dll";
	public static $TEST_AIM_GATEWAY_URL       = "https://test.authorize.net/gateway/transact.dll";
	
	//ARB gateway urls
	public static $PRODUCTION_ARB_GATEWAY_URL = "https://api.authorize.net/xml/v1/request.api";
	public static $TEST_ARB_GATEWAY_URL       = "https://apitest.authorize.net/xml/v1/request.api";
	
	//void window (in hours). Transactions out of this window are assumed settled
	private $voidWindow = 48; 
	
	protected $supportedCurrencies = array("USD","CAD","GBP","EUR");
	
	public function install()
	{
				
		parent::install();

		$sql = array();
		$sql[] = "CREATE TABLE ".MM_TABLE_AUTHNET_AIM_TRANSACTIONS." (\n".
				 "id bigint(20) NOT NULL AUTO_INCREMENT,\n".
				 "order_id bigint(20) NOT NULL,\n".
				 "x_trans_id bigint(20),\n".
				 "last_four varchar(4) NULL,\n".
				 "amount decimal(10,2) NOT NULL,\n".
				 "x_currency_code char(3) NOT NULL DEFAULT 'USD',\n".
				 "transaction_date datetime NOT NULL,\n".
				 "PRIMARY KEY  (id)\n".
				 ")";

		$sql[] = "CREATE TABLE ".MM_TABLE_AUTHNET_ARB_SUBSCRIPTIONS." (\n".
				 "id bigint(20) NOT NULL AUTO_INCREMENT,\n".
				 "order_item_id bigint(20) NOT NULL,\n".
				 "x_subscription_id varchar(255) NOT NULL,\n".
				 "last_four varchar(4) NULL,\n".
				 "transaction_date datetime NOT NULL,\n".
				 "PRIMARY KEY  (id)\n".
				 ")";
		
		$sql[] = "CREATE TABLE ".MM_TABLE_AUTHNET_ARB_SUBSCRIPTION_HISTORY." (\n".
				"x_trans_id bigint(20) NOT NULL UNIQUE,\n".
				"x_response_code INT,\n".
				"x_response_subcode INT,\n".
				"x_response_reason_code INT,\n".
				"x_response_reason_text VARCHAR(255),\n".
				"x_invoice_num varchar(255),\n".
				"x_cust_id varchar(255),\n".
				"x_subscription_id varchar(255),\n".
				"x_subscription_paynum INT,\n".
				"transaction_date datetime NOT NULL,\n".
				"PRIMARY KEY  (x_trans_id)\n".
				")";
		
		$sql[] = "CREATE TABLE ".MM_TABLE_AUTHNET_PENDING_OVERDUE_SUBSCRIPTIONS." (\n".
				"id bigint(20) NOT NULL AUTO_INCREMENT,\n".
				"order_item_id bigint(20) NOT NULL,\n".
				"overdue_date datetime NOT NULL,\n".
				"is_processed TINYINT NOT NULL DEFAULT 0,\n".
				"PRIMARY KEY  (id)\n".
				")";
		
		foreach ($sql as $query)
		{
			dbdelta($query);
		}
	}
	
	/**
	 * Report the features the AuthorizeNetService supports
	 * @see MM_PaymentService::supportsFeature()
	 *
	 * @param $featureConst a const as defined in MM_PaymentServiceFeatures
	 * @return boolean true if supported, false if not supported
	 */
	public function supportsFeature($featureConst)
	{
		$supported = array();
		$supported[] = MM_PaymentServiceFeatures::ONSITE_SERVICE;
		$supported[] = MM_PaymentServiceFeatures::COUPONS;
		return in_array($featureConst,$supported,true);
	}
	
	
	/**
	 * Returns the html that will be used on the payment method settings screen for configuring Authorize.net integration
	 * @see MM_PaymentService::displayConfigOptions()
	 * 
	 * @return String containing the configuration dialog html
	 */
	public function displayConfigOptions()
	{
		$config_options = MM_TEMPLATE::generate("{$this->getTemplateDir()}/authorizenet_config.html.php",$this);
		return $config_options;
	}
	
	
	/**
	 * Validates and configures the object with the settings information generated by submission of the configuration dialog
	 * @see MM_PaymentService::processConfigOptions()
	 * 
	 * @param $post An array containing the data posted from the payment methods settings screen
	 * @return An MM_Response of type MM_Response::SUCCESS indicating successful validation and assigment. On error, the type will be MM_Response::ERROR and the message will contain the error messages
	 */
	public function processConfigOptions($post)
	{
		$active = (isset($post['onsite_payment_service']) && (strtolower($this->getToken()) == $post['onsite_payment_service']));
		$this->setActive($active);
		
		if ($active)
		{
			$this->install();
			$config = isset($post['payment_service']['authorizenet'])?$post['payment_service']['authorizenet']:array();
			$check_not_empty = array('login'=>'Login', 'transaction_key'=>'Transaction Key');
			$empty_errors = "";
			foreach ($check_not_empty as $check=>$displayName)
			{
				if (!isset($config[$check]) || empty($config[$check]))
				{
					$empty_errors = "Authorize.net: please enter a value for {$displayName}\n";
				}
			}
			if ($empty_errors != "")
			{
				return new MM_Response($empty_errors,MM_Response::$ERROR);
			}
			//if here, that means they are all ok
			$this->setLogin($config['login']);
			$this->setTransactionKey($config['transaction_key']);
			$this->useTestGateway((isset($config['use_test_gateway']) && (strtolower($config['use_test_gateway']) == "true"))?true:false);
		}
		return new MM_Response();
	}
	
	
	/**
	 * Retrieves the login, which is used as the login for the authorize.net account
	 * 
	 * @return String The API login 
	 */
	public function getLogin()
	{
		return $this->login;
	}
	
	
	/**
	 * Sets the login that will be used to access the authorize.net account
	 * 
	 * @param String $login The API login
	 */
	public function setLogin($login)
	{
		$this->login = $login;
	}
	
	
	/**
	 * Retrieves the transaction key, which is used to authenticate to the authorize.net account
	 */
	public function getTransactionKey()
	{
		return $this->transaction_key;
	}
	
	
	/**
	 * Sets the transaction key that will be used to authenticate to the authorize.net account
	 * 
	 * @param String $transaction_key
	 */
	public function setTransactionKey($transaction_key)
	{
		$this->transaction_key = $transaction_key;
	}
	
	
	/**
	 * Retrieves the accepted card types array
	 * 
	 * @return array The accepted card type, empty array if none set
	 */
	public function getAcceptedCardTypes()
	{
		return $this->acceptedCardTypes;
	}
	
	
	/**
	 * Sets the accepted card types array
	 * 
	 * @param array $acceptedCardTypes The accepted card type, empty array for none
	 */
	public function setAcceptedCardTypes($acceptedCardTypes)
	{
		$this->acceptedCardTypes = $acceptedCardTypes;
	}
	
	
	/**
	 * Processes 'silent post' notifications to determine the success or failure of rebills
	 * @see MM_PaymentService::handleCallback()
	 */
	public function processNotification($request)
	{
		global $wpdb;
		
		//TODO: REFACTOR: store md5 hash value during setup, use it to compute and verify the security of silent posts 
		//      http://support.authorize.net/authkb/index?page=content&id=A588&actp=LIST has details
		
		$request = (empty($request) && !empty($_POST) && is_array($_POST))?$_POST:$request; //if for some reason request isnt set but there is a $_POST, use the $_POST
		
		if (isset($request['x_subscription_id']) && !empty($request['x_subscription_id']))
		{
			//this is a transaction related to a subscription
			$subscriptionId = $request['x_subscription_id'];
			$amount = trim($request['x_amount']);
			$amount = number_format($amount,2,".","");
			$itemRetrievalSql = "SELECT order_item_id from ".MM_TABLE_AUTHNET_ARB_SUBSCRIPTIONS." where x_subscription_id = %s";
			$orderItemId = $wpdb->get_var($wpdb->prepare($itemRetrievalSql,$subscriptionId));
			
			
			if (empty($orderItemId))
			{
				return new MM_PaymentServiceResponse("No matching subscription found",MM_PaymentServiceResponse::$ERROR);
			}
			
			$orderItem = new MM_OrderItem($orderItemId);
			$order = new MM_Order($orderItem->getOrderId());
			
			if (isset($request['x_trans_id']) && !empty($request['x_trans_id']))
			{
				//NOTE: There are more fields that can be accessed, which may come in handy when implementing another API, such as CIM
				//use the transaction id to keep track of which callbacks have been received
				$transactionId   = isset($request['x_trans_id'])?$request['x_trans_id']:"";
				$responseCode    = isset($request['x_response_code'])?$request['x_response_code']:"";
				$responseSubcode = isset($request['x_response_subcode'])?$request['x_response_subcode']:"";
				$reasonCode      = isset($request['x_response_reason_code'])?$request['x_response_reason_code']:"";
				$responseReasonText = isset($request['x_response_reason_text'])?$request['x_response_reason_text']:"";
				$invoiceNum = isset($request['x_invoice_num'])?$request['x_invoice_num']:"";
				$custId = isset($request['x_cust_id'])?$request['x_cust_id']:"";
				$subscriptionId = isset($request['x_subscription_id'])?$request['x_subscription_id']:"";
				$subscriptionPaynum = isset($request['x_subscription_paynum'])?$request['x_subscription_paynum']:"";
				
				$subscriptionLookupSql = "SELECT count(*) from ".MM_TABLE_AUTHNET_ARB_SUBSCRIPTION_HISTORY." where x_trans_id=%s";
				$subscriptionCount = $wpdb->get_var($wpdb->prepare($subscriptionLookupSql,$transactionId));
				if ($subscriptionCount > 0)
				{
					//this is a message we have already received
					return new MM_PaymentServiceResponse("Duplicate transation",MM_PaymentServiceResponse::$ERROR);
				}
				
				$subscriptionHistoryData = array(
						"x_trans_id"             => $transactionId,
						"x_response_code"        => $responseCode,
						"x_response_subcode"     => $responseSubcode,
						"x_response_reason_code" => $reasonCode,
						"x_response_reason_text" => $responseReasonText,
						"x_invoice_num"          => $invoiceNum,
						"x_cust_id"              => $custId,
						"x_subscription_id"      => $subscriptionId,
						"x_subscription_paynum"  => $subscriptionPaynum,
						"transaction_date"       => MM_Utils::getCurrentTime()
						);
				
				$res = $wpdb->insert(MM_TABLE_AUTHNET_ARB_SUBSCRIPTION_HISTORY,$subscriptionHistoryData);
				if ($res === false)
				{
					//there was an error logging the callback. Have to exit, because the id from above is used in the below transactions
					//TODO: REFACTOR: return a non-200 status, so authnet knows this silent post wasnt processed(?)
					return new MM_PaymentServiceResponse("Error recording the ARB notification to the database",MM_PaymentServiceResponse::$ERROR);
				}
				
				//now determine what to do
				switch ($responseCode)
				{
					case 1: //success, perform any successful-rebill-driven operations
						//TODO: REFACTOR: detect when rebilling complete and set order item status
						$transactionDescription = "Payment for order# {$order->getOrderNumber()}, item: {$orderItem->getDescription()}";
						MM_TransactionLog::createTransactionEntry($order->getId(), $orderItem->getId(), $amount, $order->getCurrency(), $transactionDescription, MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT,true,$this->getId(),$transactionId);
						$this->checkPaymentPlanCompletion($orderItem);
						break;
					case 2: 
						//declined, perform any declined-rebill-driven operations
						$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING_REBILL_FAILED);
						$orderItem->commitData();
						parent::handleOverdueSubscriptionItem($orderItem);
						$returnType = ($res->type == MM_Response::$SUCCESS)?MM_PaymentServiceResponse::$SUCCESS:MM_PaymentServiceResponse::$ERROR;
						return new MM_PaymentServiceResponse($res->message,$returnType);
						break;
					case 3: 
						//error, perform any error-response operations here
						if ($reasonCode == 8)
						{
							//this means the card was expired. Currently treat as a decline/fail
							//TODO: REFACTOR: verify that expired cards should be treated as declines
							$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING_REBILL_FAILED);
							$orderItem->commitData();
							parent::handleOverdueSubscriptionItem($orderItem);
							$returnType = ($res->type == MM_Response::$SUCCESS)?MM_PaymentServiceResponse::$SUCCESS:MM_PaymentServiceResponse::$ERROR;
							return new MM_PaymentServiceResponse($res->message,$returnType);
						}
						return new MM_PaymentServiceResponse(); //even though the rebill failed, return success to let the caller know we processed the message successfully
						break;
					default:
						//unknown response code
						return new MM_PaymentServiceResponse("Unknown Response Code",MM_PaymentServiceResponse::$ERROR);
						break;
				}
				return new MM_PaymentServiceResponse(); //this line may seem superfluous for now, but guards against adding future branches to handle non-rebills
						
			}			
		}
			
		return new MM_PaymentServiceResponse();
	}
	
	
	/**
	 * With no parameters (or empty parameters) supplied, this method reports whether the test gateway is being used.
	 * When a parameter is supplied, the mode of operation is changed to match the parameter
	 * 
	 * @param boolean $newSetting (optional) If true, use the test gateways, if false, use the production gateways
	 * @return boolean True if this provider is configured to use the test gateway, false if it is using production.
	 */
	public function useTestGateway($newSetting="")
	{
		if ($newSetting !== "")
		{
			$this->usingTestGateway = (bool)$newSetting;
		}
		return $this->usingTestGateway;
	}
	
	
	/**
	 * Return the url to submit AIM transactions to
	 * 
	 * @return String containing either the test or production gateway url
	 */
	private function getAIMGatewayURL()
	{
		return ($this->usingTestGateway)?MM_AuthorizeNetService::$TEST_AIM_GATEWAY_URL:MM_AuthorizeNetService::$PRODUCTION_AIM_GATEWAY_URL;
	}
	
	
	/**
	 * Return the url to submit ARB transactions to
	 * 
	 * @return String containing either the test or production gateway url
	 */
	private function getARBGatewayURL()
	{
		return ($this->usingTestGateway)?MM_AuthorizeNetService::$TEST_ARB_GATEWAY_URL:MM_AuthorizeNetService::$PRODUCTION_ARB_GATEWAY_URL;
	}
	
	
	/**
	 * Constructs and sends a charge to authorize.net using the supplied order and credit card information
	 * If any items are recurring, also constructs the ARB recurring charges
	 * @see MM_PaymentService::chargeOrder()
	 * 
	 * @param MM_Order $order The order containing the information to use in constructing the transaction
	 * @param MM_CardInfo $cardInfo The credit card info to use to charge the order
	 * @param boolean $validate (optional) Whether or not to ensure the order is valid before proceeding. Defaults to true. If false, this can be used to create charges not tied to completed orders
	 * @return MM_PaymentServiceResponse object representing the status of the transaction
	 */
	public function chargeOrder(MM_Order $order, MM_CardInfo $cardInfo=null,$validate=true)
	{
		parent::chargeOrder($order,$cardInfo, $validate);
		
		if (!($cardInfo instanceof MM_CardInfo))
		{
			return new MM_PaymentServiceResponse("Please supply valid credit card information",MM_PaymentServiceResponse::$ERROR);
		}
		
		$cardValidation = $cardInfo->validate();
		if ($cardValidation !== true)
		{
			return new MM_PaymentServiceResponse($cardValidation,MM_PaymentServiceResponse::$ERROR);
		}			
		
		//first do the ARB subscriptions, because its easier to reverse than the AIM charge
		$createdSubscriptions = array();
		foreach ($order->getProducts() as $aProductItem)
		{
			//TODO: REFACTOR: the sendAIMCharge method does the exact same conversion from orderitem to product. It would be nice if those entities could be shared here to avoid
			//				  relooking them up in the db...
			
			if ($aProductItem->isRecurring() || (trim($aProductItem->getTrialDuration()) != false))
			{
				$arbResponse = $this->createARBSubscription($order,$aProductItem,$cardInfo);
				if (!($arbResponse instanceof MM_PaymentServiceResponse))
				{
					return new MM_PaymentServiceResponse("There was an error processing the transaction: Internal Error",MM_PaymentServiceResponse::$ERROR);
				}
				if ($arbResponse->getStatus() != MM_PaymentServiceResponse::$SUCCESS)
				{
					//TODO: REFACTOR: review all arb non-success responses to determine if they ALL should translate to MM_PaymentServiceResponse::$ERROR
					$error = $arbResponse->getMessage();
					$details = (empty($error))?"":": {$error}";
					
					//cancel any already created subscriptions
					$this->reverseSubscriptions($createdSubscriptions);
					return new MM_PaymentServiceResponse("There was an error processing the transaction{$details}",MM_PaymentServiceResponse::$ERROR);
				}
				
				if($this->isPendingOverdueSubscription($aProductItem))
				{
					$aProductItem->setStatus(MM_OrderItem::$STATUS_RECURRING_PENDING_OVERDUE);
				}
				else
				{
					$aProductItem->setStatus(MM_OrderItem::$STATUS_RECURRING);
				}
				$aProductItem->commitData();
				$createdSubscriptions[] = $aProductItem;
			}
		}
		
		//Now do the AIM charge to cover non-recurring products and trial periods
		if ($order->getTotal() > 0.00) //free trials don't need to go to the gateway
		{
			$aimResponse = $this->sendAimCharge($order, $cardInfo);
			if (!($aimResponse instanceof MM_PaymentServiceResponse))
			{
				$this->reverseSubscriptions($createdSubscriptions);
				return new MM_PaymentServiceResponse("There was an error processing the transaction: Internal Error",MM_PaymentServiceResponse::$ERROR);
			}
				
			if ($aimResponse->getStatus() != MM_PaymentServiceResponse::$SUCCESS)
			{
				$this->reverseSubscriptions($createdSubscriptions);
				return $aimResponse;
			}
		}
		
		//at this point all the recurring products have had subscriptions created successfully, and any required AIM charge has been made, so return success status
		return new MM_PaymentServiceResponse(); 
	}
	
	
	/**
	 * Cancels the ARB subscriptions attached to the order items in an array
	 * 
	 * @param array $subscriptionArray An array of order items representing recurring products that have subscriptions
	 */
	private function reverseSubscriptions($subscriptionArray)
	{
		foreach ($subscriptionArray as $cancelMe)
		{
			$this->cancelSubscription($cancelMe); //return value doesnt matter
		}
	}
	
	/**
	 * Sends an order to the AIM gateway to be charged, and returns an indicator of the response
	 * 
	 * @param MM_Order $order The order to charge
	 * @param MM_CardInfo $cardInfo The credit card information to charge
	 * @return MM_PaymentServiceResponse representing the status of the transaction
	 */
	protected function sendAimCharge(MM_Order $order, MM_CardInfo $cardInfo)
	{
		$customer = $order->getCustomer();
		$billingAddress = $order->getBillingAddress();
		$address2 = $billingAddress->getAddressLine2();
		$combinedAddress = (!empty($address2))?($billingAddress->getAddressLine1()." ".$address2):$billingAddress->getAddressLine1();
		
		$post_values = array(
				"x_login"			=> $this->getLogin(),
				"x_tran_key"		=> $this->getTransactionKey(),
		
				"x_version"			=> "3.1",
				"x_delim_data"		=> "TRUE",
				"x_delim_char"		=> "|",
				"x_relay_response"	=> "FALSE",
		
				"x_type"			=> "AUTH_CAPTURE",
				"x_method"			=> "CC",
				"x_card_num"		=> $cardInfo->getCardNumber(),
				"x_exp_date"		=> $cardInfo->getExpirationMonth().$cardInfo->getExpirationYear(),
		
				"x_amount"			=>  number_format($order->getTotal(),2,'.',''),
				"x_currency_code"   =>  $order->getCurrency(),
				"x_invoice_num"	    =>  $order->getOrderNumber(),
				"x_description"		=> "Order#".$order->getOrderNumber(),
		
				"x_first_name"		=>  ucfirst($billingAddress->getFirstName()),
				"x_last_name"		=>  ucfirst($billingAddress->getLastName()),
				"x_address"			=>  $combinedAddress,
				"x_city"            =>  $billingAddress->getCity(),
				"x_state"			=>  $billingAddress->getState(),
				"x_zip"				=>  $billingAddress->getPostalCode(),
				"x_country"         =>  $billingAddress->getCountry(),
				"x_email"			=>  $customer->getEmail(),
				"x_cust_id"         =>  $customer->getId(),
				"x_cust_ip"         =>  MM_Utils::getClientIPAddress()
		);
		
		if ($order->isShippable())
		{
			$shippingAddress = $order->getShippingAddress();			
			$address2 = $shippingAddress->getAddressLine2();
			$combinedAddress = (!empty($address2))?($shippingAddress->getAddressLine1()." ".$address2):$shippingAddress->getAddressLine1();
			$shipping_values = array(
				"x_ship_to_first_name" => $shippingAddress->getFirstName(),
				"x_ship_to_last_name"  => $shippingAddress->getLastName(),
				"x_ship_to_address"    => $combinedAddress,
				"x_ship_to_city"       => $shippingAddress->getCity(),
				"x_ship_to_state"      => $shippingAddress->getState(),
				"x_ship_to_zip"        => $shippingAddress->getPostalCode(),
				"x_ship_to_country"    => $shippingAddress->getCountry()
			);
			$post_values += $shipping_values;
		}
		
		//add item information: format is id<|>name<|>description<|>quantity<|>price<|>taxable
		$line_items="";
		$limiter = 0;
		foreach ($order->getProducts() as $eachProductItem)
		{
			if ((++$limiter) >= 30)
			{
				break; //limit of 30 items can be submitted
			}
			$prefix = empty($line_items)?"":"&";
			$item_id      = urlencode($eachProductItem->getItemId());
			$item_name    = substr($eachProductItem->getDescription(),0,31); //spec limits this field at 31 chars
			$item_descr   = substr($eachProductItem->getDescription(),0,255); //spec limits this field at 255 chars
			$item_qty     = urlencode($eachProductItem->getQuantity());
			$item_price   = urlencode($eachProductItem->getAmount());
			$item_taxable = urlencode(($order->getTax(false) == 0)?"F":"T");
			
			$line_items .= "{$prefix}x_line_item={$item_id}<|>{$item_name}<|>{$item_descr}<|>{$item_qty}<|>{$item_price}<|>{$item_taxable}";
		}
		
		$post_string = "";
		foreach( $post_values as $key => $value )
		{
			$post_string .= "$key=" . urlencode( $value ) . "&";
		}
		$post_string .= $line_items;
		
		return $this->parseAIMGatewayResponse($this->doHTTPRequest($this->getAIMGatewayURL(),"POST",$post_string),$order,$cardInfo);
	}
	
	
	/**
	 * Parses the response from the HTTP AIM request, performs the appropriate actions and returns a PaymentServiceResponse to indicate the transaction status
	 * This method also saves the status and transaction id received from the remote gateway and associates it with the order
	 * 
	 * @param MM_Response $response The response from the AIM gateway, in an MM_Response wrapper
	 * @param MM_Order $order The order the response is linked to
	 * @param MM_CardInfo $cardInfo The credit card information used to charge the order (needed to obtain the last 4 digits for storing in the db)
	 * 
	 * @return MM_PaymentServiceResponse representing the status of the transaction
	 */
	protected function parseAIMGatewayResponse(MM_Response $response,MM_Order $order,MM_CardInfo $cardInfo)
	{
		global $wpdb;
		
		if ($response->type == MM_Response::$ERROR)
		{
			return new MM_PaymentServiceResponse("There was an error processing the transaction: Error connecting to merchant gateway",MM_PaymentServiceResponse::$ERROR);
		}
		
		$responseData = explode("|",$response->message);
		if (!is_array($responseData))
		{
			//the data was not in the format expected, this is an error
			return new MM_PaymentServiceResponse("There was an error processing the transaction: Invalid Response from merchant gateway",MM_PaymentServiceResponse::$ERROR);
		}
		
		switch ($responseData[0])
		{
			case '1':
			case '4':
				//1 is success, 4 is held for review
				$transactionAmount = floatval(isset($responseData[9])?$responseData[9]:0);
				$transactionDescription = "Payment for order# {$order->getOrderNumber()}";
				$transactionDate = MM_Utils::getCurrentTime();
				$insertData = array( "order_id"          => $order->getId(),
									 "x_trans_id"        => isset($responseData[6])?$responseData[6]:0,
									 "last_four"         => substr($cardInfo->getCardNumber(),-4),
									 "amount"            => $transactionAmount,
									 "x_currency_code"   => $order->getCurrency(),
									 "transaction_date"  => $transactionDate
						);
				$wpdb->insert(MM_TABLE_AUTHNET_AIM_TRANSACTIONS,$insertData);
				$aimTransactionId = $wpdb->insert_id;
				//now log the payment in the transactions table
				$productItems = $order->getProducts();
				$orderItemId = null;
				if (count($productItems) == 1)
				{
					$orderItem = reset($productItems);
					$orderItemId = $orderItem->getId();
				}
				MM_TransactionLog::createTransactionEntry($order->getId(), $orderItemId,$transactionAmount, $order->getCurrency(), $transactionDescription, MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT,false,$this->id,$aimTransactionId,$transactionDate);	
				//send each item in the order to be checked 
				foreach ($productItems as $checkOrderItem)
				{
					$this->checkPaymentPlanCompletion($checkOrderItem);
				}	
				return new MM_PaymentServiceResponse();
				break;
			case '2':
				//declined
				return new MM_PaymentServiceResponse("The transaction was declined", MM_PaymentServiceResponse::$FAILED);
				break;
			case '3':
				//error
				$details = (isset($responseData[3]) && !empty($responseData[3]))?": {$responseData[3]}":"";
				return new MM_PaymentServiceResponse("There was an error processing the transaction{$details}",MM_PaymentServiceResponse::$ERROR);
				break;
			default:
				//process as error
				return new MM_PaymentServiceResponse("There was an error processing the transaction: Invalid Response from merchant gateway",MM_PaymentServiceResponse::$ERROR);
				break;
		}
	}
	
	
	/**
	 * Creates an Automated Recurring Billing (ARB) subscription from a product attached to an order
	 * Note: currency is not explicitly specified in ARB requests. The amount is assumed to be in whatever currency the gateway is 
	 * configured to process in 
	 * 
	 * @param  MM_Order $order The order the product is attached to
	 * @param  MM_OrderItem $orderItem The order item containing the product to create an ARB subscription for
	 * @param  MM_CardInfo $cardInfo The credit card information to use when creating the subscription
	 * 
	 * @return MM_PaymentServiceResponse contain the status of the transaction
	 */
	protected function createARBSubscription(MM_Order $order, MM_OrderItem $orderItem, MM_CardInfo $cardInfo)
	{
		$customer        = $order->getCustomer();
		$billingAddress  = $order->getBillingAddress();
		$shippingAddress = $order->getShippingAddress();
		
		//ARB supports multiple trial occurrences, but mm only supports one trial payment. Hence, the trial payment is handled by the initial AIM
		//charge, and can be ignored in our ARB setup. Our only interest in the trial is in correctly calculating the start date
		
		//first, make sure this is a product. If not, something got messed up above
		if ($orderItem->getItemType() != MM_OrderItem::$ORDER_ITEM_TYPE_PRODUCT)
		{
			return new MM_PaymentServiceResponse("Attempted to bill a non-product item",MM_PaymentServiceResponse::$ERROR);
		}
		
		$product = new MM_Product($orderItem->getItemId());
		$nextRebillAmount = number_format($orderItem->getRecurringAmount(),2,'.','');
		$paymentSchedule = $this->getARBPaymentScheduleFromProduct($product);
		
		//temporarily adjust the timezone to sync with the authorizenet servers, for date calculation
		$serverTimezone = date_default_timezone_get();
		date_default_timezone_set('America/Chicago');
		if ($product->hasTrial())
		{
			$startDate = date("Y-m-d",strtotime("+{$paymentSchedule['trialLength']} {$paymentSchedule['trialUnit']}")); //note: this assumes the system time is correct!
		}
		else 
		{
			$startDate = date("Y-m-d",strtotime("+{$paymentSchedule['length']} {$paymentSchedule['unit']}")); //also assumes the system time is correct!
		}
		
		//handle special case where the supplied card expires prior to the first rebill. The first charge is always handled by AIM, so the subscription is ok to allow in that case
		
		//start by setting expiredDate to be the last day of the cc expiration month, at 11:59pm
		$expiredDate = $cardInfo->getExpirationYear()."-".$cardInfo->getExpirationMonth()."-".date("t",gmmktime(0,0,0,$cardInfo->getExpirationMonth(),1,$cardInfo->getExpirationYear()))." 23:59";
		
		//any time after that is expired, so return ok
		if (strtotime($startDate) > strtotime($expiredDate))
		{
			global $wpdb;
			
			// insert a row into the pending overdue subscriptions table
			$insertData = array( "order_item_id" => $orderItem->getId(), "overdue_date" => $startDate);
			$wpdb->insert(MM_TABLE_AUTHNET_PENDING_OVERDUE_SUBSCRIPTIONS,$insertData);
			
			return new MM_PaymentServiceResponse("Warning: Subscription starts after card has expired, so rebills will fail. Allowing charge to go through...");	
		}
		
		//define variables to send
		$amount =           $nextRebillAmount;
		$refId  =           $order->getOrderNumber()."-".$product->getId();
		$name   =           substr($product->getName(),0,50);
		$description =      substr($product->getName(),0,255);
		$length =           $paymentSchedule['length'];
		$unit   =           $paymentSchedule['unit'];      
		$totalOccurrences = ($product->doLimitPayments()) ? $product->getNumberOfPayments():"9999";
		$cardNumber =       $cardInfo->getCardNumber();
		$expirationDate =   date("Y-m",mktime(0,0,0,$cardInfo->getExpirationMonth(),1,$cardInfo->getExpirationYear()));
		$customerId     =   $customer->getId();
		$customerEmail  =   $customer->getEmail();
		$customerPhone  =   $customer->getPhone();
		$firstName = 		$billingAddress->getFirstName();
		$lastName = 		$billingAddress->getLastName();
		
		$address2 =         $billingAddress->getAddressLine2();
		$combinedBillingAddress = (!empty($address2))?($billingAddress->getAddressLine1()." ".$address2):$billingAddress->getAddressLine1();
		$combinedBillingAddress = substr($combinedBillingAddress,0,60);
		
		$billingCity =      substr($billingAddress->getCity(),0,40);
		$billingState =     $billingAddress->getState();
		$billingZip   =     $billingAddress->getPostalCode();
		$billingCountry =   $billingAddress->getCountry();
		
		if ($product->isShippable())
		{
			$shippingFirstName = 		$shippingAddress->getFirstName();
			$shippingLastName = 		$shippingAddress->getLastName();
			if (empty($shippingFirstName) || empty($shippingLastName)) //required. If empty, using billing name
			{
				$shippingFirstName = $firstName;
				$shippingLastName  = $lastName; 
			}
			
			$shippingAddress2 =         $shippingAddress->getAddressLine2();
			$combinedShippingAddress =  (!empty($shippingAddress2))?($shippingAddress->getAddressLine1()." ".$shippingAddress2):$shippingAddress->getAddressLine1();
			$combinedShippingAddress =  substr($combinedShippingAddress,0,60);
			
			$shippingCity =      		substr($shippingAddress->getCity(),0,40);
			$shippingState =    		$shippingAddress->getState();
			$shippingZip   =     		$shippingAddress->getPostalCode();
			$shippingCountry =   		$shippingAddress->getCountry();
		}
		
	   /*
		* Validate that the fields required by the ARB API are non-empty and the values fall within the appropriate ranges
		*/
		
		//validate the payment schedule
		if (($paymentSchedule['unit'] == 'days') && (($paymentSchedule['length'] < 7) || ($paymentSchedule['length'] > 365)))
		{
			return new MM_PaymentServiceResponse("Error creating subscription: The term is not supported",MM_PaymentServiceResponse::$ERROR);
		}
		
		if (($paymentSchedule['unit'] == 'months') && (($paymentSchedule['length'] < 1) || ($paymentSchedule['length'] > 12)))
		{
			return new MM_PaymentServiceResponse("Error creating subscription: The term is not supported",MM_PaymentServiceResponse::$ERROR);
		}
		
		//validate that there is a billing first name and last name
		if (empty($firstName) || empty($lastName))
		{
			return new MM_PaymentServiceResponse("Error creating subscription: Billing first name and last name are required fields",MM_PaymentServiceResponse::$ERROR);
		}
		
	   /*
		* End Validations
		*/
		
		$xmlContent =
		'<?xml version="1.0" encoding="utf-8"?>' .
		'<ARBCreateSubscriptionRequest xmlns="AnetApi/xml/v1/schema/AnetApiSchema.xsd">' .
			"<merchantAuthentication>".
				"<name>{$this->getLogin()}</name>".
				"<transactionKey>{$this->getTransactionKey()}</transactionKey>".
			"</merchantAuthentication>".
			"<refId>{$refId}</refId>".
			"<subscription>".
				"<name>{$name}</name>".
				"<paymentSchedule>".
					"<interval>".
						"<length>{$length}</length>".
						"<unit>{$unit}</unit>".
					"</interval>".
					"<startDate>{$startDate}</startDate>".
					"<totalOccurrences>{$totalOccurrences}</totalOccurrences>".
				"</paymentSchedule>".
				"<amount>{$amount}</amount>".
				"<payment>".
					"<creditCard>".
						"<cardNumber>{$cardNumber}</cardNumber>".
						"<expirationDate>{$expirationDate}</expirationDate>".
					"</creditCard>".
				"</payment>".
				"<order>".
					"<invoiceNumber>{$refId}</invoiceNumber>".
					"<description>{$description}</description>".
				"</order>".
				"<customer>".
					"<id>{$customerId}</id>".
					"<email>{$customerEmail}</email>".
					"<phoneNumber>{$customerPhone}</phoneNumber>".
				"</customer>".
				"<billTo>".
					"<firstName>{$firstName}</firstName>".
					"<lastName>{$lastName}</lastName>".
					"<address>{$combinedBillingAddress}</address>".
					"<city>{$billingCity}</city>".
					"<state>{$billingState}</state>".
					"<zip>{$billingZip}</zip>".
					"<country>{$billingCountry}</country>".
				"</billTo>";
		if ($product->isShippable())
		{
			$xmlContent.=
				"<shipTo>".
					"<firstName>{$shippingFirstName}</firstName>".
					"<lastName>{$shippingLastName}</lastName>".
					"<address>{$combinedShippingAddress}</address>".
					"<city>{$shippingCity}</city>".
					"<state>{$shippingState}</state>".
					"<zip>{$shippingZip}</zip>".
					"<country>{$shippingCountry}</country>".
				"</shipTo>";
		}
	$xmlContent.=
			"</subscription>".
		"</ARBCreateSubscriptionRequest>";
		@date_default_timezone_set($serverTimezone);
		
		$headerCurlOptions = array(CURLOPT_HTTPHEADER=>array("Content-Type: text/xml"));
		return $this->parseARBGatewayResponse($this->doHTTPRequest($this->getARBGatewayURL(),"POST",$xmlContent,$headerCurlOptions),$orderItem,$cardInfo);
	}
	
	
	/**
	 * Process the results of an ARB subscription request
	 * 
	 * @param MM_Response $rawResponse The raw response from the remote gateway, which should contain an XML response, wrapped in an MM_Response object
	 * @param MM_OrderItem $orderItem The order item which holds the product information for the subscription being created
	 * @param MM_CardInfo $cardInfo The credit card information used to charge the order, needed to obtain the last 4 digits for storing
	 * 
	 * @return MM_PaymentServiceResponse representing the status of the transaction
	 */
	protected function parseARBGatewayResponse(MM_Response $rawResponse,MM_OrderItem $orderItem, MM_CardInfo $cardInfo)
	{
			global $wpdb;
			
			if ($rawResponse->type == MM_Response::$ERROR)
			{
				return new MM_PaymentServiceResponse("Error creating subscription: There was an error connecting to merchant gateway",MM_PaymentServiceResponse::$ERROR);
			}
			
			libxml_use_internal_errors(true); //prevents improper xmlns attribute from Authorizenet from generating errors
			try
			{
				$xmlResponse = new SimpleXMLElement($rawResponse->message);
				$resultCode = strtoupper($xmlResponse->messages->resultCode);
			}
			catch (Exception $e)
			{
				return new MM_PaymentServiceResponse("Unable to process subscription gateway response",MM_PaymentServiceResponse::$ERROR);
			}
			
			switch ($resultCode)
			{
				case 'OK':
					$insertData = array( "order_item_id"      => $orderItem->getId(),
										 "x_subscription_id"  => $xmlResponse->subscriptionId,
										 "last_four"          => substr($cardInfo->getCardNumber(),-4),
										 "transaction_date"   => MM_Utils::getCurrentTime()
 							);
					$wpdb->insert(MM_TABLE_AUTHNET_ARB_SUBSCRIPTIONS,$insertData);
					return new MM_PaymentServiceResponse();
					break;
				case 'ERROR':
					$code = $xmlResponse->messages->message->code;
					$message = $xmlResponse->messages->message->text;
					$error = (!empty($code) && !empty($message))?"{$code}:{$message}":"{$code}{$message}";
					return new MM_PaymentServiceResponse($error,MM_PaymentServiceResponse::$ERROR);
					break;
				default:
					return new MM_PaymentServiceResponse("There was an error setting up a subscription: Invalid Response from merchant gateway",MM_PaymentServiceResponse::$ERROR);
					break;
			}
	}
	
	
	/**
	 * Utility method to extract the payment schedule from a product, and translate the MemberMouse units of time into ARB units
	 * 
	 * @param MM_Product $product The product to extract schedule information from
	 * @return array An array containing the keys 'recurring' (a boolean),'trialLength','trialUnit','length', and 'unit', with the last 4 translated into ARB units
	 */
	private function getARBPaymentScheduleFromProduct(MM_Product $product)
	{
			$paymentSchedule = array();
			$paymentSchedule['recurring']   = $product->isRecurring();
			$paymentSchedule['trialUnit']   = $product->getTrialFrequency();
			$paymentSchedule['trialLength'] = $product->getTrialDuration();
			$paymentSchedule['unit']        = $product->getRebillFrequency();
			$paymentSchedule['length']      = $product->getRebillPeriod();
			
			//translate membermouse length units to Authorize.net units recognized by ARB schema. Accepted values are days and months
			$translationHelper = array("trialUnit"=>"trialLength", "unit"=>"length");
 			
			foreach ($translationHelper as $unitName=>$lengthName)
			{
				if ($paymentSchedule[$unitName] == "years")
	 			{
	 				$paymentSchedule[$lengthName] = intval($paymentSchedule[$lengthName]) * 12;
	 				$paymentSchedule[$unitName] = "months";
	 			}
	 			else if ($paymentSchedule[$unitName] == "weeks")
	 			{
	 				$paymentSchedule[$lengthName] = intval($paymentSchedule[$lengthName]) * 7;
	 				$paymentSchedule[$unitName] = "days";
	 			}
			}
 			return $paymentSchedule;
	}
	
	
	/**
	 * Respond to events generated by MemberMouse
	 *
	 * @see MM_MemberMouseEventListener::eventReceived()
	 * @param integer $eventType An event constant enumerated in MM_MemberMouseEventListener
	 * @param variable $eventData Any data associated with the event
	 * 
	 * @return MM_Response indicating success or failure processing the event
	 */
	public function eventReceived($eventType, $eventData)
	{
		$response = new MM_Response();
		switch ($eventType)
		{
			case MM_MemberMouseEventListener::PRODUCT_ADDED:
			case MM_MemberMouseEventListener::PRODUCT_UPDATED:
				if ($eventData instanceof MM_Product)
				{
					$product = $eventData;
					if ($product->isRecurring())
					{
						$paymentSchedule = $this->getARBPaymentScheduleFromProduct($product);
						//Validate that the fields required by the ARB API are non-empty and the values fall within the appropriate ranges
						if (($paymentSchedule['unit'] == 'days') && (($paymentSchedule['length'] < 7) || ($paymentSchedule['length'] > 365)))
						{
							return new MM_Response("Error: Authorize.net only supports recurring billing with a term of at least 7 days and at most 365 days",MM_Response::$ERROR);
						}
						
						if (($paymentSchedule['unit'] == 'months') && (($paymentSchedule['length'] < 1) || ($paymentSchedule['length'] > 12)))
						{
							return new MM_Response("Error: Authorize.net does not support the recurring schedule you have entered",MM_Response::$ERROR);
						}
					}
				}
				break;
			default:
				return $response;
		}
		return $response;
	}
	
	
	/**
	 * Refunds the transaction with the supplied id.  If a valid transaction id is supplied, first the transaction is checked to see if it is within
	 * the $voidWindow. Unsettled transactions need to be voided (they can't be refunded because they haven't been sent to the processor yet) and settled 
	 * transactions need to be credited. For transactions within the $voidWindow, a void is attempted first, and if that fails, a refund is attempted.
	 * For transactions outside the voidWindow, a refund is directly attempted.
	 * 
	 * @param integer $transactionId The MemberMouse transaction id
	 * @return MM_PaymentServiceResponse Representing the success or failure of the refund operation
	 */
	public function refundTransaction($transactionId)
	{
		global $wpdb;
		
		//make sure we have a valid transaction id
		if (empty($transactionId))
		{
			return new MM_PaymentServiceResponse("Unable to process refund, invalid transaction id supplied",MM_PaymentServiceResponse::$ERROR);
		}
		
		//make sure the transaction exists
		$transactionRow = $wpdb->get_row($wpdb->prepare("SELECT * from ".MM_TABLE_TRANSACTION_LOG." where id = %s",$transactionId));
		if (is_null($transactionRow))
		{
			return new MM_PaymentServiceResponse("Unable to process refund, transaction does not exist",MM_PaymentServiceResponse::$ERROR);
		}
		
		//make sure its not already refunded
		if (!is_null($transactionRow->refund_id))
		{
			return new MM_PaymentServiceResponse("Transaction has already been refunded",MM_PaymentServiceResponse::$ERROR);
		}
		
		//determine where the transaction information is stored based on the type
		$x_trans_id = "";
		$lastFour  = "";
		$transactionAmount = abs($transactionRow->amount);
		$gatewayTransactionDate = "";
		$gatewayRefundRequired = false;
		switch ($transactionRow->transaction_type)
		{
			case MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT:
				//transaction info for initial and non-recurring charges is in the aim transactions table, retrieve the x_trans_id and the last_four
				$aimTransactionInfo = $wpdb->get_row($wpdb->prepare("SELECT x_trans_id, last_four, transaction_date from ".MM_TABLE_AUTHNET_AIM_TRANSACTIONS." where id=%s",$transactionRow->payment_service_detail_id));
				if (is_null($aimTransactionInfo))
				{
					return new MM_PaymentServiceResponse("Unable to refund transaction",MM_PaymentServiceResponse::$ERROR);
				}
				$x_trans_id = $aimTransactionInfo->x_trans_id;
				$lastFour  = $aimTransactionInfo->last_four;
				$gatewayTransactionDate = $aimTransactionInfo->transaction_date;
				$gatewayRefundRequired = true;
				break;
			case MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT:
				//transaction info for subscriptions is stored between the arb subscriptions table and subscriptions history table, retrieve the last_four and the x_trans_id
				$arbTransactionQuery = "SELECT arbh.x_trans_id,arbt.last_four,arbh.transaction_date from ".MM_TABLE_AUTHNET_ARB_SUBSCRIPTION_HISTORY." arbh ".
									   "LEFT JOIN ".MM_TABLE_AUTHNET_ARB_SUBSCRIPTIONS." arbt ON (arbh.x_subscription_id = arbt.x_subscription_id) ".
									   "WHERE arbh.x_trans_id = %s";
				$arbTransactionInfo = $wpdb->get_row($wpdb->prepare($arbTransactionQuery,$transactionRow->payment_service_detail_id));
				$x_trans_id = $arbTransactionInfo->x_trans_id;
				$lastFour  = $arbTransactionInfo->last_four;
				$gatewayTransactionDate = $arbTransactionInfo->transaction_date;
				$gatewayRefundRequired = true;
				break;
			case MM_TransactionLog::$TRANSACTION_TYPE_CHARGE:
			case MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_CHARGE:
				return new MM_PaymentServiceResponse("Unable to refund transaction: Not a payment",MM_PaymentServiceResponse::$ERROR);
				break;
			default:
				return new MM_PaymentServiceResponse("Unknown transaction type, unable to process refund",MM_PaymentServiceResponse::$ERROR);
		}
		
		$finalResponse = new MM_PaymentServiceResponse("There was an error refunding the designated transaction",MM_PaymentServiceResponse::$ERROR); //placeholder
		
		if ($gatewayRefundRequired)
		{ 
			if (empty($x_trans_id)) //necessary for both voids and credits
			{
				return new MM_PaymentServiceResponse("A configuration error was encountered during the attempt to void the transaction",MM_PaymentServiceResponse::$ERROR);
			}
			
			
			$currentTime = current_time('timestamp',1);
			$gatewayTransactionDate = strtotime($gatewayTransactionDate);
			$voidWindowInSeconds = $this->voidWindow * 3600; //3600 secs in an hour
			
			//if there is no transaction date (for whatever reason) or the transaction is within the window, attempt a void first
			if (empty($gatewayTransactionDate) || (($currentTime - $voidWindowInSeconds) <= $gatewayTransactionDate))
			{
				$finalResponse = $this->sendAIMTransactionVoid($x_trans_id,$transactionId);
			}
			
			//if the void was not successful (or not attempted) and we have the last four digits, attempt a credit
			if (($finalResponse->getStatus() != MM_PaymentServiceResponse::$SUCCESS) && !empty($lastFour))
			{
				$finalResponse = $this->sendAIMTransactionCredit($x_trans_id, $lastFour, $transactionAmount,$transactionId);
			}
		}
		
		return $finalResponse;
		
	}
	
	
	/**
	 * Send a linked Credit to Authorize.net to completely refund a transaction
	 * 
	 * @param string $x_trans_id The Authorize.net unique transaction id
	 * @param string $lastFour The last four digits of the credit card being refunded
	 * @param float $transactionAmount The dollar amount being refunded (should equal the original transaction amount, as currently partial refunds are not supported)
	 * @param integer $originalTransactionId The id of the MemberMouse transaction being refunded
	 * 
	 * @return MM_PaymentServiceResponse indicating the success of failure of the operation
	 */
	protected function sendAIMTransactionCredit($x_trans_id, $lastFour,$transactionAmount,$originalTransactionId)
	{
		if (empty($x_trans_id) || empty($lastFour))
		{
			return new MM_PaymentServiceResponse("Unable to process Authorize.net refund (credit): Either the transaction id or the last 4 of the credit card are unavailable",MM_PaymentServiceResponse::$ERROR);
		}
		//TODO: REFACTOR: Will the gateway process a credit for a transactionAmount of $0?
		
		$postValues = array(
				"x_login"			=> $this->getLogin(),
				"x_tran_key"		=> $this->getTransactionKey(),
		
				"x_version"			=> "3.1",
				"x_delim_data"		=> "TRUE",
				"x_delim_char"		=> "|",
				"x_relay_response"	=> "FALSE",
		
				"x_type"			=> "CREDIT",
				"x_card_num"		=> $lastFour,
				"x_amount"			=> $transactionAmount,
				"x_trans_id"        => $x_trans_id
		);
		
		$postString = "";
		foreach( $postValues as $key => $value )
		{
			$postString .= "$key=" . urlencode( $value ) . "&";
		}
		
		$creditResponse = $this->parseAIMVoidAndCreditResponses($this->doHTTPRequest($this->getAIMGatewayURL(),"POST",$postString),$originalTransactionId);
		return $creditResponse;
	}
	
	
	/**
	 * Attempt to void a transaction with the Authorize.net transaction identifier supplied. Voids can only be issued on unsettled transactions
	 * 
	 * @param string $x_trans_id The Authorize.net transaction id
	 * @param integer $originalTransactionId The id of the MemberMouse transaction being refunded
	 * 
	 * @return MM_PaymentServiceResponse indicating success or failure
	 */
	protected function sendAIMTransactionVoid($x_trans_id,$originalTransactionId)
	{
		if (empty($x_trans_id))
		{
			return new MM_PaymentServiceResponse("A configuration error was encountered during the attempt to void the transaction",MM_PaymentServiceResponse::$ERROR);
		}
		
		$postValues = array(
				"x_login"			=> $this->getLogin(),
				"x_tran_key"		=> $this->getTransactionKey(),
					
				"x_version"			=> "3.1",
				"x_delim_data"		=> "TRUE",
				"x_delim_char"		=> "|",
				"x_relay_response"	=> "FALSE",
					
				"x_type"			=> "VOID",
				"x_trans_id"        => $x_trans_id
		);
			
		$postString = "";
		foreach( $postValues as $key => $value )
		{
			$postString .= "$key=" . urlencode( $value ) . "&";
		}
			
		$voidResponse = $this->parseAIMVoidAndCreditResponses($this->doHTTPRequest($this->getAIMGatewayURL(),"POST",$postString),$originalTransactionId);	
		return $voidResponse;
	}
	
	
	/**
	 * Processes the responses returned as a result against VOID and CREDIT operations
	 * 
	 * @param MM_Response $response An MM_Response object containing the raw response from Authorize.net as the message if the transmission was successful
	 * @param integer $originalTransactionId The original MemberMouse transaction being refunded
	 * 
	 * @return MM_PaymentServiceResponse indicating whether the operation performed was successful from the standpoint of the MemberMouse payment service framework
	 */
	protected function parseAIMVoidAndCreditResponses(MM_Response $response, $originalTransactionId)
	{
		global $wpdb;
		
		if ($response->type == MM_Response::$ERROR)
		{
			return new MM_PaymentServiceResponse("There was an error refunding the transaction: Error connecting to merchant gateway",MM_PaymentServiceResponse::$ERROR);
		}
		
		$responseData = explode("|",$response->message);
		if (!is_array($responseData))
		{
			//the data was not in the format expected, this is an error
			return new MM_PaymentServiceResponse("There was an error refunding the transaction: Invalid Response from merchant gateway",MM_PaymentServiceResponse::$ERROR);
		}
		
		switch ($responseData[0])
		{
			case '1':
			case '4':
				
				//get original transaction details
				$originalTransactionInfo = $wpdb->get_row($wpdb->prepare("SELECT * FROM ".MM_TABLE_TRANSACTION_LOG." WHERE id=%s",$originalTransactionId));
				
				//log gateway response in AIM transaction table
				$transactionAmount = floatval(isset($responseData[9])?$responseData[9]:0);
				$transactionDescription = "Refund for transaction# {$originalTransactionId}";
				$transactionDate = MM_Utils::getCurrentTime();
				$insertData = array( "order_id"          => $originalTransactionInfo->order_id,
						"x_trans_id"        => isset($responseData[6])?$responseData[6]:0,
						"amount"            => -(abs($transactionAmount)),
						"transaction_date"  => $transactionDate
				);
				$wpdb->insert(MM_TABLE_AUTHNET_AIM_TRANSACTIONS,$insertData);
				$aimTransactionId = $wpdb->insert_id;
				
				$response = MM_TransactionLog::createTransactionEntry($originalTransactionInfo->order_id, 
														 			  $originalTransactionInfo->order_item_id, 
														 			  $transactionAmount, 
																	  $originalTransactionInfo->currency,
														 			  $transactionDescription, 
																	  MM_TransactionLog::$TRANSACTION_TYPE_REFUND, 
																	  false,
																	  $this->getId(),
																	  $aimTransactionId, 
																	  $transactionDate, 
																	  $originalTransactionId);
				if (MM_Response::isSuccess($response))
				{
					$wpdb->query($wpdb->prepare("UPDATE ".MM_TABLE_TRANSACTION_LOG." SET refund_id = %s WHERE id = %s",$response->message,$originalTransactionId));
				}
				return new MM_PaymentServiceResponse();
				break;
			case '2':
				//declined
				return new MM_PaymentServiceResponse("The merchant gateway declined to perform the refund operation", MM_PaymentServiceResponse::$FAILED);
				break;
			case '3':
				//error
				$details = (isset($responseData[3]) && !empty($responseData[3]))?": {$responseData[3]}":"";
				return new MM_PaymentServiceResponse("There was an error performing the refund operation{$details}",MM_PaymentServiceResponse::$ERROR);
				break;
			default:
				//process as error
				return new MM_PaymentServiceResponse("There was an error performing the refund operation: Invalid Response from merchant gateway",MM_PaymentServiceResponse::$ERROR);
				break;
		}
	}
	
	
	private function isPendingOverdueSubscription(MM_OrderItem $orderItem) 
	{
		global $wpdb;
		$pendingOverdueSubscriptions = MM_TABLE_AUTHNET_PENDING_OVERDUE_SUBSCRIPTIONS;
		$pendingOverdueSubscriptionId = $wpdb->get_var("SELECT id from {$pendingOverdueSubscriptions} where order_item_id='{$orderItem->getId()}'");
			
		if (!is_null($pendingOverdueSubscriptionId))
		{
			return true;
		}
		
		return false;
	}
	
	
	/**
	 * Cancel the subscription attached to a recurring order item
	 * @see MM_PaymentService::cancelSubscription()
	 * 
	 * @param MM_OrderItem $orderItem The item representing the product to be cancelled
	 * @return MM_PaymentServiceResponse indicating success, failure or error. Non-success states may return a descriptive message indicating what happened
	 */
	public function cancelSubscription(MM_OrderItem $orderItem)
	{
		global $wpdb;
		
		//first, make sure this is a product. If not, something got messed up above
		if ($orderItem->getItemType() != MM_OrderItem::$ORDER_ITEM_TYPE_PRODUCT)
		{
			return new MM_PaymentServiceResponse("Attempted to cancel a non-product item",MM_PaymentServiceResponse::$ERROR);
		}
		
		//then make sure its not already cancelled
		if ($orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING_CANCELLED)
		{
			return new MM_PaymentServiceResponse("Error cancelling subscription: The subscription has already been cancelled",MM_PaymentServiceResponse::$ERROR);
		}
	
		$subscriptionsTable = MM_TABLE_AUTHNET_ARB_SUBSCRIPTIONS;
		$pendingOverdueSubscriptions = MM_TABLE_AUTHNET_PENDING_OVERDUE_SUBSCRIPTIONS;
		$x_subscription_id = $wpdb->get_var("SELECT x_subscription_id from {$subscriptionsTable} where order_item_id='{$orderItem->getId()}'");
		if (is_null($x_subscription_id))
		{
			$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING_CANCELLED);
			$orderItem->commitData();
			
			// check if item is in the pending overdue subscriptions table
			$pendingOverdueSubscriptionId = $wpdb->get_var("SELECT id from {$pendingOverdueSubscriptions} where order_item_id='{$orderItem->getId()}'");
			
			if (is_null($pendingOverdueSubscriptionId))
			{
				return new MM_PaymentServiceResponse("Unable to cancel subscription: Subscription not found",MM_PaymentServiceResponse::$ERROR);
			}
			else
			{
				// remove item for pending overdue subscriptions table
				$wpdb->delete($pendingOverdueSubscriptions, array('ID' => $pendingOverdueSubscriptionId), array('%d'));
				
				return new MM_PaymentServiceResponse();
			}
		}
		
		$xmlContent =
		'<?xml version="1.0" encoding="utf-8"?>' .
		'<ARBCancelSubscriptionRequest xmlns="AnetApi/xml/v1/schema/AnetApiSchema.xsd">' .
		"<merchantAuthentication>".
		"<name>{$this->getLogin()}</name>".
		"<transactionKey>{$this->getTransactionKey()}</transactionKey>".
		"</merchantAuthentication>".
		"<subscriptionId>{$x_subscription_id}</subscriptionId>".
		"</ARBCancelSubscriptionRequest>";
	
		$headerCurlOptions = array(CURLOPT_HTTPHEADER=>array("Content-Type: text/xml"));
		$cancelResponse = $this->parseARBCancelOrUpdateResponse($this->doHTTPRequest($this->getARBGatewayURL(),"POST",$xmlContent,$headerCurlOptions));
		if (MM_PaymentServiceResponse::isSuccess($cancelResponse))
		{
			$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING_CANCELLED);
			$orderItem->commitData();
		}
		return $cancelResponse;
	}
	
	
	/**
	 * Process the results of an ARB cancel subscription request or update subscription request. The response from a cancel or update is 
	 * identical to that of a create with the exception that the subscription id is not included in the response
	 *
	 * @param MM_Response $rawResponse The raw response from the remote gateway, which should contain an XML response, wrapped in an MM_Response object
	 * @param MM_OrderItem $orderItem The item linked to the subscription that is being cancelled or updated
	 * @param boolean $cancellation (optional) This is true if the incoming response is a result of a cancellation request. False indicates that the request was an update. Defaults to false
	 * 
	 * @return MM_PaymentServiceResponse representing the status of the cancel or update operation
	 */
	protected function parseARBCancelOrUpdateResponse(MM_Response $rawResponse)
	{
		if ($rawResponse->type == MM_Response::$ERROR)
		{
			return new MM_PaymentServiceResponse("Error creating subscription: There was an error connecting to merchant gateway",MM_PaymentServiceResponse::$ERROR);
		}
			
		libxml_use_internal_errors(true); //prevents improper xmlns attribute from Authorizenet from generating errors
		try
		{
			$xmlResponse = new SimpleXMLElement($rawResponse->message);
			$resultCode = strtoupper($xmlResponse->messages->resultCode);
		}
		catch (Exception $e)
		{
			return new MM_PaymentServiceResponse("Unable to process subscription gateway response",MM_PaymentServiceResponse::$ERROR);
		}
			
		switch ($resultCode)
		{
			case 'OK':
				return new MM_PaymentServiceResponse();
				break;
			case 'ERROR':
				$code = $xmlResponse->messages->message->code;
				$message = $xmlResponse->messages->message->text;
				$error = (!empty($code) && !empty($message))?"{$code}:{$message}":"{$code}{$message}";
				return new MM_PaymentServiceResponse($error,MM_PaymentServiceResponse::$ERROR);
				break;
			default:
				return new MM_PaymentServiceResponse("Error: Invalid Response from merchant gateway",MM_PaymentServiceResponse::$ERROR);
				break;
		}
	}
	
	
	/**
	 * Updates the payment gateway with new information, and update the MemberMouse order with the new billing address
	 * @see MM_PaymentService::updateSubscriptionInfo()
	 *
	 * @param MM_OrderItem $orderItem The order item representing the subscription being updated
	 * @param MM_CardInfo $cardInfo (optional) The new card to store on file
	 * @param MM_CustomerAddress $billingAddress The new billing address to store. Should be the address associated with the customer's card on file
	 *
	 * @return MM_PaymentServiceResponse representing success or error. Contains a descriptive error message on error
	 */
	public function updateSubscriptionInfo(MM_OrderItem $orderItem, MM_CardInfo $cardInfo=null, MM_CustomerAddress $billingAddress=null)
	{
		global $wpdb;
		
		if ($orderItem->getItemType() != MM_OrderItem::$ORDER_ITEM_TYPE_PRODUCT)
		{
			return new MM_PaymentServiceResponse("Attempted to update a non-product item",MM_PaymentServiceResponse::$ERROR);
		}
		
		$subscriptionsTable = MM_TABLE_AUTHNET_ARB_SUBSCRIPTIONS;
		$x_subscription_id = $wpdb->get_var("SELECT x_subscription_id from {$subscriptionsTable} where order_item_id='{$orderItem->getId()}'");
		if (is_null($x_subscription_id))
		{
			return new MM_PaymentServiceResponse("Unable to update subscription: Subscription not found",MM_PaymentServiceResponse::$ERROR);
		}
		
		//update credit card info if supplied
		$paymentXml = "";
		if (!is_null($cardInfo))
		{
			$cardNumber =       $cardInfo->getCardNumber();
			$expirationDate =   date("Y-m",mktime(0,0,0,$cardInfo->getExpirationMonth(),1,$cardInfo->getExpirationYear()));
			$paymentXml = "<payment>".
							  "<creditCard>".
								  "<cardNumber>{$cardNumber}</cardNumber>".
								  "<expirationDate>{$expirationDate}</expirationDate>".
						  	  "</creditCard>".
						  "</payment>";
		}
		
		//update customer info
		$customerXml = "";
		$order = new MM_Order($orderItem->getOrderId());
		if ($order->isValid())
		{
			$customer       =   $order->getCustomer();
			$customerId     =   $customer->getId();
			$customerEmail  =   $customer->getEmail();
			$customerPhone  =   $customer->getPhone();
			
			$customerXml 	= 	"<customer>".
									"<id>{$customerId}</id>".
									"<email>{$customerEmail}</email>".
									"<phoneNumber>{$customerPhone}</phoneNumber>".
								"</customer>";
		}
		
		//update billing address if supplied
		$billtoXml = "";
		if (!is_null($billingAddress))
		{
			$firstName 				= 	$billingAddress->getFirstName();
			$lastName				= 	$billingAddress->getLastName();
			if (empty($firstName) || empty($lastName))
			{
				$firstName = $customer->getFirstName();
				$lastName  = $customer->getLastName();
			}
			$address2 				=   $billingAddress->getAddressLine2();
			$combinedBillingAddress =   (!empty($address2))?($billingAddress->getAddressLine1()." ".$address2):$billingAddress->getAddressLine1();
			$combinedBillingAddress =   substr($combinedBillingAddress,0,60);
			$billingCity 			=   substr($billingAddress->getCity(),0,40);
			$billingState			=   $billingAddress->getState();
			$billingZip 			=   $billingAddress->getPostalCode();
			$billingCountry 		=   $billingAddress->getCountry();
			$billtoXml 				=   "<billTo>".
											"<firstName>{$firstName}</firstName>".
											"<lastName>{$lastName}</lastName>".
											"<address>{$combinedBillingAddress}</address>".
											"<city>{$billingCity}</city>".
											"<state>{$billingState}</state>".
											"<zip>{$billingZip}</zip>".
											"<country>{$billingCountry}</country>".
										"</billTo>";
		}
		
		//now create the final schema to send
		$xmlContent =
		'<?xml version="1.0" encoding="utf-8"?>' .
		'<ARBUpdateSubscriptionRequest xmlns="AnetApi/xml/v1/schema/AnetApiSchema.xsd">' .
		"<merchantAuthentication>".
		"<name>{$this->getLogin()}</name>".
		"<transactionKey>{$this->getTransactionKey()}</transactionKey>".
		"</merchantAuthentication>".
		"<subscriptionId>{$x_subscription_id}</subscriptionId>".
		"<subscription>".
		$paymentXml.
		$customerXml.
		$billtoXml.
		"</subscription>".
		"</ARBUpdateSubscriptionRequest>";
		
		$headerCurlOptions = array(CURLOPT_HTTPHEADER=>array("Content-Type: text/xml"));
		$gatewayUpdateResponse = $this->parseARBCancelOrUpdateResponse($this->doHTTPRequest($this->getARBGatewayURL(),"POST",$xmlContent,$headerCurlOptions));
		if (MM_PaymentServiceResponse::isError($gatewayUpdateResponse))
		{
			return $gatewayUpdateResponse;
		}
		else 
		{
			return parent::updateSubscriptionInfo($orderItem,$cardInfo,$billingAddress);
		}
	}
	
}
