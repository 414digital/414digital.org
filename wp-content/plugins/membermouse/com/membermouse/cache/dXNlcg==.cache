/**
 *
 * MemberMouse(TM) (http://www.membermouse.com) 
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_User extends MM_Entity
{	
	public static $NEW_USER_ID = -1;
	
	// this is used to create a user object with sample data in it
	public static $SAMPLE_USER_ID = -10;
	
	private $membershipId = "";
	private $status = "1";
	private $pendingStatus = "0";
	private $importedFlag = "0";
	private $lastUpdatedDate = null;
	private $statusUpdatedDate = null; 
	private $statusMessage = "";
	private $daysCalcMethod = "join_date";
	private $daysCalcValue = ""; 
	private $becameActiveDate = null;
	private $phone = "";
	private $username = "";
	private $email = "";
	private $firstName = "";
	private $lastName = "";
	private $registrationDate = null;
	private $cancellationDate = null;
	private $expirationDate = null;
	private $notes = "";
	private $password = "";
	private $subscribedListId = ""; 
	private $subscribedProviderId = "";
	private $lastLoginDate = null; 
	private $lastLoginIpAddress = "";
	private $loginCount = -1;
	private $pageAccessCount = -1;
	private $emailCount = -1;
	private $welcomeEmailSentDate = null; 
	private $billingAddress = "";
	private $billingCity = "";
	private $billingState = "";
	private $billingZip = "";
	private $billingCountry = "";
	private $shippingAddress = "";
	private $shippingCity = "";
	private $shippingState = "";
	private $shippingZip = "";
	private $shippingCountry = "";
	
	// interal use
	private $membership;
	private $lastMembershipId = "";
	private $lastDaysCalcMethod = "";
	private $lastDaysCalcValue = ""; 
	private $lastCancellationDate = "";
	private $lastExpirationDate = "";
	private $lastFirstName = "";
	private $lastLastName = "";
	private $lastEmail = "";
	private $lastUsername = "";
	private $lastPhone = "";
	private $lastNotes = "";
	private $lastStatus = "";
	private $lastPassword = "";
	private $lastBillingAddress = "";
	private $lastBillingCity = "";
	private $lastBillingState = "";
	private $lastBillingZip = "";
	private $lastBillingCountry = "";
	private $lastShippingAddress = "";
	private $lastShippingCity = "";
	private $lastShippingState = "";
	private $lastShippingZip = "";
	private $lastShippingCountry = "";
	private $statusUpdated = false;
	private $sendWelcomeEmailFlag = true;
	private $membershipLevelChangedFlag = false;
	
	private $originAffiliateId = "";
	private $originSubaffiliateId = "";
	
	
	public function __construct($id="", $getData=true)
	{
		if(!($id instanceof MM_Response))
		{
			if(isset($id) && (intval($id) > 0 || intval($id) == self::$SAMPLE_USER_ID))
			{
				$this->id = $id;
					
				if($getData == true)
				{
					$this->getData();
				}
			}
			else
			{
				$id = "";
			}
		}
	}
	
	/**
	 * Locate a user using an email address.
	 *
	 * @param String $email The email address to search for
	 * @return MM_User Returns the user object, always check if the user is valid before using
	 */
	public static function findByEmail($email)
	{
		$user = new MM_User();
		
		if(MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_USE_CHECKOUT_FORM_TEST_DATA) == "1")
		{
			$email = MM_TestDataUtils::convertTestEmail($email);
		}
		
		if(!empty($email))
		{
			$wpUser = get_user_by("email", $email);
			
			if($wpUser === false)
			{
				$user->invalidate();
			}
			else
			{
				$user->setData($wpUser);
			}
		}
		
		return $user;
	}

	protected function getData()
	{
		if($this->id != self::$SAMPLE_USER_ID)
		{
			$wpUser = get_user_by("id", $this->id);
	
			if($wpUser === false)
			{
				parent::invalidate();
			}
			else
			{
				$this->setData($wpUser);
			}
		}
		else
		{
			// populate sample data
			$this->id = self::$SAMPLE_USER_ID;
			$this->username = "sampleusername";
			$this->email = "sample@yourdomain.com";
			$this->firstName = "SampleFirstName";
			$this->lastName = "SampleLastName";
			$this->phone = "(555) 555-5555";
			$this->notes = "Sample member notes";
			$this->password = "samplePa\$\$1231";
			$this->membershipId = MM_MembershipLevel::getDefaultMembership()->getId();
			$this->status = $this->lastStatus = MM_Status::$ACTIVE;
			$this->billingAddress = "123 Sample St.";
			$this->billingCity = "Sample City";
			$this->billingState = "NY";
			$this->billingZip = "12345";
			$this->billingCountry = "US";
			$this->shippingAddress = "123 Sample St.";
			$this->shippingCity = "Sample City";
			$this->shippingState = "NY";
			$this->shippingZip = "12345";
			$this->shippingCountry = "US";
			$this->daysCalcMethod = MM_DaysCalculationTypes::$JOIN_DATE;
			$this->registrationDate = MM_Utils::getCurrentTime();
			$this->lastLoginDate = MM_Utils::getCurrentTime();
			$this->becameActiveDate = MM_Utils::getCurrentTime();
			$this->welcomeEmailSentDate = MM_Utils::getCurrentTime();
			$this->lastUpdatedDate = MM_Utils::getCurrentTime();
			$this->statusUpdatedDate = MM_Utils::getCurrentTime();
			
			parent::validate();
		}
	}

	public function setData($wpUser)
	{
		global $wpdb;
		
		if($wpUser instanceof WP_User)
		{
			try
			{
				$this->id = $wpUser->ID;
				$this->username = $wpUser->user_login;
				$this->registrationDate = $wpUser->user_registered;
				$this->email = $wpUser->user_email;
				
				// get MM user data
				$sql = "SELECT * FROM ".MM_TABLE_USER_DATA." WHERE wp_user_id='{$this->id}' LIMIT 1;";
				$mmUserData = $wpdb->get_row($sql);
				if($mmUserData && isset($mmUserData->wp_user_id))
				{
					$this->firstName = $mmUserData->first_name;
					$this->lastName = $mmUserData->last_name;
					$this->phone = $mmUserData->phone;
					$this->notes = $mmUserData->notes;
					$this->password = $this->lastPassword = MM_MemberMouseService::decryptPassword($mmUserData->password);
					$this->membershipId = $mmUserData->membership_level_id;
					$this->status = $this->lastStatus = $mmUserData->status;
					$this->pendingStatus = $mmUserData->pending_status;
					$this->importedFlag = $mmUserData->imported;
					$this->billingAddress = $mmUserData->billing_address1;
					$this->billingCity = $mmUserData->billing_city;
					$this->billingState = $mmUserData->billing_state;
					$this->billingZip = $mmUserData->billing_postal_code;
					$this->billingCountry = $mmUserData->billing_country;
					$this->shippingAddress = $mmUserData->shipping_address1;
					$this->shippingCity = $mmUserData->shipping_city;
					$this->shippingState = $mmUserData->shipping_state;
					$this->shippingZip = $mmUserData->shipping_postal_code;
					$this->shippingCountry = $mmUserData->shipping_country;
					$this->lastLoginDate = $mmUserData->last_login_date;
					$this->daysCalcMethod = $mmUserData->days_calc_method;
					
					// This is a failsafe in case the days calc method isn't set. This can happen
					// with migrated accounts from MM 1.x to MM 2.x
					if(empty($this->daysCalcMethod))
					{
						$this->daysCalcMethod = MM_DaysCalculationTypes::$JOIN_DATE;
					}
					
					$this->daysCalcValue = $mmUserData->days_calc_value;
					$this->statusMessage = $mmUserData->status_message;
					$this->becameActiveDate = $mmUserData->became_active;
					$this->welcomeEmailSentDate = $mmUserData->welcome_email_sent;
					$this->lastUpdatedDate = $mmUserData->last_updated;
					$this->statusUpdatedDate = $mmUserData->status_updated;
					$this->expirationDate = $mmUserData->expiration_date;
					$this->cancellationDate = $mmUserData->cancellation_date;
					$this->subscribedListId = (isset($mmUserData->subscribed_list_id)) ? $mmUserData->subscribed_list_id : "";
					$this->subscribedProviderId = (isset($mmUserData->subscribed_provider_id)) ? $mmUserData->subscribed_provider_id : "";
					$this->membershipLevelChangedFlag = false;	
					
					$this->originAffiliateId = $mmUserData->origin_affiliate_id;
					$this->originSubaffiliateId = $mmUserData->origin_subaffiliate_id;
				}
				
				parent::validate();
			}
			catch (Exception $ex) {
				parent::invalidate();
			}
		}
		else
		{
			parent::invalidate();
		}
	}
	
	public function commitData()
	{
		global $wpdb;
		
		// check to make sure email is set
		if((isset($this->email) && !empty($this->email)))
		{
			// if username is not set then set username to email
			if(!isset($this->username) || empty($this->username))
			{
				$this->username = $this->email;
			}
		}
		else
		{
			return new MM_Response("Unable to create or update member. Email is required.", MM_Response::$ERROR);
		}
		
		// check if this commit should update a user of pending/error status
		$isPendingUser = $this->isPendingUser();
		
		// determine if this is an insert or an update
		$isUpdate = false;
		if(isset($this->id) && !empty($this->id))
		{
			// double confirm that this is an update -- need to do this in case the WordPress user already exists
			// but the MM user doesn't
			$sql = "SELECT * FROM ".MM_TABLE_USER_DATA." WHERE wp_user_id='{$this->id}' LIMIT 1;";
			$mmUserData = $wpdb->get_row($sql);
			
			if($mmUserData && isset($mmUserData->wp_user_id))
			{
				$isUpdate = true;
			}
		}
		
		// if this is not an update for an existing user or if it is and they're changing their email, 
		// check if the email is already in use 
		$isMigration = false;
		$existingWPUserId = email_exists($this->email);
		if((!$isUpdate || (!empty($this->lastEmail) && (strtolower($this->lastEmail) != strtolower($this->email)))) && $existingWPUserId)
		{
			if($this->createMMUserForExistingWPUser($existingWPUserId) == false)
			{
				return new MM_Response("A member with email '".$this->email."' already exists.", MM_Response::$ERROR);
			}
			else 
			{
				$this->id = $existingWPUserId;
				$isMigration = true;
			}
		}
		
		// if this is not an update for an existing user or if it is and they're changing their username,
		// check if the username is already in use
		$existingWPUserId = username_exists($this->username);
		if(((!$isMigration && !$isUpdate) || (!empty($this->lastUsername) && ($this->lastUsername != $this->username))) && $existingWPUserId)
		{
			if($this->createMMUserForExistingWPUser($existingWPUserId) == false)
			{
				return new MM_Response("A member with username '".$this->username."' already exists.", MM_Response::$ERROR);
			}
			else 
			{
				$this->id = $existingWPUserId;
				$isMigration = true;
			}
		}
		
		// make sure that the status of an active user is not changed to pending/error status
		if($isUpdate && !$isPendingUser && ($this->status == MM_Status::$PENDING_ACTIVATION || $this->status == MM_Status::$ERROR))
		{
			return new MM_Response("Cannot change status of an active member to ".strtolower($this->getStatusName()), MM_Response::$ERROR);
		}
		
		// determine if this member is becoming active for the first time
		$becameActive = false;
		if($this->status == MM_Status::$ACTIVE && empty($this->becameActiveDate) && !empty($this->membershipId))
		{
			$becameActive = true;
			$this->becameActiveDate = MM_Utils::getCurrentTime();
		}
		
		// check if membership level is valid and active
		if(!$isUpdate || $this->membershipLevelChangedFlag)
		{
			$membership = $this->getMembershipLevel();
			if($membership->isValid() && !$membership->isActive())
			{
				return new MM_Response("Membership level '{$membership->getName()}' is not active.", MM_Response::$ERROR);
			}
		}
		
		MM_Transaction::begin();
		
		if($isUpdate || $isMigration)
		{
			// update WordPress user
			$result = wp_update_user($this->prepareWPUserData());
			
			if(is_wp_error($result))
			{
				MM_Transaction::rollback();
				return new MM_Response($result->get_error_message(), MM_Response::$ERROR);
			}
			
			// WordPress doesn't allow user_login to be updated through wp_udate_user 
			// so we need to do it manually
			if(!empty($this->lastUsername) && ($this->username != $this->lastUsername))
			{
				$update = array("user_login" => $this->username);
				$whereClause = array("ID" => $this->id);
				$result = $wpdb->update($wpdb->users, $update, $whereClause);
			}
			
			if($result === false)
			{
				MM_Transaction::rollback();
				return new MM_Response("Unable to update username", MM_Response::$ERROR);
			}
			
			// update MM user data
			$whereClause = array("wp_user_id" => $this->id);
			$result = $wpdb->update(MM_TABLE_USER_DATA, $this->prepareMMUserData(), $whereClause);
			
			if($result === false)
			{
				MM_Transaction::rollback();
				return new MM_Response("Unable to update member: ".$wpdb->last_error, MM_Response::$ERROR);
			}
		}
		else
		{
			// insert WordPress user
			if(empty($this->password))
			{
				$this->password = MM_Utils::createRandomString();
			}
			
			$result = wp_insert_user($this->prepareWPUserData());
			
			if(is_wp_error($result))
			{
				MM_Transaction::rollback();
				return new MM_Response($result->get_error_message(), MM_Response::$ERROR);
			}
			
			$this->id = $result;
			
			// insert MM user data
			$result = $wpdb->insert(MM_TABLE_USER_DATA, $this->prepareMMUserData());
			
			if($result === false)
			{
				MM_Transaction::rollback();
				return new MM_Response("Unable to create member: ".$wpdb->last_error, MM_Response::$ERROR);
			}
		}
		
		MM_Transaction::commit();
		parent::validate();
		
		MM_Session::value(MM_Session::$KEY_LAST_USER_ID, $this->id);
		
		// send welcome email if user just became active or if it hasn't been sent
		if($becameActive && empty($this->welcomeEmailSentDate) && $this->doSendWelcomeEmail())
		{
			$this->sendWelcomeEmail();
		}
		
		// dispatch MemberMouse events
		if($becameActive)
		{
			do_action(MM_Event::$MEMBER_ADD, MM_Event::packageMemberData($this->getId()));
		}
		else if($this->status != MM_Status::$PENDING_ACTIVATION && $this->status != MM_Status::$ERROR)
		{
			$acctInfoChanges = $this->getAcctInfoChanges();
			if(!empty($this->lastMembershipId) && ($this->membershipId != $this->lastMembershipId))
			{
				do_action(MM_Event::$MEMBER_MEMBERSHIP_CHANGE, MM_Event::packageMemberData($this->getId()));
			}
			else if(!empty($this->lastStatus) && ($this->status != $this->lastStatus))
			{
				do_action(MM_Event::$MEMBER_STATUS_CHANGE, MM_Event::packageMemberData($this->getId()));
			} else if(count($acctInfoChanges) > 0)
			{
				do_action(MM_Event::$MEMBER_ACCOUNT_UPDATE, MM_Event::packageMemberData($this->getId(), $acctInfoChanges));
			}
		}
		
		// clear comparison values
		$this->lastStatus = "";
		$this->lastMembershipId = "";
		$this->lastUsername = "";
		$this->membershipLevelChangedFlag = false;
		
		return new MM_Response();
	}
	
	/**
	 * This method is used to set and commit the member status and status message in 
	 * one method. This is used instead of commitData() because the status of the user
	 * may need to be changed explicitly because the commitData() method is failing. 
	 * In this case it is necessary just to commit the status and status message.
	 */
	public function commitStatusOnly()
	{
		if($this->isValid())
		{
			global $wpdb;
			
			$mmUserData = array();
			$mmUserData["status"] = $this->status;
			$mmUserData["status_message"] = strip_tags($this->statusMessage);
			$mmUserData["last_updated"] = MM_Utils::getCurrentTime();
			$mmUserData["status_updated"] = MM_Utils::getCurrentTime();
			
			$whereClause = array("wp_user_id" => $this->id);
			$result = $wpdb->update(MM_TABLE_USER_DATA, $mmUserData, $whereClause);
			
			if(!$result)
			{
				return new MM_Response("Unable to update member: ".$wpdb->last_error, MM_Response::$ERROR);
			}
			
			// dispatch MemberMouse event
			if(($this->status != $this->lastStatus))
			{
				do_action(MM_Event::$MEMBER_STATUS_CHANGE, MM_Event::packageMemberData($this->getId()));
				
				// clear comparison value
				$this->lastStatus = "";
			}
		}
		else
		{
			return new MM_Response("Unable to commit member status. Invalid user.", MM_Response::$ERROR);
		}
		
		return new MM_Response();
	}
	
	/**
	 * This function is used to update a single field associated with the user
	 * 
	 * @param String $fieldName the name of the field in the database to update
	 * @param String $value the value to set in the field
	 * 
	 * @return MM_Response
	 */
	public function updateField($fieldName, $value)
	{
		if($this->isValid())
		{
			global $wpdb;
			
			$mmUserData = array();
			$mmUserData[$fieldName] = (strtolower($fieldName) == 'password') ? MM_MemberMouseService::encryptPassword($value) : $value;
			
			$whereClause = array("wp_user_id" => $this->id);
			$result = $wpdb->update(MM_TABLE_USER_DATA, $mmUserData, $whereClause);
			
			if(!$result)
			{
				return new MM_Response("Unable to update member: ".$wpdb->last_error, MM_Response::$ERROR);
			}
		}
		else
		{
			return new MM_Response("Unable to commit member status. Invalid user.", MM_Response::$ERROR);
		}
		
		return new MM_Response();
	}
	
	/**
	 * This function is called if a WordPress user exists with a specific username or email.
	 * This function checks to see if a MM user is associated with this WordPress user and if
	 * it's not, one is created.
	 * 
	 * @param userId the ID of the existing WordPress user
	 * 
	 * @return Boolean returns true if MM user was created and false if an MM user already exists
	 */
	private function createMMUserForExistingWPUser($userId)
	{
		if(is_null($userId) || $userId == false)
		{
			return false;
		}
		
		global $wpdb;
		$sql = "SELECT * FROM ".MM_TABLE_USER_DATA." WHERE wp_user_id='{$userId}' LIMIT 1;";
		$mmUserData = $wpdb->get_row($sql);
		
		if(!$mmUserData)
		{
			$mmUserData = array();
			$mmUserData["wp_user_id"] = $userId;
			$result = $wpdb->insert(MM_TABLE_USER_DATA, $mmUserData);
			
			if($result !== false)
			{
				return true;
			}
		}
		else if(intval($mmUserData->membership_level_id) == 0 && intval($mmUserData->status) == 0 && is_null($mmUserData->password))
		{
			// this indicates that the user data row has been created but never set
			return true;
		}
		
		return false;
	}
	
	private function getAcctInfoChanges()
	{
		$acctInfoChanges = array();
		
		if(!empty($this->lastDaysCalcMethod) && $this->daysCalcMethod != $this->lastDaysCalcMethod) {
			$acctInfoChanges["days_calc_method"] = $this->lastDaysCalcMethod;
		}
		if(!empty($this->lastDaysCalcValue) && $this->daysCalcValue != $this->lastDaysCalcValue) {
			$acctInfoChanges["days_calc_value"] = $this->lastDaysCalcValue;
		}
		if(!empty($this->lastFirstName) && $this->firstName != $this->lastFirstName) {
			$acctInfoChanges["first_name"] = $this->lastFirstName;
		}
		if(!empty($this->lastLastName) && $this->lastName != $this->lastLastName) {
			$acctInfoChanges["last_name"] = $this->lastLastName;
		}
		if(!empty($this->lastEmail) && $this->email != $this->lastEmail) {
			$acctInfoChanges["email"] = $this->lastEmail;
		}
		if(!empty($this->lastUsername) && $this->username != $this->lastUsername) {
			$acctInfoChanges["username"] = $this->lastUsername;
		}
		if(!empty($this->lastPhone) && $this->phone != $this->lastPhone) {
			$acctInfoChanges["phone"] = $this->lastPhone;
		}
		if(!empty($this->lastNotes) && $this->notes != $this->lastNotes) {
			$acctInfoChanges["notes"] = $this->lastNotes;
		}
		if(!empty($this->lastPassword) && $this->password != $this->lastPassword) {
			$acctInfoChanges["password"] = $this->lastPassword;
		}
		if(!empty($this->lastBillingAddress) && $this->billingAddress != $this->lastBillingAddress) {
			$acctInfoChanges["billing_address"] = $this->lastBillingAddress;
		}
		if(!empty($this->lastBillingCity) && $this->billingCity != $this->lastBillingCity) {
			$acctInfoChanges["billing_city"] = $this->lastBillingCity;
		}
		if(!empty($this->lastBillingState) && $this->billingState != $this->lastBillingState) {
			$acctInfoChanges["billing_state"] = $this->lastBillingState;
		}
		if(!empty($this->lastBillingZip) && $this->billingZip != $this->lastBillingZip) {
			$acctInfoChanges["billing_zip_code"] = $this->lastBillingZip;
		}
		if(!empty($this->lastBillingCountry) && $this->billingCountry != $this->lastBillingCountry) {
			$acctInfoChanges["billing_country"] = $this->lastBillingCountry;
		}
		if(!empty($this->lastShippingAddress) && $this->shippingAddress != $this->lastShippingAddress) {
			$acctInfoChanges["shipping_address"] = $this->lastShippingAddress;
		}
		if(!empty($this->lastShippingCity) && $this->shippingCity != $this->lastShippingCity) {
			$acctInfoChanges["shipping_city"] = $this->lastShippingCity;
		}
		if(!empty($this->lastShippingState) && $this->shippingState != $this->lastShippingState) {
			$acctInfoChanges["shipping_state"] = $this->lastShippingState;
		}
		if(!empty($this->lastShippingZip) && $this->shippingZip != $this->lastShippingZip) {
			$acctInfoChanges["shipping_zip_code"] = $this->lastShippingZip;
		}
		if(!empty($this->lastShippingCountry) && $this->shippingCountry != $this->lastShippingCountry) {
			$acctInfoChanges["shipping_country"] = $this->lastShippingCountry;
		}
		if(!empty($this->lastExpirationDate) && $this->expirationDate != $this->lastExpirationDate) {
			$acctInfoChanges["expiration_date"] = $this->lastExpirationDate;
		}
		if(!empty($this->lastCancellationDate) && $this->cancellationDate != $this->lastCancellationDate) {
			$acctInfoChanges["cancellation_date"] = $this->lastCancellationDate;
		}
		$fields = MM_CustomField::getCustomFieldsList();
		foreach($fields as $id=>$val)
		{
			if(MM_CustomFieldData::wasRecentlyUpdated($id, $this->id))
			{
				$acctInfoChanges["cf_{$id}"] = $this->getCustomDataByFieldId($id)->getValue();
			}
		}
		
		return $acctInfoChanges;
	}
 	
 	private function isPendingUser()
 	{
 		if(!empty($this->email))
 		{
	 		global $wpdb;
	 		$sql = "SELECT id FROM ".$wpdb->users." as wpUsers, ".MM_TABLE_USER_DATA." as mmUserData WHERE ";
			$sql .= "((mmUserData.status = '".MM_Status::$PENDING_ACTIVATION."') OR (mmUserData.status = '".MM_Status::$ERROR."') OR (mmUserData.status = '".MM_Status::$CANCELED."')) AND ";
			$sql .= "((wpUsers.user_login='".$this->email."') OR (wpUsers.user_email='".$this->email."')) AND ";
	 		$sql .= "(wpUsers.ID = mmUserData.wp_user_id) LIMIT 1;";
			
			$result = $wpdb->get_row($sql);
			if(isset($result->id))
			{
				if(intval($result->id) > 0)
				{
					$this->id = $result->id;
					return true;
				}
			}
 		}
 		
		return false;
 	}
	
	private function prepareWPUserData()
	{
		$wpUserData = array();
		
		if(!empty($this->id) && $this->id !== 0)
		{
			$wpUserData["ID"] = $this->id;
		}
		else
		{
			// only do this for new members
			if(MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_HIDE_ADMIN_BAR) == "1")
			{
				$wpUserData['show_admin_bar_front'] = "false";
			}
			
			if(!empty($this->firstName))
			{
				$wpUserData['first_name'] = strip_tags($this->firstName);
					
				if(!empty($this->lastName))
				{
					$wpUserData['last_name'] = strip_tags($this->lastName);
					$wpUserData['display_name'] = $wpUserData['first_name']." ".substr($wpUserData['last_name'], 0, 1);
				}
				else
				{
					$wpUserData['display_name'] = $wpUserData['first_name'];
				}
			}
		}
		
		$membership = $this->getMembershipLevel();
		
		if($membership->isValid())
		{
			$wpRole = $this->getMembershipLevel()->getWPRole();
			
			if($wpRole != MM_Role::$ROLE_IGNORE)
			{
				$wpUserData['role'] = $this->getMembershipLevel()->getWPRole();
			}
		}
		
		$wpUserData['user_login'] = strip_tags($this->username);
		
		if(!empty($this->registrationDate))
		{
			$wpUserData['user_registered'] = strip_tags($this->registrationDate);
		}
		else
		{
			$wpUserData['user_registered'] = MM_Utils::getCurrentTime();
		}
		
		// if using test data convert this email
		if(MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_USE_CHECKOUT_FORM_TEST_DATA) == "1")
		{
			$this->email = MM_TestDataUtils::convertTestEmail($this->email);
		}
		
		$wpUserData['user_email'] = strip_tags($this->email);
		
		if($this->lastPassword != $this->password)
		{
			$wpUserData['user_pass'] = strip_tags($this->password);
		}
		
		return $wpUserData;
	}
	
	private function prepareMMUserData()
	{
		$mmUserData = array();
		
		$mmUserData["wp_user_id"] = $this->id;
		$mmUserData["membership_level_id"] = $this->membershipId;
		
		// check if this member is pending cancellation 
		if($this->isPendingCancellation())
		{
			// check if this member should be canceled
			if($this->membershipShouldCancel())
			{
				$this->setStatus($this->getPendingStatus());
				
				// clear pending cancellation
				$this->setCancellationDate(null);
				$this->setPendingStatus("0");
			}
			else if(!empty($this->lastStatus) && ($this->status != $this->lastStatus) 
				&& ($this->lastStatus == MM_Status::$CANCELED || $this->lastStatus == MM_Status::$PAUSED))
			{
				$this->daysCalcMethod = $this->lastDaysCalcMethod;
				$this->daysCalcValue = $this->lastDaysCalcValue;
			}
		}
		
		$mmUserData["status"] = $this->status;
		$mmUserData["pending_status"] = $this->getPendingStatus();
		$mmUserData["imported"] = $this->importedFlag;
		$mmUserData["notes"] = strip_tags($this->notes);
		$mmUserData["phone"] = strip_tags($this->phone);
		$mmUserData['first_name'] = strip_tags($this->firstName);
		$mmUserData['last_name'] = strip_tags($this->lastName);
		$mmUserData["status_message"] = strip_tags($this->statusMessage);
		$mmUserData["days_calc_method"] = $this->daysCalcMethod; 
		$mmUserData["days_calc_value"] = $this->daysCalcValue;
		$mmUserData["subscribed_provider_id"] = $this->subscribedProviderId;
		$mmUserData["subscribed_list_id"] = $this->subscribedListId;
		$mmUserData["billing_address1"] = strip_tags($this->billingAddress);
		$mmUserData["billing_city"] = strip_tags($this->billingCity);
		$mmUserData["billing_state"] = strip_tags($this->billingState);
		$mmUserData["billing_postal_code"] = strip_tags($this->billingZip);
		$mmUserData["billing_country"] = strip_tags($this->billingCountry);
		$mmUserData["shipping_address1"] = strip_tags($this->shippingAddress);
		$mmUserData["shipping_city"] = strip_tags($this->shippingCity);
		$mmUserData["shipping_state"] = strip_tags($this->shippingState);
		$mmUserData["shipping_postal_code"] = strip_tags($this->shippingZip);
		$mmUserData["shipping_country"] = strip_tags($this->shippingCountry);
		$mmUserData["origin_affiliate_id"] = strip_tags($this->originAffiliateId);
		$mmUserData["origin_subaffiliate_id"] = strip_tags($this->originSubaffiliateId);
		
		if($this->doesExpire())
		{
			$mmUserData["expiration_date"] = $this->getExpirationDate();
		}
		else 
		{
			$mmUserData["expiration_date"] = null;
		}
		
		if($this->isPendingCancellation())
		{
			$mmUserData["cancellation_date"] = $this->getCancellationDate();
		}
		else
		{
			$mmUserData["cancellation_date"] = null;
		}
		
		$mmUserData["last_updated"] = MM_Utils::getCurrentTime();
		
		if($this->lastPassword != $this->password)
		{
			$mmUserData["password"] = MM_MemberMouseService::encryptPassword($this->password);
		}
		
		if(!empty($this->lastLoginDate))
		{
			$mmUserData["last_login_date"] = $this->lastLoginDate;
		}
		
		if($this->lastStatus != $this->status)
		{
			$mmUserData["status_updated"] = MM_Utils::getCurrentTime();
		}
		else if(!empty($this->statusUpdatedDate))
		{
			$mmUserData["status_updated"] = $this->statusUpdatedDate;
		}
		
		if(!empty($this->becameActiveDate))
		{
			$mmUserData["became_active"] = $this->becameActiveDate;
		}
		
		if(!empty($this->welcomeEmailSentDate))
		{
			$mmUserData["welcome_email_sent"] = $this->welcomeEmailSentDate;
		}
	
		return $mmUserData;
	}
	
 	public function delete()
 	{
 		require_once(ABSPATH."/wp-admin/includes/user.php");
 		
 		global $wpdb;
		
 		// check if user has already been deleted
 		$sql = "SELECT wp_user_id FROM ".MM_TABLE_USER_DATA." WHERE wp_user_id='{$this->getId()}' LIMIT 1;";
 		$user = $wpdb->get_results($sql);
 		
 		if(!$user)
 		{
 			return new MM_Response("User '".$this->getEmail()."' has already been deleted", MM_Response::$ERROR);
 		}
 		
		if(!$this->hasActiveSubscriptions() || $this->status == MM_Status::$PENDING_ACTIVATION || $this->status == MM_Status::$ERROR)
		{
			// prepare user data to pass to push notifications prior to deletion
			$userData = array(
					'member_id'=>$this->getId(),
					'registered'=>$this->getRegistrationDate(),
					'last_logged_in'=>$this->getLastLoginDate(),
					'last_updated'=>$this->getLastUpdatedDate(),
					'days_as_member'=>$this->getDaysAsMember(),
					'status'=>$this->getStatus(),
					'status_name'=>MM_Status::getName($this->getStatus()),
					'membership_level'=>$this->getMembershipId(),
					'membership_level_name'=>$this->getMembershipName(),
					'first_name'=>$this->getFirstName(),
					'last_name'=>$this->getLastName(),
					'username'=>$this->getUsername(),
					'email' => $this->getEmail(),
					'phone' => $this->getPhone(),
					'billing_address'=>$this->getBillingAddress(),
					'billing_city'=>$this->getBillingCity(),
					'billing_state'=>$this->getBillingState(),
					'billing_zip_code'=>$this->getBillingZipCode(),
					'billing_country'=>$this->getBillingCountryName(),
					'shipping_address'=>$this->getShippingAddress(),
					'shipping_city'=>$this->getShippingCity(),
					'shipping_state'=>$this->getShippingState(),
					'shipping_zip_code'=>$this->getShippingZipCode(),
					'shipping_country'=>$this->getShippingCountryName(),
					'subscribed_list_id'=>$this->subscribedListId,
					'subscribed_provider_id'=>$this->subscribedProviderId
			);
			
			$appliedBundles = $this->getAppliedBundles(true);
			$appliedBundleInfo = array();
				
			foreach($appliedBundles as $appliedBundle)
			{
				$crntBundleInfo = array();
				$crntBundleInfo["bundle_id"] = $appliedBundle->getBundleId();
				$crntBundleInfo["subscribed_list_id"] = $appliedBundle->getSubscribedListId();
				$crntBundleInfo["subscribed_provider_id"] = $appliedBundle->getSubscribedProviderId();
					
				$appliedBundleInfo[] = $crntBundleInfo;
			}
			
			$userData["applied_bundles"] = json_encode($appliedBundleInfo);
			
			// delete all member data
			MM_Transaction::begin();
			
			$sql = "SELECT id FROM ".MM_TABLE_ORDERS." WHERE user_id='{$this->getId()}'";
			$orders = $wpdb->get_results($sql);
			
			if($orders)
			{
				foreach($orders as $order)
				{
					// remove order items
					$sql = "DELETE FROM ".MM_TABLE_ORDER_ITEMS." WHERE order_id='{$order->id}';";
					$wpdb->query($sql);
					
					// remove transaction history
					$sql = "DELETE FROM ".MM_TABLE_TRANSACTION_LOG." WHERE order_id='{$order->id}';";
					$wpdb->query($sql);
				}
			}
			
			// remove orders
			$sql = "DELETE FROM ".MM_TABLE_ORDERS." WHERE user_id='{$this->getId()}';";
			$wpdb->query($sql);
			
			// remove order item access
			$sql = "DELETE FROM ".MM_TABLE_ORDER_ITEM_ACCESS." WHERE user_id='{$this->getId()}';";
			$wpdb->query($sql);
			
			// remove bundles
			$sql = "DELETE FROM ".MM_TABLE_APPLIED_BUNDLES." WHERE access_type='".MM_AppliedBundle::$ACCESS_TYPE_USER."' AND access_type_id='{$this->getId()}';";
			$wpdb->query($sql);
			
			// delete custom field data
			$sql = "DELETE FROM ".MM_TABLE_CUSTOM_FIELD_DATA." WHERE user_id='{$this->getId()}';";
			$wpdb->query($sql);
			
			// delete event log data
			$sql = "DELETE FROM ".MM_TABLE_EVENT_LOG." WHERE user_id='{$this->getId()}';";
			$wpdb->query($sql);
			
			// delete MM user data
			$sql = "DELETE FROM ".MM_TABLE_USER_DATA." WHERE wp_user_id='{$this->getId()}' LIMIT 1;";
			$wpdb->query($sql);
			
			MM_Transaction::commit();
			
			// delete WordPress user
			wp_delete_user($this->getId());
			
			// if using multi-site, delete user from the network
			if(is_multisite()) 
			{
				wpmu_delete_user($this->getId());
			}
			
			// dispatch MemberMouse event
			do_action(MM_Event::$MEMBER_DELETE, $userData);
			
			return new MM_Response("'".$this->getEmail()."' deleted successfully");
		}
			
		return new MM_Response("Unable to delete user '".$this->getEmail()."' because they have active subscriptions", MM_Response::$ERROR);
 	}
 	
 	
 	/** ACCESS-RELATED METHODS **/

	public function isAdmin()
	{
		if(function_exists("user_can"))
		{
			if (user_can($this->id, 'manage_options')) 
			{
				return true;
			}
		}

		$capabilities = get_user_meta($this->id, "wp_capabilities", true);
			
		if(isset($capabilities["administrator"])) 
		{
			return $capabilities["administrator"] == "1";
		}
		
		return false;
	}

	public function hasActiveSubscriptions()
	{
		// determine if member has active subscriptions associated with their membership level
		$membership = $this->getMembershipLevel();
			
		if(!$membership->isFree() && $this->status != MM_Status::$CANCELED && $this->status != MM_Status::$PAUSED) 
		{
			return true;
		}
		
		$appliedBundles = $this->getAppliedBundles();
			
		// determine if member has active subscriptions associated with their bundles
		foreach($appliedBundles as $appliedBundle)
		{
			if($appliedBundle->getStatus() == MM_Status::$ACTIVE)
			{
				$bundle = $appliedBundle->getBundle();
				
				if(!$bundle->isFree())
				{
					return true;
				}
			}
		}
			
		return false;
	}
	
	
	/** MEMBERSHIP-RELATED METHODS **/
	 	
	public function sendWelcomeEmail()
	{
		if($this->isValid())
		{
			global $wpdb;
			
			$membership = $this->getMembershipLevel();
			$result = $membership->sendWelcomeEmail($this->id);
				
			if(MM_Response::isSuccess($result))
			{
				$this->welcomeEmailSentDate = MM_Utils::getCurrentTime();
			
				$updateValues = array("welcome_email_sent" => $this->welcomeEmailSentDate);
				$whereClause = array("wp_user_id" => $this->id);
				$result = $wpdb->update(MM_TABLE_USER_DATA, $updateValues, $whereClause);
			
				if($result === false)
				{
					$this->welcomeEmailSentDate = null;
				}
			}
		}
	}
	
	public function getDaysAsMember() 
	{
		switch($this->daysCalcMethod)
		{
			case MM_DaysCalculationTypes::$FIXED:
				return intval($this->daysCalcValue);
				break;
				
			case MM_DaysCalculationTypes::$CUSTOM_DATE:
				$start = Date("Y-m-d", strtotime($this->daysCalcValue));
				$end = Date("Y-m-d", current_time('timestamp'));
				$start_ts = strtotime($start);
				$end_ts = strtotime($end);
				$diff = $end_ts - $start_ts;
					
				// round returns a - 0
				$days = round($diff / 86400);
				if($days<0)
				{
					$days*=-1;
				}
				return $days;
				break;
				
			case MM_DaysCalculationTypes::$JOIN_DATE:
				if($this->isImported())
				{
					$start = Date("Y-m-d", strtotime($this->getRegistrationDate()));
				}
				else
				{
					$start = Date("Y-m-d", strtotime($this->getBecameActiveDate()));
				}
				$end = Date("Y-m-d", current_time('timestamp'));
				$start_ts = strtotime($start);
				$end_ts = strtotime($end);
				$diff = $end_ts - $start_ts;
					
				// round returns a - 0
				$days = round($diff / 86400);
					
				if($days<0)
				{
					$days*=-1;
				}
					
				return $days;
				break;
		}
	}
	
	public function doesExpire()
	{
		$membership = $this->getMembershipLevel();
		return $membership->doesExpire();
	}
	
	public function membershipHasExpired()
	{
		if($this->doesExpire())
		{
			$expirationDate = date("Y-m-d", strtotime($this->getExpirationDate()));
			$today = Date("Y-m-d h:i:s");
			
			if($today > $expirationDate)
			{
				return true;
			}
		}
		
		return false;
	}
	
	public function isPendingCancellation()
	{
		return ($this->status == MM_Status::$PENDING_CANCELLATION);
	}
	
	public function membershipShouldCancel()
	{
		if($this->isPendingCancellation())
		{
			$cancellationDate = date("Y-m-d", strtotime($this->getCancellationDate()));
			$today = Date("Y-m-d h:i:s");
			
			if($today > $cancellationDate)
			{
				return true;
			}
		}
	
		return false;
	}
	
	/**
	 * Gets a list of all active membership subscriptions
	 *
	 * @param $includeOverdueSubscriptions indicates whether overdue subscriptions should returned as well
	 * @return array an array of associative arrays with the following indecies: id, name, applyDate, amount
	 */
	public function getActiveMembershipSubscriptions($includeOverdueSubscriptions=false)
	{
		global $wpdb;
	
		$activeSubscriptions = array();
		
		$sql =  "SELECT o.date_added, m.name, m.id, oi.total, oi.item_id, oi.status, oi.id as order_item_id FROM ".MM_TABLE_ORDER_ITEM_ACCESS." oia ".
		        "INNER JOIN ".MM_TABLE_MEMBERSHIP_LEVELS." m ON ((oia.user_id='{$this->getId()}') AND (oia.access_type_id = m.id) AND (oia.access_type='".MM_OrderItemAccess::$ACCESS_TYPE_MEMBERSHIP."')) ".
		 	    "LEFT JOIN ".MM_TABLE_ORDER_ITEMS." oi ON (oia.order_item_id=oi.id) ".
		 	    "LEFT JOIN ".MM_TABLE_ORDERS." o ON (oi.order_id = o.id) ".
		 	    "WHERE (oi.status='".MM_OrderItem::$STATUS_RECURRING."'";

		if($includeOverdueSubscriptions)
		{
		 	$sql .= " OR oi.status='".MM_OrderItem::$STATUS_RECURRING_REBILL_FAILED."'";
		}
		
		$sql .= ");";
		
		$results = $wpdb->get_results($sql);
	
		if($results)
		{
			foreach($results as $rowData)
			{
				$crntRow = array();
				$crntRow["id"] = $rowData->id;
				$crntRow["name"] = $rowData->name;
				$crntRow["applyDate"] = $rowData->date_added;
				$crntRow["amount"] = $rowData->total;
				
				$product = new MM_Product($rowData->item_id);
				$rebillDescription = MM_NO_DATA;
				
				if($product->isValid())
				{
					$rebillDescription = $product->getBillingDescription(false);
				}
					
				$crntRow["rebill_description"] = $rebillDescription;
				$crntRow["status"] = $rowData->status;
				$crntRow["orderItemId"] = $rowData->order_item_id;
	
				array_push($activeSubscriptions, $crntRow);
			}
		}
	
		return $activeSubscriptions;
	}
	
	
	/** BUNDLE-RELEATED METHODS **/
 	
	/**
	 * 
	 * @param Number $bundleId the ID of the bundle to add to the user
	 * @param Boolean $isImported a boolean indicating whether this bundle is being added from an import
	 */
 	public function addBundle($bundleId, $isImported=false)
 	{	
 		return MM_AppliedBundle::applyBundleToUser($this->getId(), $bundleId, $isImported);
	}

	/**
	 * This method removes a bundle from the user.
	 *
	 * @param Number $bundleId the ID of the bundle to remove from the user
	 * @param Number $forceStatus a valid MM_Status ID that indicates which status to set on the applied bundle after it's been removed. If left blank, the event handling settings will be used from the MM configuration.
	 * @return MM_Response a response object with the type and message set based on the result of the operation
	 */
	public function removeBundle($bundleId, $forceStatus="")
	{
		return MM_AppliedBundle::removeBundleFromUser($this->getId(), $bundleId, $forceStatus);
	}
 	
	/**
	 * Gets a list of all applied bundles to this user that are in active or paused status
	 * 
	 * @param Boolean $includeAll indicates if all applied bundles should be returned or just those that are active/paused
	 * @return array an array of MM_AppliedBundle instances that are in active/paused status for the user
	 */
 	public function getAppliedBundles($includeAll=false)
 	{
 	 	global $wpdb;
 	 	
 	 	$appliedBundles = array();
 	 	
 	 	$sql = "SELECT * FROM ".MM_TABLE_APPLIED_BUNDLES;
		$sql .= " WHERE (access_type_id = '{$this->id}') AND (access_type = '".MM_AppliedBundle::$ACCESS_TYPE_USER."') ";
		
		if(!$includeAll)
		{
			$sql .= " AND (status = '".MM_Status::$ACTIVE."' OR status = '".MM_Status::$PENDING_CANCELLATION."' OR status = '".MM_Status::$PAUSED."')";
		}
		
		$results = $wpdb->get_results($sql);

		if($results)
		{
			foreach($results as $rowData)
			{
				$appliedBundle = new MM_AppliedBundle();
				$appliedBundle->setData($rowData);
				
				if($appliedBundle->isValid())
				{
					array_push($appliedBundles, $appliedBundle);
				}
			}
		}

		return $appliedBundles;
	}
	
	/**
	 * Gets a list of all bundles that are applied and have active billing
	 *
	 * @param $includeOverdueSubscriptions indicates whether overdue subscriptions should be returned as well
	 * @return array an array of associative arrays with the following indecies: id, name, applyDate, amount  
	 */
	public function getActiveBundles($includeOverdueSubscriptions=false)
	{
		global $wpdb;
		
		$activeBundles = array();
		
		$sql =  "SELECT o.date_added, b.name, b.id, oi.total, oi.item_id, oi.status, oi.id as order_item_id FROM ".MM_TABLE_ORDER_ITEM_ACCESS." oia ".
				"INNER JOIN ".MM_TABLE_BUNDLES." b ON ((oia.user_id='{$this->getId()}') AND (oia.access_type_id = b.id) AND (oia.access_type='".MM_OrderItemAccess::$ACCESS_TYPE_BUNDLE."')) ".
				"LEFT JOIN ".MM_TABLE_ORDER_ITEMS." oi ON (oia.order_item_id=oi.id) ".
				"LEFT JOIN ".MM_TABLE_ORDERS." o ON (oi.order_id = o.id) ".
				"WHERE (oi.status='".MM_OrderItem::$STATUS_RECURRING."'";

		if($includeOverdueSubscriptions)
		{
		 	$sql .= " OR oi.status='".MM_OrderItem::$STATUS_RECURRING_REBILL_FAILED."'";
		}
		
		$sql .= ");";
		$results = $wpdb->get_results($sql);
		
		if($results)
		{
			foreach($results as $rowData)
			{
				$crntRow = array();
				$crntRow["id"] = $rowData->id;
				$crntRow["name"] = $rowData->name;
				$crntRow["applyDate"] = $rowData->date_added;
				$crntRow["amount"] = $rowData->total;
				
				$product = new MM_Product($rowData->item_id);
				$rebillDescription = MM_NO_DATA;
				
				if($product->isValid())
				{
					$rebillDescription = $product->getBillingDescription(false);
				}
					
				$crntRow["rebill_description"] = $rebillDescription;
				$crntRow["status"] = $rowData->status;
				$crntRow["orderItemId"] = $rowData->order_item_id;
				
				array_push($activeBundles, $crntRow);
			}
		}
		
		return $activeBundles;
	}
	
	/**
	 * @return String returns a comma-deliminated list of all bundles that are active on the user's account
	 */
	public function getAppliedBundleNames()
	{
		global $wpdb;

		$sql = "SELECT bundles.name FROM ".MM_TABLE_APPLIED_BUNDLES." appliedBundles, ".MM_TABLE_BUNDLES." bundles ";
		$sql .= " WHERE (appliedBundles.access_type_id = '{$this->id}') AND (appliedBundles.access_type = '".MM_AppliedBundle::$ACCESS_TYPE_USER."') ";
		$sql .= " AND (appliedBundles.bundle_id = bundles.id) AND (appliedBundles.status = '".MM_Status::$ACTIVE."' OR appliedBundles.status = '".MM_Status::$PENDING_CANCELLATION."');";
		$bundles = $wpdb->get_results($sql);
		
		if($bundles)
		{
			$bundleStr = "";
			$ctr = 0;
		
			foreach($bundles as $bundle)
			{
				if($ctr > 0) {
					$bundleStr .= ", ";
				}
		
				$bundleStr .= $bundle->name;
				$ctr++;
			}
		
			return $bundleStr;
		}
		else
		{
			return "";
		}
	}

	public function hasBundle($bundleId, $includeAllStatuses=true)
	{
		global $wpdb;
		
		$sql = "SELECT count(*) as total FROM ".MM_TABLE_APPLIED_BUNDLES;
		$sql .= " WHERE (bundle_id='{$bundleId}') AND ((access_type_id='{$this->getId()}' AND access_type='".MM_AppliedBundle::$ACCESS_TYPE_USER."') ";
		$sql .= " OR (access_type_id='".$this->getMembershipId()."' AND access_type='".MM_AppliedBundle::$ACCESS_TYPE_MEMBERSHIP."')) ";
		
		if(!$includeAllStatuses)
		{
			$sql.= " AND (status='".MM_Status::$ACTIVE."' OR status='".MM_Status::$PENDING_CANCELLATION."' OR status='".MM_Status::$PAUSED."') ";
		}
		
 	 	$row = $wpdb->get_row($sql);
 	 	
 	 	if(is_null($row)) 
 	 	{
 	 		return false;
 	 	}
 	 	
 	 	return ($row->total > 0);
 	}
	
 	/**
 	 * Determines the number of days a user has had a particular bundle applied to their account
 	 * 
 	 * @param Number $bundleId the ID of the bundle to check
 	 * @return Number|false returns the number of days a bundle has been applied to the user's account or false if the bundle is not applied to their account
 	 */
	public function getDaysWithBundle($bundleId)
	{	
		$appliedBundle = MM_AppliedBundle::getAppliedBundle($this->id, $bundleId);
		
		if(!$appliedBundle->isValid())
		{
			return false;
		}
		
		if($appliedBundle->getDaysCalcMethod()==MM_DaysCalculationTypes::$FIXED)
		{
			return intval($appliedBundle->getDaysCalcValue());
		}
		else if($appliedBundle->getDaysCalcMethod() == MM_DaysCalculationTypes::$CUSTOM_DATE)
		{
			$start = Date("Y-m-d", strtotime($appliedBundle->getDaysCalcValue())); 
			$end = Date("Y-m-d");
			$start_ts = strtotime($start);
			$end_ts = strtotime($end);
			$diff = $end_ts - $start_ts;
			
			// round returns a - 0
			$days = round($diff / 86400);
			
			if($days<0)
			{
				$days*=-1;
			}
			
			return $days;
		}
		else
		{
			$start = Date("Y-m-d", strtotime($appliedBundle->getApplyDate())); 
			$end = Date("Y-m-d");
			$start_ts = strtotime($start);
			$end_ts = strtotime($end);
			$diff = $end_ts - $start_ts;
			
			// round returns a - 0
			$days = round($diff / 86400);
			
			if($days<0)
			{
				$days*=-1;
			}
			
			return $days;
		}
	}
	
	public function bundleHasExpired($bundleId)
	{
		if($this->isValid() && $this->hasBundle($bundleId))
		{
			$appliedBundle = MM_AppliedBundle::getAppliedBundle($this->getId(), $bundleId);
			return $appliedBundle->hasExpired();
		}
		return false;
	}
	
	
	/** GIFT RELATED METHODS */
	
	public function hasGifts()
	{
		global $wpdb;
	
		$sql = "SELECT count(*) as total FROM ".MM_TABLE_COUPONS." WHERE is_gift = '1' AND gift_user_id = '{$this->getId()}';";
	
		$row = $wpdb->get_row($sql);
	
		if(is_null($row))
		{
			return false;
		}
	
		return ($row->total > 0);
	}
	
	
	/**
	 * Gets a list of all active subscriptions that were gifted
	 *
	 * @param $includeOverdueSubscriptions indicates whether overdue subscriptions should returned as well
	 * @return array an array of associative arrays with the following indecies: id, name, applyDate, amount
	 */
	public function getActiveGiftSubscriptions($includeOverdueSubscriptions=false)
	{
		global $wpdb;
	
		$activeSubscriptions = array();
		
		$ordersTable = MM_TABLE_ORDERS;
		$orderItemsTable = MM_TABLE_ORDER_ITEMS;
		$statusRecurring = MM_OrderItem::$STATUS_RECURRING;
		$statusRebillFailed = MM_OrderItem::$STATUS_RECURRING_REBILL_FAILED;
		
		$sql = "SELECT oi.total, oi.item_id, oi.status, oi.id as order_item_id, o.date_added FROM {$orderItemsTable} oi ".
			"LEFT JOIN {$ordersTable} o on (oi.order_id = o.id) ".
			"LEFT JOIN {$wpdb->users} u ON (o.user_id = u.ID) ".
			"WHERE (o.user_id = {$this->getId()}) AND (oi.status = {$statusRecurring}";
	
		if($includeOverdueSubscriptions)
		{
			$sql .= " OR oi.status= {$statusRebillFailed}";
		}
	
		$sql .= ") AND (oi.is_gift = 1);";
	
		$results = $wpdb->get_results($sql);
	
		if($results)
		{
			foreach($results as $rowData)
			{
				$crntRow = array();
				$crntRow["applyDate"] = $rowData->date_added;
				$crntRow["amount"] = $rowData->total;
	
				$product = new MM_Product($rowData->item_id);
				$rebillDescription = MM_NO_DATA;
	
				if($product->isValid())
				{
					$crntRow["id"] = $product->getId();
					$crntRow["name"] = $product->getName();
					$rebillDescription = $product->getBillingDescription(false);
				}
					
				$crntRow["rebill_description"] = $rebillDescription;
				$crntRow["status"] = $rowData->status;
				$crntRow["orderItemId"] = $rowData->order_item_id;
	
				array_push($activeSubscriptions, $crntRow);
			}
		}
	
		return $activeSubscriptions;
	}
	
	
	
	/** CUSTOM FIELD-RELATED METHODS **/
	
	public function setCustomData($customFieldId, $value)
	{
		$fieldData = MM_CustomFieldData::getCustomFieldDataByUser($customFieldId, $this->getId());
		
		// update existing data
		if($fieldData->isValid())
		{
			if(strip_tags($value) != strip_tags($fieldData->getValue()))
			{
				$fieldData->setValue(strip_tags($value));
				return $fieldData->commitData();
			}
		}
		else if(!empty($value))
		{
			$fieldData->setUserId($this->id);
			$fieldData->setCustomFieldId($customFieldId);
			$fieldData->setValue(strip_tags($value));
			return $fieldData->commitData();
		}
		
		return new MM_Response();
	}
	
	/**
	 * @param Number $fieldId the ID of the custom field to get data for
	 * @return MM_CustomFieldData
	 */
	public function getCustomDataByFieldId($fieldId)
	{
		return MM_CustomFieldData::getCustomFieldDataByUser($fieldId, $this->getId());
	}
	
	
	
 	/** GETTERS/SETTERS **/

 	public function isFree()
 	{
 		$membership = $this->getMembershipLevel();
 		return $membership->isFree();
 	}

 	
 	/**
 	 * Returns whether a user has a stored card on file with an active payment service
 	 * 
 	 * @return boolean true or false
 	 */
	public function hasCardOnFile()
	{
		global $wpdb;
		if (!$this->isValid())
		{
			return false;
		}
		
		$sql = "SELECT COUNT(*) FROM ".MM_TABLE_CARD_ON_FILE." cof,  ".MM_TABLE_PAYMENT_SERVICES." ps ".
			   "WHERE (cof.payment_service_id = ps.id) AND (cof.user_id = '{$this->getId()}') AND (ps.active = 1)";
		$cardsOnFile = $wpdb->get_var($sql);
		
		if ($cardsOnFile === false)
		{
			return false;
		}
		
		return ($cardsOnFile > 0);
	}
	
	/**
	 * Returns the billing address associated with the user's card on file if it exists, otherwise it will just 
	 * return the primary billing address on the user's account.
	 * 
	 * @return MM_CustomerAddress returns the billing address associated with the user's card on file or the billing address associated with their account
	 */
	public function getCardOnFileBillingAddress()
	{
		global $wpdb;
		
		$COFOrderSQL = "SELECT original_order_id FROM ".MM_TABLE_CARD_ON_FILE. " WHERE user_id = '{$this->id}'";
		$cofOrderId = $wpdb->get_var($COFOrderSQL);
		if (!empty($cofOrderId))
		{
			$order = new MM_Order($cofOrderId);
			if ($order->isValid())
			{
				return $order->getBillingAddress();
			}
		}
		return $this->getFullBillingAddress();
	}

	public function isActive()
	{
		if($this->getStatus() != MM_Status::$CANCELED && $this->getStatus != MM_Status::$PAUSED) 
		{
			return true;
		}
		else {
			return false;
		}
	}
 	
 	public function setUsername($str)
 	{
 		if($str != $this->username)
 		{
 			$this->lastUsername = $this->username;
 		}
 	 	$this->username = $str;
 	}
 	 
 	public function getUsername()
 	{
 	 	return $this->username;
 	}
 	 
 	public function setPassword($str)
 	{
 		if($this->password != $str)
 		{
 			$this->lastPassword = $this->password;
 		}
 		$this->password = $str;
 	}
 	 
 	public function getPassword()
 	{
 	 	return $this->password;
 	}
 	 
 	public function setEmail($str)
 	{
 		if ($this->isValid() && ($str != $this->email))
 		{
 			$this->lastEmail = $this->email;
 		}
 	 	$this->email = $str;
 	}
 	 
 	public function getEmail()
 	{
 	 	return $this->email;
 	}
 	 
 	public function setFirstName($str)
 	{
 		if ($this->isValid()  && ($str != $this->firstName))
 		{
 			$this->lastFirstName = $this->firstName;
 		}
 	 	$this->firstName = $str;
 	}
 	 
  	public function getFirstName()
 	{
 		return $this->firstName;
 	}
 	 
 	public function setLastName($str)
 	{
 		if ($this->isValid() && ($str != $this->lastName))
 		{
 			$this->lastLastName = $this->lastName;
 		}
 	 	$this->lastName = $str;
 	}
 	 
 	public function getLastName()
 	{
 		return stripslashes($this->lastName);
 	}
 	 
 	public function getFullName()
 	{
 		$name = "";
 		
 		if($this->firstName != "") 
 		{
 			$name .= $this->firstName;
 		}
 		
 		if($this->lastName != "") 
 		{
 			$name .= " ".$this->getLastName();
 		}
 		
 	 	return $name;
 	}
 	 
 	public function setPhone($str)
 	{
 		if ($this->isValid() && ($str != $this->phone))
 		{
 			$this->lastPhone = $this->phone;
 		}
 	 	$this->phone = $str;
 	}
 	 
 	public function getPhone()
 	{
 		if(isset($this->phone))
 		{
 	 		return $this->phone;
 		}
 		return "";
 	}
 	
 	public function setNotes($str)
 	{
 		if ($this->isValid() && ($str != $this->notes))
 		{
 			$this->lastNotes = $this->notes;
 		}
 	 	$this->notes = $str;
 	}
 	 
  	public function getNotes()
 	{
 	 	return $this->notes;
 	}
 	 
 	public function setRegistrationDate($date)
 	{
 	 	$this->registrationDate = $date;
 	}
 	 
 	public function getRegistrationDate($doFormat=false)
 	{
 	 	if($doFormat == false) 
 	 	{
 	 		return $this->registrationDate;
 	 	}
 		else if(!empty($this->registrationDate)) 
 		{
 			return MM_Utils::dateToLocal($this->registrationDate);
 		}
 		else
 		{
 			return null;
 		}
 	}
 
 	public function setExpirationDate($date)
 	{
 		if ($this->isValid()  && ($date != $this->expirationDate))
 		{
 			$this->lastExpirationDate = $this->expirationDate;
 		}
 		$this->expirationDate = $date;
 	}
 		
 	public function getExpirationDate($doFormat=false)
 	{
 		$membership = $this->getMembershipLevel();
 		if($membership->doesExpire())
 		{
 			if(empty($this->expirationDate) || $this->expirationDate == "0000-00-00 00:00:00")
 			{
 				$this->setExpirationDate($membership->getExpirationDate(MM_Utils::getCurrentTime()));
 			}
	 		
	 		if($doFormat == false) 
	 	 	{
	 	 		return $this->expirationDate;
	 	 	}
	 		else if(!empty($this->expirationDate)) 
	 		{
	 			return MM_Utils::dateToLocal($this->expirationDate);
	 		}
 		}
 		
 		return null;
 	}
 	
 	public function setCancellationDate($date)
 	{
 		if ($this->isValid()  && ($date != $this->cancellationDate))
 		{
 			$this->lastCancellationDate = $this->cancellationDate;
 		}
 		$this->cancellationDate = $date;
 	}
 		
 	public function getCancellationDate($doFormat=false)
 	{
 		if($doFormat == false)
 		{
 			return $this->cancellationDate;
 		}
 		else if(!empty($this->cancellationDate))
 		{
 			return MM_Utils::dateToLocal($this->cancellationDate);
 		}
 	}
 	
 	public function setPendingStatus($status)
 	{
 		if($status == MM_Status::$PAUSED || $status == MM_Status::$CANCELED)
 		{
 			$this->pendingStatus = $status;
 		}
 		else 
 		{
 			$this->pendingStatus = "0";
 		}
 	}
 	
 	public function getPendingStatus()
 	{
 		if($this->pendingStatus != "0" && $this->pendingStatus != MM_Status::$PAUSED && $this->pendingStatus != MM_Status::$CANCELED)
 		{	
	 		$cancellationMethod = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_DFLT_CANCELLATION_METHOD);
	 		if ($cancellationMethod == MM_CancellationMethod::$CANCEL_HARD)
	 		{
	 			$this->pendingStatus = MM_Status::$CANCELED;
	 		}
	 		else if ($cancellationMethod == MM_CancellationMethod::$CANCEL_PAUSE)
	 		{
	 			$this->pendingStatus = MM_Status::$PAUSED;
	 		}
	 		else 
	 		{
	 			$this->pendingStatus = MM_Status::$CANCELED;
	 		}
 		}
 		
 		return $this->pendingStatus;
 	}
 	 
 	public function setMembershipId($str)
 	{
 		if ($this->isValid() && ($str != $this->membershipId))
 		{
 			$this->membershipLevelChangedFlag = true;
 			$this->lastMembershipId = $this->membershipId;
 		}
 	 	$this->membershipId = $str;
 	}
 	
 	/**
 	 * @return MM_MembershipLevel
 	 */
 	public function getMembershipLevel()
 	{
 		if(!isset($this->membership) || !$this->membership->isValid() || $this->membershipId != $this->membership->getId()) 
 		{
 			$this->membership = new MM_MembershipLevel($this->membershipId);
 		}
 		
 		return $this->membership;
 	}
 	 
 	public function getMembershipId()
 	{
 	 	return $this->membershipId;
 	}
 	
 	public function getMembershipName()
 	{
 		$membership = $this->getMembershipLevel();
 	 	return $membership->getName();
 	}
 	 
 	public function setDaysCalcValue($str)
 	{
 		if ($this->isValid() && ($str != $this->daysCalcValue))
 		{
 			$this->lastDaysCalcValue = $this->daysCalcValue;
 		}
 	 	$this->daysCalcValue = $str;
 	}
 	 
 	public function getDaysCalcValue()
 	{
 	 	return $this->daysCalcValue;
 	}
 	 
 	public function setDaysCalcMethod($str)
 	{
 		if ($this->isValid() && ($str != $this->daysCalcMethod))
 		{
 			$this->lastDaysCalcMethod = $this->daysCalcMethod;
 		}
 	 	$this->daysCalcMethod = $str;
 	}
 	
 	public function getDaysCalcMethod()
 	{
 	 	return $this->daysCalcMethod;
 	}
 	 
 	public function setStatus($newStatus)
 	{
 		if($newStatus != $this->status)
 		{
 			$this->lastStatus = $this->status;
 			$this->statusUpdated = true;
 		}
 		
 		// user becoming active after being in an error/pending state
 		if(($this->lastStatus == MM_Status::$PENDING_ACTIVATION || $this->lastStatus == MM_Status::$ERROR) 
 			&& ($newStatus == MM_Status::$ACTIVE))
 		{
 			// clear status message
 			$this->statusMessage = "";
 		}
 		
		if(($newStatus != $this->status) && ($newStatus == MM_Status::$CANCELED || $newStatus == MM_Status::$PAUSED))
 		{
 			$this->setDaysCalcValue($this->getDaysAsMember());
 			$this->setDaysCalcMethod(MM_DaysCalculationTypes::$FIXED);
 			$this->status = $newStatus;
 		}
 		else if(($this->status == MM_Status::$CANCELED || $this->status == MM_Status::$PAUSED || $this->status == MM_Status::$PENDING_CANCELLATION) && $newStatus == MM_Status::$ACTIVE)
 		{
 			$this->membershipLevelChangedFlag = true;
 			$days = $this->getDaysAsMember();
 			$newDate = strtotime("-".$days." days");
 			$this->setDaysCalcValue(Date("Y-m-d h:i:s",$newDate));
 			$this->setDaysCalcMethod(MM_DaysCalculationTypes::$CUSTOM_DATE);
 			$this->status = $newStatus;
 		}
 		else
 		{	
 			$this->status = $newStatus;
 		}
 	}
 	 
 	public function getStatus()
 	{
 		if($this->isValid())
 		{
 			if($this->doesExpire())
 			{
		 		if($this->status == MM_Status::$ACTIVE)
		 		{
		 			// check if membership has expired	
		 			if($this->membershipHasExpired())
		 			{
		 				$this->setStatus(MM_Status::$EXPIRED);
		 				$this->commitStatusOnly();
		 			}
		 		}
		 		else if($this->status == MM_Status::$EXPIRED)
		 		{
		 			// check if membership should be made active
		 			if(!$this->membershipHasExpired())
		 			{
		 				$this->setStatus(MM_Status::$ACTIVE);
		 				$this->commitStatusOnly();
		 			}
		 		}
 			}
 			
 			if($this->isPendingCancellation())
 			{
 				// check if membership should be canceled
 				if($this->membershipShouldCancel())
 				{
 					$this->setStatus($this->getPendingStatus());
 					$this->commitStatusOnly();
 				}
 			}
 		}
 		
 	 	return $this->status;
 	}
 	 
 	public function getStatusName()
 	{
 	 	return MM_Status::getName($this->status);
 	}
 	 
 	public function setStatusMessage($str)
 	{
 	 	$this->statusMessage = $str;
 	}
 	 
 	public function getStatusMessage()
 	{
 	 	return $this->statusMessage;
 	}
 	
 	public function getLastUpdatedDate($doFormat=false)
 	{
 		if($doFormat == false) 
 		{
 			return $this->lastUpdatedDate;
 		}
 		else if(!empty($this->lastUpdatedDate)) 
 		{
 			return MM_Utils::dateToLocal($this->lastUpdatedDate);
 		}
 		else
 		{
 			return null;
 		}
 	}
 	
 	public function getStatusUpdatedDate($doFormat=false)
 	{
 		if($doFormat == false) 
 		{
 			return $this->statusUpdatedDate;
 		}
 		else if(!empty($this->statusUpdatedDate)) 
 		{
 			return MM_Utils::dateToLocal($this->statusUpdatedDate);
 		}
 		else
 		{
 			return null;
 		}
 	}
 	
 	public function setFullBillingAddress(MM_CustomerAddress $address)
 	{
 		$this->setBillingAddress($address->getAddressLine1());
 		$this->setBillingCity($address->getCity());
 		$this->setBillingState($address->getState());
 		$this->setBillingZipCode($address->getPostalCode());
 		$this->setBillingCountry($address->getCountry());
 	}
 	
 	/**
 	 * @return MM_CustomerAddress
 	 */
 	public function getFullBillingAddress()
 	{
 		$address = new MM_CustomerAddress($this->getFirstName(), $this->getLastName());
 		$address->setPhone($this->getPhone());
 		$address->setAddressLine1($this->getBillingAddress());
 		$address->setCity($this->getBillingCity());
 		$address->setState($this->getBillingState());
 		$address->setPostalCode($this->getBillingZipCode());
 		$address->setCountry($this->getBillingCountry());
 		return $address;
 	}
 	
 	public function setFullShippingAddress(MM_CustomerAddress $address)
 	{
 		$this->setShippingAddress($address->getAddressLine1());
 		$this->setShippingCity($address->getCity());
 		$this->setShippingState($address->getState());
 		$this->setShippingZipCode($address->getPostalCode());
 		$this->setShippingCountry($address->getCountry());
 	}
 	
 	/**
 	 * @return MM_CustomerAddress
 	 */
 	public function getFullShippingAddress()
 	{
 		$address = new MM_CustomerAddress($this->getFirstName(), $this->getLastName());
 		$address->setPhone($this->getPhone());
 		$address->setAddressLine1($this->getShippingAddress());
 		$address->setCity($this->getShippingCity());
 		$address->setState($this->getShippingState());
 		$address->setPostalCode($this->getShippingZipCode());
 		$address->setCountry($this->getShippingCountry());
 		return $address;
 	}
 	 
 	public function setBillingAddress($str)
 	{
 		if ($this->isValid() && ($str != $this->billingAddress))
 		{
 			$this->lastBillingAddress = $this->billingAddress;
 		}
 	 	$this->billingAddress = $str;
 	}
 	 
 	public function getBillingAddress()
 	{
 	 	return $this->billingAddress;
 	}
 	 
 	public function setBillingCity($str)
 	{
 		if ($this->isValid() && ($str != $this->billingCity))
 		{
 			$this->lastBillingCity = $this->billingCity;
 		}
 	 	$this->billingCity= $str;
 	}
 	 
 	public function getBillingCity()
  	{
 	 	return $this->billingCity;
 	}
 	 
 	public function setBillingState($str)
 	{
 		if ($this->isValid() && ($str != $this->billingState))
 		{
 			$this->lastBillingState = $this->billingState;
 		}
 	 	$this->billingState = $str;
 	}
 	 
 	public function getBillingState()
 	{
 	 	return $this->billingState;
 	}
 	 
 	public function setBillingZipCode($str)
 	{
 		if ($this->isValid() && ($str != $this->billingZip))
 		{
 			$this->lastBillingZip = $this->billingZip;
 		}
 	 	$this->billingZip = $str;
 	}
 	 
  	public function getBillingZipCode()
 	{
 	 	return $this->billingZip;
 	}
 	 
 	public function setBillingCountry($code)
 	{
 		if ($this->isValid() && ($code != $this->billingCountry))
 		{
 			$this->lastBillingCountry = $this->billingCountry;
 		}
 	 	$this->billingCountry = $code;
 	}
 	 
 	public function getBillingCountry()
 	{
 	 	return $this->billingCountry;
 	}
 	 
 	public function getBillingCountryName()
 	{	
 	 	return MM_CountryUtils::getCountryName($this->billingCountry);
 	}
 	 
 	public function setShippingAddress($str)
 	{
 		if ($this->isValid() && ($str != $this->shippingAddress))
 		{
 			$this->lastShippingAddress = $this->shippingAddress;
 		}
 	 	$this->shippingAddress = $str;
 	}
 	 
 	public function getShippingAddress()
 	{
 	 	return $this->shippingAddress;
 	}
 	 
 	public function setShippingCity($str)
 	{
 		if ($this->isValid() && ($str != $this->shippingCity))
 		{
 			$this->lastShippingCity = $this->shippingCity;
 		}
 	 	$this->shippingCity = $str;
 	}
 	 
 	public function getShippingCity()
 	{
 	 	return $this->shippingCity;
 	}
 	 
 	public function setShippingState($str)
 	{
 		if ($this->isValid() && ($str != $this->shippingState))
 		{
 			$this->lastShippingState = $this->shippingState;
 		}
 	 	$this->shippingState = $str;
 	}
 	 
 	public function getShippingState()
 	{
 	 	return $this->shippingState;
 	}
 	 
 	public function setShippingZipCode($str)
 	{
 		if ($this->isValid() && ($str != $this->shippingZip))
 		{
 			$this->lastShippingZip = $this->shippingZip;
 		}
 	 	$this->shippingZip = $str;
 	}
 	 
 	public function getShippingZipCode()
 	{
 	 	return $this->shippingZip;
 	}
 	 
 	public function setShippingCountry($code)
 	{
 		if ($this->isValid() && ($code != $this->shippingCountry))
 		{
 			$this->lastShippingCountry = $this->shippingCountry;
 		}
 	 	$this->shippingCountry = $code;
 	}
 	 
 	public function getShippingCountry()
 	{
 	 	return $this->shippingCountry;
 	}
 	 
 	public function getShippingCountryName()
 	{
 	 	return MM_CountryUtils::getCountryName($this->shippingCountry);
 	}
 	 
 	public function getLoginCount()
 	{
 		if($this->loginCount == -1)
 		{
 			$this->loginCount = MM_ActivityLog::getLoginCount($this->getId());
 		}
 		
 	 	return number_format($this->loginCount);
 	}
 	 
 	public function getPageAccessCount($uniquePagesOnly=true)
 	{
 		if($this->pageAccessCount == -1)
 		{
 			$this->pageAccessCount = MM_ActivityLog::getPageAccessCount($this->getId(), $uniquePagesOnly);
 		}
 		
 	 	return number_format($this->pageAccessCount);
 	}
 	 
 	public function getEmailCount()
 	{
 		if($this->emailCount == -1)
 		{
 			$this->emailCount = MM_ActivityLog::getEmailCount($this->getId());
 		}
 		
 	 	return number_format($this->emailCount);
 	}
 	 
 	public function setLastLoginDate($str)
 	{
 	 	$this->lastLoginDate = $str;
 	}
 	
 	public function getLastLoginDate($doFormat=false)
 	{
 		if($doFormat == false) 
 		{
 			return $this->lastLoginDate;
 		}
 		else if(!empty($this->lastLoginDate)) 
 		{
 			return MM_Utils::dateToLocal($this->lastLoginDate);
 		}
 		else
 		{
 			return null;
 		}
 	}
 	
 	public function getLastLoginIpAddress()
 	{
 		if(empty($this->lastLoginIpAddress))
 		{
 			$this->lastLoginIpAddress = MM_ActivityLog::getLastLoginIpAddress($this->getId());
 		}
 		
 		return $this->lastLoginIpAddress;
 	}
 	
 	public function hasReachedMaxIPCount()
 	{
 		return MM_ActivityLog::hasReachedMaxIPCount($this->getId());
 	}
 	 
 	public function setWelcomeEmailSentDate($str)
 	{
 	 	$this->welcomeEmailSentDate = $str;
 	}
 	
 	public function getWelcomeEmailSentDate($doFormat=false)
 	{
 		if($doFormat == false) {
 			return $this->welcomeEmailSentDate;
 		}
 		else if(!empty($this->welcomeEmailSentDate)) 
 		{
 			return MM_Utils::dateToLocal($this->welcomeEmailSentDate);
 		}
 		else
 		{
 			return null;
 		}
 	}
 	
 	public function getBecameActiveDate($doFormat=false)
 	{
 		if($doFormat == false) {
 			return $this->becameActiveDate;
 		}
 		else if(!empty($this->becameActiveDate)) 
 		{
 			return MM_Utils::dateToLocal($this->becameActiveDate);
 		}
 		else
 		{
 			return null;
 		}
 	}
 	
 	public function setSubscribedListId($listId) 
 	{
 		$this->subscribedListId = $listId;	
 	}
 	
 	public function getSubscribedListId()
 	{
 		return $this->subscribedListId;
 	}
	
	public function setSubscribedProviderId($providerId) 
 	{
 		$this->subscribedProviderId = $providerId;	
 	}
 	
 	public function getSubscribedProviderId()
 	{
 		return $this->subscribedProviderId;
 	}
 	
 	public function setSendWelcomeEmailFlag($bool)
 	{
 		$this->sendWelcomeEmailFlag = $bool;
 	}
 	
 	public function doSendWelcomeEmail()
 	{
 		return $this->sendWelcomeEmailFlag;
 	}
 	
 	public function setImportedFlag($bool)
 	{
 		$this->importedFlag = ($bool == true) ? "1" : "0";
 	}
 	
 	public function isImported()
 	{
 		return ($this->importedFlag == "1") ? true : false;
 	}
 	
 	public function isComplimentary()
 	{
 		if($this->isFree() || $this->isImported() || $this->getStatus() == MM_Status::$PENDING_ACTIVATION || $this->getStatus() == MM_Status::$ERROR
 			|| $this->getStatus() == MM_Status::$CANCELED || $this->getStatus() == MM_Status::$PAUSED || $this->isPendingCancellation())
 		{
 			return false;
 		}
 		
 		$isComplimentary = false;
 		$items = MM_OrderItemAccess::getOrderItemByAccess($this->getId(), MM_OrderItemAccess::$ACCESS_TYPE_MEMBERSHIP, $this->getMembershipId());
 		
 		if(count($items) > 0)
		{
			$isComplimentary = true;
			
			foreach($items as $orderItemAccess)
			{
				$orderItem = new MM_OrderItem($orderItemAccess->getOrderItemId());
				
				if($orderItem->isValid() && $orderItem->getStatus() != MM_OrderItem::$STATUS_RECURRING_CANCELLED)
				{
					$isComplimentary = false;
					break;
				}
			}
		}
		else
		{
			$isComplimentary = true;
		}
		
		return $isComplimentary;
 	}
 	
 	
 	public static function canPlaceOrder($userId, $productId)
 	{
 		$allowDuplicateSubscriptions = (MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_ALLOW_DUPLICATE_SUBSCRIPTIONS) == "1") ? true : false;
 		
 		if(!$allowDuplicateSubscriptions)
 		{
	 		global $wpdb;
	 	
	 		$sql = "SELECT EXISTS (SELECT oi.id FROM ".MM_TABLE_ORDER_ITEMS." oi LEFT JOIN ".MM_TABLE_ORDERS." o ON (oi.order_id = o.id) ".
	 				"WHERE (o.user_id=%s) AND (oi.is_gift=0) AND (oi.is_recurring=1) AND (oi.item_id=%s) AND (oi.item_type='".MM_OrderItem::$ORDER_ITEM_TYPE_PRODUCT."') AND ".
	 				"(oi.status = '".MM_OrderItem::$STATUS_RECURRING."'))";
	 		$cantPurchase = $wpdb->get_var($wpdb->prepare($sql,$userId,$productId));
	 		if (!is_null($cantPurchase) && ($cantPurchase == '1'))
	 		{
	 			return new MM_Response("This product has already been purchased and has an active subscription",MM_Response::$ERROR);
	 		}
 		}
 		
 		return new MM_Response();
 	}
 	
 	
	public function getOriginAffiliateId() 
	{
		return $this->originAffiliateId;
	}
	
	
	public function setOriginAffiliateId($originAffiliateId) 
	{
		$this->originAffiliateId = $originAffiliateId;
	}
	
	
	public function getOriginSubaffiliateId() 
	{
		return $this->originSubaffiliateId;
	}
	
	
	public function setOriginSubaffiliateId($originSubaffiliateId) 
	{
		$this->originSubaffiliateId = $originSubaffiliateId;
	}
	
}
