/**
 * 
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_CorePageEngine
{	
	public static function isCheckoutCorePage($pageId)
	{
		$checkoutPageId = self::getCorePageId(MM_CorePageType::$CHECKOUT, "", "");
		if($checkoutPageId == $pageId)
		{
			return true;
		}
		return false;
	}
	
	public static function isRedeemGiftCorePage($pageId)
	{
		$redeemGiftPageId = self::getCorePageId(MM_CorePageType::$REDEEM_GIFT, "", "");
		if($redeemGiftPageId == $pageId)
		{
			return true;
		}
		return false;
	}
	
	public static function getCheckoutPageStaticLink($id, $isMembership=false)
	{
		$linkStyle = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_PURCHASE_LINK_STYLE);
		$checkoutUrl = MM_CorePageEngine::getUrl(MM_CorePageType::$CHECKOUT, '');
		$paramName = "";
		$value = "";
		
		switch($linkStyle)
		{
			case MM_LINK_STYLE_EXPLICIT:
				$paramName = ($isMembership) ? "mid" : "pid";
				$value = $id;
				break;
				
			case MM_LINK_STYLE_REFERENCE:
				$paramName = "rid";
				
				if($isMembership)
				{
					$membership = new MM_MembershipLevel($id);
					if($membership->isValid())
					{
						$value = $membership->getReferenceKey();
					}
				}
				else
				{
					$product = new MM_Product($id);
					if($product->isValid())
					{
						$value = $product->getReferenceKey();
					}
				}
				break;
		}
		
		if(!empty($paramName) && !empty($value))
		{
			return MM_Utils::appendUrlParam($checkoutUrl, $paramName, $value);
		}
		else
		{
			return $checkoutUrl;
		}
	}
	
	public static function getRedeemGiftPageStaticLink($id, $isMembership=false)
	{
		$redeemGiftUrl = MM_CorePageEngine::getUrl(MM_CorePageType::$REDEEM_GIFT, '');
		$value = "";
		
		if($isMembership)
		{
			$membership = new MM_MembershipLevel($id);
			if($membership->isValid())
			{
				$value = $membership->getReferenceKey();
			}
		}
		else
		{
			$product = new MM_Product($id);
			if($product->isValid())
			{
				$value = $product->getReferenceKey();
			}
		}
		
		if(!empty($value))
		{
			return MM_Utils::appendUrlParam($redeemGiftUrl, "rid", $value);
		}
		else
		{
			return $redeemGiftUrl;
		}
	}
	
	public static function isMemberHomePage($pageId)
	{
		if(self::isCorePage($pageId, MM_CorePageType::$MEMBER_HOME_PAGE)) {
			return true;
		}
		return false;
	}
	
	public static function isSaveTheSalePage($pageId)
	{
		if(self::isCorePage($pageId, MM_CorePageType::$SAVETHESALE)) {
			return true;
		}
		return false;
	}
	
	public static function isLoginCorePage($pageId)
	{
		$loginCorePageId = self::getCorePageId(MM_CorePageType::$LOGIN_PAGE, "", "");
		
		if($loginCorePageId == $pageId){
			return true;
		}
		return false;
	}
	
	public static function isMyAccountCorePage($pageId)
	{
		$myAccountPageId = self::getCorePageId(MM_CorePageType::$MY_ACCOUNT, "", "");
		
		if($myAccountPageId == $pageId){
			return true;
		}
		return false;
	}
	
	public static function isErrorCorePage($pageId)
	{
		$errorPageId = self::getCorePageId(MM_CorePageType::$ERROR, "", "");
		
		if($errorPageId == $pageId){
			return true;
		}
		return false;
	}
	
	public static function isConfirmationPage($pageId)
	{
		if(self::isCorePage($pageId, MM_CorePageType::$FREE_CONFIRMATION))
		{
			return true;
		}
		if(self::isCorePage($pageId, MM_CorePageType::$PAID_CONFIRMATION))
		{
			return true;
		}
		return false;
	}
	
	/**
	 * This method determines if the page URL passed is a confirmation page
	 * @param String $pageUrl the URL to check if it's a confirmation page
	 * @return boolean true if a confirmation page, false if not
	 */
	public static function isConfirmationPageByUrl($pageUrl)
	{
		global $wpdb;
		$sql = "SELECT page_id FROM ".MM_TABLE_CORE_PAGES." WHERE core_page_type_id ";
		$sql .= "IN (".MM_CorePageType::$PAID_CONFIRMATION.",".MM_CorePageType::$FREE_CONFIRMATION.") AND page_id IS NOT NULL;";
		$rows = $wpdb->get_results($sql);
		
		if($rows)
		{
			foreach($rows as $row)
			{
				$permalink = get_permalink($row->page_id);
				
				if(!empty($permalink))
				{
					//TODO: determine the impact of testing for pageurl at position 0
					$pageUrl = preg_replace("(https?://)", "", $pageUrl );
					$permalink = preg_replace("(https?://)", "", $permalink );
					$isConfirmationPage = (strpos($pageUrl, $permalink) !== false);
					if($isConfirmationPage == true)
					{
						return true;
					}
				}
			}
		}
		
		return false;
	}
	
	/**
	 * This method determines if the page URL passed is the logout page
	 * @param String $pageUrl the URL to check if it's the logout page
	 * @return boolean true if the logout page, false if not
	 */
	public static function isLogoutPageByUrl($pageUrl)
	{
		global $wpdb;
		$sql = "SELECT page_id FROM ".MM_TABLE_CORE_PAGES." WHERE core_page_type_id = '".MM_CorePageType::$LOGOUT_PAGE."' AND page_id IS NOT NULL;";
		$row = $wpdb->get_row($sql);
		
		if($row)
		{
			$permalink = get_permalink($row->page_id);	
			if(!empty($permalink))
			{
				$pageUrl = preg_replace("(https?://)", "", $pageUrl );
				$permalink = preg_replace("(https?://)", "", $permalink );
				$isLogoutPage = (strpos($pageUrl, $permalink) !== false);
				if($isLogoutPage == true)
				{
					return true;
				}
			}
		}
		
		return false;
	}
	
	/**
	 * This method determines if the page URL passed is a checkout, confirmation, login or my account page
	 * @param String $pageUrl the URL to check if it's a checkout, confirmation, login or my account page
	 * @return boolean true if the logout page, false if not
	 */
	public static function isSmartTagCorePage($pageUrl)
	{
		global $wpdb;
		$sql = "SELECT page_id FROM ".MM_TABLE_CORE_PAGES." WHERE core_page_type_id ";
		$sql .= "IN (".MM_CorePageType::$PAID_CONFIRMATION.",".MM_CorePageType::$FREE_CONFIRMATION.",".MM_CorePageType::$LOGIN_PAGE.",".MM_CorePageType::$CHECKOUT.",".MM_CorePageType::$REDEEM_GIFT.",".MM_CorePageType::$MY_ACCOUNT.") AND page_id IS NOT NULL;";
		$rows = $wpdb->get_results($sql);
		
		if($rows)
		{
			foreach($rows as $row)
			{
				$permalink = get_permalink($row->page_id);
				
				if(!empty($permalink))
				{
					$pageUrl = preg_replace("(https?://)", "", $pageUrl );
					$permalink = preg_replace("(https?://)", "", $permalink );
					$isSmartTagCorePage = (strpos($pageUrl, $permalink) !== false);
					if($isSmartTagCorePage == true)
					{
						return true;
					}
				}
			}
		}
		
		return false;
	}
	
	public static function redirectToSaveTheSalePage($pageId)
	{
		global $wpdb;
		
		$currentUser = self::getCurrentUser();
		
		if(!$currentUser->isValid())
		{
			return false;
		}
		else
		{
			$membershipId = $currentUser->getMembershipId();
			$cpe = new MM_CorePageEngine();
			$specificPageId = $cpe->getCorePageIdByRefType(MM_CorePageType::$SAVETHESALE, MM_TYPE_MEMBERSHIP_LEVEL, $membershipId);
			if($pageId != $specificPageId)
			{
				$url = "";
				if(intval($pageId) > 0)
				{
					$url = $cpe->getFormattedUrl($specificPageId);
				}	
				
				if(!empty($url))
				{
					wp_redirect($url);
					exit;
				}
			}
		}
	}
	
	public static function redirectToMemberHomePage($pageId)
	{
		global $wpdb;
	
		$currentUser = self::getCurrentUser();
	
		if(!$currentUser->isValid())
		{
			return false;
		}
		else
		{
			$membershipId = $currentUser->getMembershipId();
			$cpe = new MM_CorePageEngine();
			$specificPageId = $cpe->getCorePageIdByRefType(MM_CorePageType::$MEMBER_HOME_PAGE, MM_TYPE_MEMBERSHIP_LEVEL, $membershipId);
			if($pageId != $specificPageId)
			{
				$url = "";
				if(intval($pageId) > 0)
				{
					$url = $cpe->getFormattedUrl($specificPageId);
				}
	
				if(!empty($url))
				{
					wp_redirect($url);
					exit;
				}
			}
		}
	}
	
	/**
	 * This function is for on-the-fly redirection based on whether or not 
	 * the user may be going to the home page.  
	 */
	public static function redirectToSiteHomePage($force=false)
	{	
		$setting = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_ON_LOGIN_USE_WP_FRONTPAGE);
		$useMbrHomepage = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_AFTER_LOGIN_USE_WP_FRONTPAGE);
		
		if($setting != "1" && $useMbrHomepage != "1")
		{	
			$cp = new MM_CorePageEngine();
			
			if($force)
			{
				$corePageTypeId = MM_CorePageType::$MEMBER_HOME_PAGE;
			}
			else
			{
				$corePageTypeId = $cp->determineCorePage();
			}
			
			$currentUser = self::getCurrentUser();
	
			if($currentUser->isValid())
			{
				if($corePageTypeId == MM_CorePageType::$MEMBER_HOME_PAGE)
				{
					$url = MM_CorePageEngine::getUrl($corePageTypeId);
					if(!empty($url))
					{						
						wp_redirect($url);
						exit;
					}
				}
			}
		}
	}
	
	public static function getCurrentUser()
	{
		global $user, $current_user;
		
		$currentUser = new MM_User();
		
		if(MM_Employee::isEmployee())
		{
			$previewObj = MM_Preview::getData();
			if($previewObj !== false)
			{
				$currentUser = $previewObj->getUser();
			}
		}
		else if(isset($user->ID))
		{
			$currentUser = new MM_User($user->ID);
		}
		else if(isset($user->data->ID))
		{
			$currentUser = new MM_User($user->data->ID);
		}
		else if(isset($current_user->ID))
		{
			$currentUser = new MM_User($current_user->ID);
		}
		
		return $currentUser;
	}
	
	public function saveCorePages($id, $post)
	{	
		// save core page data if necessary
		if($post->post_status != 'auto-draft'
			&& false === (wp_is_post_autosave($post) || wp_is_post_revision($post))
			&& isset($_POST['save-mm-corepages-nonce']) && wp_verify_nonce($_POST['save-mm-corepages-nonce'], 'save-mm-corepages')) 
		{
			$corePageView = new MM_CorePagesView();
			
			if(isset($_POST["save-mm-corepages"]["core_page_type_id"]) && intval($_POST["save-mm-corepages"]["core_page_type_id"])>0)
			{
				$corePageView->saveCorePage($post);
			}
			else if(isset($_POST["save-mm-corepages"]["core_page_type_id"]) && intval($_POST["save-mm-corepages"]["core_page_type_id"])=='')
			{
				$corePageEngine = new MM_CorePageEngine();
				if(!MM_CorePage::isDefaultCorePage($_POST["post_ID"]))
					$corePageEngine->removeCorePageById($_POST["post_ID"]);
			}
		}
	}
	
	public static function isFrontPage()
	{	
		$showOnFront = MM_OptionUtils::getOption("show_on_front");
		if(is_front_page()){
			return true;
		}
		else if($showOnFront == "posts" && is_home()){
			return true;
		}
		
		return false;
	}
	
	private function determineCorePage()
	{	
		global $wp_query;	
		if(isset($wp_query->post->ID) && intval($wp_query->post->ID)>0){ 
			$postId = $wp_query->post->ID;
			$showOnFront = MM_OptionUtils::getOption("show_on_front");
			
			if(is_front_page())
			{
				return MM_CorePageType::$MEMBER_HOME_PAGE;
			}
			else if($showOnFront == "posts" && is_home())
			{
				return MM_CorePageType::$MEMBER_HOME_PAGE;
			}
		}
		return MM_CorePageType::$NO_PAGE;
	}
	
	public static function getUrl($corePageTypeId, $params=null, $user=null)
	{
		$cpe = new MM_CorePageEngine();
		switch($corePageTypeId)
		{
			case MM_CorePageType::$ERROR:
				return $cpe->getErrorPage($params);
		
			case MM_CorePageType::$MEMBER_HOME_PAGE:
				return $cpe->getHomePage($params, $user);
		
			case MM_CorePageType::$MY_ACCOUNT:
				return $cpe->getMyAccountPage($params);
		
			case MM_CorePageType::$CHECKOUT:
				return $cpe->getCheckoutPage($params);
		
			case MM_CorePageType::$REDEEM_GIFT:
				return $cpe->getRedeemGiftPage($params);
		
			case MM_CorePageType::$LOGIN_PAGE:
				return $cpe->getLoginPage($params);
		
			case MM_CorePageType::$LOGOUT_PAGE:
				return $cpe->getLogoutPage($params);
		
			case MM_CorePageType::$FORGOT_PASSWORD:
				return $cpe->getForgotPasswordPage($params);
					
			case MM_CorePageType::$PAID_CONFIRMATION:
			case MM_CorePageType::$FREE_CONFIRMATION:
				return $cpe->getConfirmationPage($params);
		
			case MM_CorePageType::$SAVETHESALE:
				return $cpe->getSaveTheSalePage($params, $user);
					
			default:
				return "";
		}
	}
	
	private function getConfirmationPage($params=null)
	{
		$page_id = 0;
		
		if((bool) $params["isFree"])
		{
			$page_id = $this->getCorePageIdByRefType(MM_CorePageType::$FREE_CONFIRMATION, $params["refType"], $params["refId"]);
			
			if(intval($page_id) <= 0) 
			{
				$page_id = $this->getCorePageIdByRefType(MM_CorePageType::$PAID_CONFIRMATION, $params["refType"], $params["refId"]);
			}
		}
		else 
		{
			$page_id = $this->getCorePageIdByRefType(MM_CorePageType::$PAID_CONFIRMATION, $params["refType"], $params["refId"]);
		}
		
		if(intval($page_id) > 0)
		{
			if(isset($params["orderId"]))
			{
 				$orderId = $params["orderId"];
 				MM_Session::value(MM_Session::$KEY_LAST_ORDER_ID, $orderId);
			}
			else
			{
				$orderId = MM_Session::value(MM_Session::$KEY_LAST_ORDER_ID);
			}
			
 			$userId = MM_Session::value(MM_Session::$KEY_LAST_USER_ID);
 			
 			if(intval($userId) <= 0)
 			{
 				$currentUser = self::getCurrentUser();
 				$userId = ($currentUser->isValid()) ? $currentUser->getId() : 0;
 			}
 			
 			$url = $this->getFormattedUrl($page_id);
 			
 			if(!isset($orderId))
 			{
 				$orderId = 0;
 			}
 			
 			// get a transaction key
 			$transKeyResponse = MM_TransactionKey::generateKey($userId, $orderId);
 			
 			if (MM_Response::isSuccess($transKeyResponse))
 			{
 				$transKey = $transKeyResponse->message;
 				$url = MM_Utils::appendUrlParam($url, MM_Session::$KEY_TRANSACTION_KEY, $transKey);
 			}
				
			return $url;
		}
		
		return "";
	}
	
	private function getForgotPasswordPage($params=null)
	{
		$page_id = $this->getCorePageIdByRefType(MM_CorePageType::$FORGOT_PASSWORD, null, null);
		return $this->getFormattedUrl($page_id);
	}
	
	private function getMyAccountPage($params=null)
	{
		$page_id = $this->getCorePageIdByRefType(MM_CorePageType::$MY_ACCOUNT, null, null);
		return $this->getFormattedUrl($page_id);
	}
	
	private function getLogoutPage($params=null)
	{
		global $wp_query;
		$currentUser = self::getCurrentUser();
		
		if(!$currentUser->isValid())
		{
			$page_id = $this->getCorePageIdByRefType(MM_CorePageType::$LOGOUT_PAGE, null, null);
			return $this->getFormattedUrl($page_id);
		}
		else 
		{
			// user is logged in, lets find there membership info
			$membershipId = $currentUser->getMembershipId();
	
			// user has a member type, check for specific member type page
			$pageId = $this->getCorePageIdByRefType(MM_CorePageType::$LOGOUT_PAGE, MM_TYPE_MEMBERSHIP_LEVEL, $membershipId);

			if(intval($pageId)>0)
			{
				$oldUrl = "";
				if(isset($wp_query->post->ID) && intval($wp_query->post->ID)>0){
					$oldUrl = $this->getFormattedUrl($wp_query->post->ID);
				}
				$newUrl = $this->getFormattedUrl($pageId);
				
				if($oldUrl == $newUrl)
				{
					return "";
				}
				return $newUrl;
			}
		}
			
		return "";
	}
	
	private function getLoginPage($params=null)
	{
		$page_id = $this->getCorePageIdByRefType(MM_CorePageType::$LOGIN_PAGE, null, null);
		return $this->getFormattedUrl($page_id);
	}
	
	private function getCheckoutPage($params=null)
	{
		$page_id = $this->getCorePageIdByRefType(MM_CorePageType::$CHECKOUT, null, null);
		return $this->getFormattedUrl($page_id);
	}
	
	private function getRedeemGiftPage($params=null)
	{
		$page_id = $this->getCorePageIdByRefType(MM_CorePageType::$REDEEM_GIFT, null, null);
		return $this->getFormattedUrl($page_id);
	}
	
	private function getErrorPage($errorCode)
	{
		$page_id = $this->getCorePageIdByRefType(MM_CorePageType::$ERROR, null, null);
		$url = $this->getFormattedUrl($page_id);
		
		if(isset($errorCode) && !empty($errorCode))
		{
			$url = MM_Utils::appendUrlParam($url, MM_Error::$URL_PARAM, $errorCode, true);
		}
		
		return $url;
	}
	
	private function undefinedAction()
	{
		trigger_error(__FILE__." : ".__LINE__." should be defined for corepagetype.");
	}
	
	private function getFormattedUrl($page_id)
	{
		if(intval($page_id)>0)
		{
			if(!$this->arePermalinksUsed())
			{
				$thisPost = get_post($page_id);
				
				$getName = "p";
				if(isset($thisPost->post_type) && $thisPost->post_type=="page"){
					$getName = "page_id";	
				}
				
				$url = MM_OptionUtils::getOption("siteurl");
				$url = preg_replace("/(\/)$/","",$url)."/?".$getName."=".$page_id;
				
				return $url;
			}
			else
				return get_permalink($page_id);	
		}
		return "";
	}
	
	public function arePermalinksUsed()
	{
		return MM_OptionUtils::getOption('permalink_structure') != '';
	}
	
	public static function getCorePageId($core_page_type, $type_name, $type_id)
	{
		$cp = new MM_CorePageEngine();
		if(!is_null($type_id))
		{
			return $cp->getCorePageIdByRefType($core_page_type, $type_name, $type_id);
		}
		return 0;
	}
	
	private function getSaveTheSalePage($params=null, $user=null)
	{
		if(!is_null($user))
		{
			$currentUser = $user;
		}
		else
		{
			$currentUser = self::getCurrentUser();
		}
		
		if(!$currentUser->isValid())
		{
			return "";
		}
		else
		{
			/// user is logged in, lets find there membership info
			$member_type_id = $currentUser->getMembershipId();
			
			///user has a member type, check for specific member type page
			$page_id = $this->getCorePageIdByRefType(MM_CorePageType::$SAVETHESALE, MM_TYPE_MEMBERSHIP_LEVEL, $member_type_id);
			if(intval($page_id)>0)
			{
				return $this->getFormattedUrl($page_id);
			}
		}	
		return "";
	}
	
	private function getHomePage($params=null, $user=null)
	{
		global $wp_query;
		if(!is_null($user))
		{
			$currentUser = $user;
		}
		else
		{
			$currentUser = self::getCurrentUser();
		}
		
		if(!$currentUser->isValid())
		{
			return "";
		}
		else
		{
			/// user is logged in, lets find there membership info
			$membershipId = $currentUser->getMembershipId();
	
			///user has a member type, check for specific member type page
			$pageId = $this->getCorePageIdByRefType(MM_CorePageType::$MEMBER_HOME_PAGE, MM_TYPE_MEMBERSHIP_LEVEL, $membershipId);

			if(intval($pageId)>0)
			{
				$oldUrl = "";
				if(isset($wp_query->post->ID) && intval($wp_query->post->ID)>0)
				{
					$oldUrl = $this->getFormattedUrl($wp_query->post->ID);
				}
				$newUrl = $this->getFormattedUrl($pageId);
				
				if($oldUrl == $newUrl)
				{
					return "";
				}
				return $newUrl;
			}
		}	
		return "";
	}
	
	public function removeAllReferences($pageId)
	{
		$corePage = new MM_CorePage();
		$corePage->setPageId($pageId);
		return $corePage->setReferencePages(array());
	}
	
	public function saveSpecificPage($pageId, $corePageTypeId, $refId, $refType)
	{
		//// get default page info to determine callback method
		$row = MM_CorePage::getDefaultCorePageByType($corePageTypeId);
		if(!$row)
		{ 
			MM_Messages::addError("Unable to save Membermouse Core Page Options: Could not find default core page by Core Page Type ({$corePageTypeId}).");
			return false;
		}
			
		/// ensure ref id is an array and delete existing saved data
		$referenceIds = (is_array($refId))?$refId:array($refId);
		
		$corePage = new MM_CorePage();
		$corePage->setPageId($pageId);
		$corePage->setRefType($refType);
		$corePage->setCorePageTypeId($corePageTypeId);
		return $corePage->setReferencePages($referenceIds);
	}
	
	public function hasReferences($pageId)
	{
		global $wpdb;
		$sql = "select count(*) as total from ".MM_TABLE_CORE_PAGES ." where page_id='{$pageId}' and ref_id>0 and ref_type IS NOT NULL";
		$row = $wpdb->get_row($sql);
		return $row->total>0;
	}
	
	public function saveDefaultPage($pageId, $corePageTypeId, $override=false)
	{
		global $wpdb;
		
		if(!$override)
		{	
			if(MM_CorePage::hasDefaultCorePage($corePageTypeId, $pageId))
			{
				MM_Messages::addError("Core page could not be saved since one is already defined."); 
				return false;
			}
		}
		
		$corePage = new MM_CorePage();
		$corePage->setCorePageTypeId($corePageTypeId);
		$corePage->setPageId($pageId);
		return $corePage->setAsDefaultPage();
	}
	
	public static function isCorePage($pageId, $corePageTypeId=0)
	{
		global $wpdb;
		
		$sql = "select count(*) as total from ".MM_TABLE_CORE_PAGES." where page_id='{$pageId}' ";
		if($corePageTypeId>0)
		{
			$sql.= " and core_page_type_id='{$corePageTypeId}'";
		}
		$row = $wpdb->get_row($sql);
		
		return ($row->total>0);
	}
	
	public function getCorePageIdByRefType($corePageTypeId, $refType, $refId)
	{
		global $wpdb;
		
		$rows = MM_CorePage::getAllReferencesToCorePageType($corePageTypeId);
		if($rows == 0)
		{
			return $rows;
		}
			
		$default_page = 0;
		foreach($rows as $row)
		{
			if($row->ref_type == $refType && $row->ref_id==$refId)
			{
				return $row->page_id;
			}
			else if(is_null($row->ref_type) || empty($row->ref_type))
			{
				$default_page = $row->page_id;
			}
		}
		
		return $default_page;
	}
	
	public function removeCorePageById($pageId)
	{
		global $wpdb;
		
		///update core page to nothing.
		$cp = new MM_CorePage();
		$cp->setPageId($pageId);
		$cp->removeCorePage();
	}
}
