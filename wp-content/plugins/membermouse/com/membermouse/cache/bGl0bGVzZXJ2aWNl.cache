/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 *
 * MM_LitleService is an implementation of the MM_PaymentService interface using Litle
 */

class MM_LitleService extends MM_ScheduledPaymentService
{
	public static $ENVIRONMENT_SANDBOX = "env-sandbox";
	public static $ENVIRONMENT_PRELIVE = "env-prelive";
	public static $ENVIRONMENT_PRODUCTION = "env-production";
	public static $ENVIRONMENT_POSTLIVE = "env-postlive";
	
	public static $URL_TYPE_WHITELISTED = "url-type-whitelisted"; // requires IPs to be whitelisted; credentials don't reset
	public static $URL_TYPE_OPEN = "url-type-open"; // requests come in from any IP address; credentials reset every 3 months
	 
	protected $token = "LITLE";
	
	protected $environment = "";
	protected $urlType = "";
	protected $reportGroup = "";
	
	protected $preliveMerchantId = "";
	protected $preliveUsername = "";
	protected $prelivePassword = "";
	
	protected $prodMerchantId = "";
	protected $prodUsername = "";
	protected $prodPassword = "";
	
	protected $postliveMerchantId = "";
	protected $postliveUsername = "";
	protected $postlivePassword = "";
	
	protected $testAPILogin = "";
	protected $testTransactionKey = "";
	
	protected $liveAPILogin = "";
	protected $liveTransactionKey = "";
	
	protected $testMode = false;
	
	protected $supportedCurrencies = array("USD");
	
	
	public function loadDependencies()
	{
		require_once(MM_LIB_DIR."/litle/LitleOnline.php");
	}
	
	
	public function install() 
	{ 
		parent::install();
		
		$sql = "CREATE TABLE ".MM_TABLE_LITLE_CUSTOMER_LINKS." (\n".
				"litle_customer_id bigint(20) NOT NULL,\n".
				"litle_payment_id bigint(20) NOT NULL,\n".
				"membermouse_customer_id bigint(20) NOT NULL,\n".
				"UNIQUE KEY litle_payment_id (litle_payment_id),\n".
				"UNIQUE KEY membermouse_customer_id (membermouse_customer_id)\n".
				");\n";
		
		$sql.= "CREATE TABLE ".MM_TABLE_LITLE_CHARGES." (\n".
				"id bigint(20) NOT NULL AUTO_INCREMENT,\n".
				"order_id bigint(20) NOT NULL,\n".
				"order_item_id bigint(20) NULL,\n".
				"charge_id varchar(40),\n".
				"authorization_code varchar(20),\n".
				"last_four varchar(4) NULL,\n".
				"amount decimal(10,2) NOT NULL,\n".
				"transaction_date datetime NOT NULL,\n".
				"PRIMARY KEY  (id),\n".
				"KEY mm_litle_charge_charge_id_idx (charge_id)\n".
				");\n";
		
		dbDelta($sql);
	}
	
	
	/**
	 * Report the features the Litle service supports
	 * @see MM_PaymentService::supportsFeature()
	 *
	 * @param integer $featureConst a const as defined in MM_PaymentServiceFeatures
	 * @return boolean true if supported, false if not supported
	 */
	public function supportsFeature($featureConst)
	{
		$supported[] = MM_PaymentServiceFeatures::ONSITE_SERVICE;
		$supported[] = MM_PaymentServiceFeatures::CARD_ON_FILE;
		$supported[] = MM_PaymentServiceFeatures::COUPONS;
		return in_array($featureConst,$supported,true);
	}
	
	
	/**
	 * Returns the html that will be used on the payment method settings screen for configuring Litle
	 * @see MM_PaymentService::displayConfigOptions()
	 * 
	 * @return String containing the configuration dialog html
	 */
	public function displayConfigOptions()
	{
		$config_options = MM_TEMPLATE::generate("{$this->getTemplateDir()}/litle_config.html.php",$this);
		return $config_options;
	}
	
	
	/**
	 * Validates and configures the object with the settings information generated by submission of the configuration dialog
	 * @see MM_PaymentService::processConfigOptions()
	 *
	 * @param $post An array containing the data posted from the payment methods settings screen
	 * @return An MM_Response of type MM_Response::SUCCESS indicating successful validation and assigment. On error, the type will be MM_Response::ERROR and the message will contain the error messages
	 */
	public function processConfigOptions($post) 
	{ 
		$active = (isset($post['onsite_payment_service']) && (strtolower($this->getToken()) == $post['onsite_payment_service']));
		$this->setActive($active);

		if ($active)
		{
			$this->install();
			$config = isset($post['payment_service']['litle'])?$post['payment_service']['litle']:array();
			$empty_errors = "";
			
			$this->setEnvironment($config['environment']);
			$this->setUrlType($config['url_type']);
			
			if(isset($config['report_group']))
			{
				$this->setReportGroup($config['report_group']);
			}
			
			// validate input
			switch($this->environment)
			{
				case self::$ENVIRONMENT_SANDBOX:
					break;
					
				case self::$ENVIRONMENT_PRELIVE:
					if(empty($config['prelive_merchant_id']))
					{
						$empty_errors .= "Litle: Please enter a value for the Pre-Live Merchant ID\n";
					}
					if(empty($config['prelive_username']))
					{
						$empty_errors .= "Litle: Please enter a value for the Pre-Live Username\n";
					}
					if(empty($config['prelive_password']))
					{
						$empty_errors .= "Litle: Please enter a value for the Pre-Live Password\n";
					}
					break;
					
				case self::$ENVIRONMENT_PRODUCTION:
					if(empty($config['prod_merchant_id']))
					{
						$empty_errors .= "Litle: Please enter a value for the Production Merchant ID\n";
					}
					if(empty($config['prod_username']))
					{
						$empty_errors .= "Litle: Please enter a value for the Production Username\n";
					}
					if(empty($config['prod_password']))
					{
						$empty_errors .= "Litle: Please enter a value for the Production Password\n";
					}
					break;
					
				case self::$ENVIRONMENT_POSTLIVE:
					if(empty($config['postlive_merchant_id']))
					{
						$empty_errors .= "Litle: Please enter a value for the Post-Live Merchant ID\n";
					}
					if(empty($config['postlive_username']))
					{
						$empty_errors .= "Litle: Please enter a value for the Post-Live Username\n";
					}
					if(empty($config['postlive_password']))
					{
						$empty_errors .= "Litle: Please enter a value for the Post-Live Password\n";
					}
					break;
			}
			
			if ($empty_errors != "")
			{
				return new MM_Response($empty_errors,MM_Response::$ERROR);
			}
			
			//if here, that means they are all values are set
			$this->setPreLiveMerchantId($config['prelive_merchant_id']);
			$this->setProdMerchantId($config['prod_merchant_id']);
			$this->setPostLiveMerchantId($config['postlive_merchant_id']);
			
			$this->setPreLiveUsername($config['prelive_username']);
			$this->setProdUsername($config['prod_username']);
			$this->setPostLiveUsername($config['postlive_username']);
			
			$this->setPreLivePassword($config['prelive_password']);
			$this->setProdPassword($config['prod_password']);
			$this->setPostLivePassword($config['postlive_password']);
		}
		return new MM_Response();
	}
	
	
	/**
	 * Returns an array containing the current Litle environment configuration
	 *
	 * @return Array
	 */
	private function getLitleConfig()
	{
		$config = array();
		
		$environment = $this->getEnvironment();
		$reportGroup = $this->getReportGroup();
		
		$config["url"] = $this->getUrl();
		
		switch($environment)
		{
			case self::$ENVIRONMENT_PRELIVE:
				$config["user"] = $this->getPreLiveUsername();
				$config["password"] = $this->getPreLivePassword();
				$config["merchantId"] = $this->getPreLiveMerchantId();
				$config["reportGroup"] = $this->getReportGroup();
				break;
				
			case self::$ENVIRONMENT_PRODUCTION:
				$config["user"] = $this->getProdUsername();
				$config["password"] = $this->getProdPassword();
				$config["merchantId"] = $this->getProdMerchantId();
				$config["reportGroup"] = $this->getReportGroup();
				break;
				
			case self::$ENVIRONMENT_POSTLIVE:
				$config["user"] = $this->getPostLiveUsername();
				$config["password"] = $this->getPostLivePassword();
				$config["merchantId"] = $this->getPostLiveMerchantId();
				$config["reportGroup"] = $this->getReportGroup();
				break;
		}
		
		return $config;
	}

	
	/**
	 * Creates a customer in the Litle System
	 * 
	 * @param MM_User $user The MemberMouse user
	 * @param MM_CustomerAddress $billingAddress The billing address of the customer credit card
	 * @param MM_CardInfo $cardInfo The customer's credit card information
	 * @param $originalOrderId (optional) The order id to link the local card on file information to
	 * 
	 * @return MM_Response indicating whether the customer was created in the Litle system successfully
	 */
	public function createCustomer(MM_User $user, MM_CustomerAddress $billingAddress, MM_CardInfo $cardInfo, $originalOrderId=null)
	{
		global $wpdb;
		
		$customerProfileId = null;
		$paymentProfileId = null;
		
		$litle = new LitleOnlineRequest();
		
		// create customer profile
		$customerProfile = new AuthorizeNetCustomer();
		$customerProfile->merchantCustomerId = $user->getId();
		$customerProfile->description = get_bloginfo()." Customer ID# {$user->getId()} ({$user->getEmail()})";
		$customerProfile->email = $user->getEmail();
		
		$response = $litle->createCustomerProfile($customerProfile);
		
		if($response->isOk())
		{
			$customerProfileId = $response->getCustomerProfileId();
		}
		else 
		{
			return new MM_Response("Error creating customer profile: {$response->getMessageText()}", MM_Response::$ERROR);
		}
		
		// add payment profile to customer
		$paymentProfile = new AuthorizeNetPaymentProfile();
		$paymentProfile->customerType = "individual";
		
		$paymentProfile->billTo->firstName = $user->getFirstName();
		$paymentProfile->billTo->lastName = $user->getLastName();
		$paymentProfile->billTo->address = $billingAddress->getAddressLine1();
		$paymentProfile->billTo->city = $billingAddress->getCity();
		$paymentProfile->billTo->state = $billingAddress->getState();
		$paymentProfile->billTo->zip = $billingAddress->getPostalCode();
		$paymentProfile->billTo->country = $billingAddress->getCountry();
		$paymentProfile->billTo->phoneNumber = $user->getPhone();
		 
		$paymentProfile->payment->creditCard->cardNumber = $cardInfo->getCardNumber();
		$paymentProfile->payment->creditCard->expirationDate = $cardInfo->getExpirationYear()."-".$cardInfo->getExpirationMonth();
		$paymentProfile->payment->creditCard->cardCode = $cardInfo->getCVV();
		
		$response = $litle->createCustomerPaymentProfile($customerProfileId, $paymentProfile);
		
		if($response->isOk())
		{
			$paymentProfileId = $response->getPaymentProfileId();
		}
		else 
		{
			return new MM_Response("Error adding payment profile to customer: {$response->getMessageText()}", MM_Response::$ERROR);
		}
		
		if(is_null($customerProfileId) || is_null($paymentProfileId))
		{
			return new MM_Response("Unable to create customer", MM_Response::$ERROR);
		}
		
		//create link to Litle customer
		$result = $wpdb->insert(MM_TABLE_LITLE_CUSTOMER_LINKS, array("litle_customer_id"=>$customerProfileId, "litle_payment_id"=>$paymentProfileId, "membermouse_customer_id"=>$user->getId()));
		if(!$result)
		{
			//TODO: do something if this fails in the future, ie log. Not a critical enough error to stop the process, but we would be interested to know it happened
		}
		
		//create entry in card on file table
		$cofData = array("user_id"=>$user->getId(), "payment_service_id"=>$this->getId(), "payment_service_identifier"=>$paymentProfileId);
		if (!is_null($originalOrderId))
		{
			$cofData['original_order_id'] = $originalOrderId;
		}
		$result = $wpdb->insert(MM_TABLE_CARD_ON_FILE, $cofData);
		if(!$result)
		{
			//TODO: same deal as above: do something if this fails in the future, ie log. Not critical enough error to stop 
		}
		
		$customerInfo = array();
		$customerInfo["customer_id"] = $customerProfileId;
		$customerInfo["payment_id"] = $paymentProfileId;
		
		return new MM_Response($customerInfo);
	}
	
	
	/**
	 * Charge an order
	 * 
	 * @param MM_Order $order The order to charge
	 * @param MM_CardInfo $cardInfo The credit card information to use in charging the order
	 * @return MM_PaymentServiceResponse An object representing the status of the charge attempt
	 */
	public function chargeOrder(MM_Order $order, MM_CardInfo $cardInfo=null, $validate=true) 
	{ 
		global $wpdb;
		
		parent::chargeOrder($order,$cardInfo,$validate);
		
		$tryCardOnFile = is_null($cardInfo);
		
		if (!$tryCardOnFile) 
		{
			$cardValidation = $cardInfo->validate();
			if ($cardValidation !== true)
			{
				return new MM_PaymentServiceResponse("Unable to charge order: {$cardValidation}",MM_PaymentServiceResponse::$ERROR);
			}
		}
		
		$litleCustomerInfo = $this->lookupCustomer($order->getCustomer()->getId());
		
		$productItems = $order->getProducts();
		if ($litleCustomerInfo === false)
		{
			if ($tryCardOnFile)
			{
				return new MM_PaymentServiceResponse("Invalid credit card information",MM_PaymentServiceResponse::$ERROR);
			}
			$ccResponse = $this->createCustomer($order->getCustomer(), $order->getBillingAddress(), $cardInfo, $order->id);
			if (MM_Response::isError($ccResponse))
			{
				return new MM_PaymentServiceResponse("Error: {$ccResponse->message}",MM_PaymentServiceResponse::$ERROR);
			}
			$litleCustomerInfo = $ccResponse->message;
		}
		else 
		{
			if (!$tryCardOnFile)
			{
				//there is a card on file, but credit card info was sent as well. Update the card on file to be the card that was sent
				$aProductItem = reset($productItems);
				$updateResponse = $this->updateSubscriptionInfo($aProductItem,$cardInfo,$order->getBillingAddress());
				if (MM_PaymentServiceResponse::isError($updateResponse))
				{
					return $updateResponse;
				}
			}
		}

		//now setup schedules for the recurring products
		$createScheduledResult = $this->createSchedulesFromProducts($productItems);
		
		if(MM_PaymentServiceResponse::isError($createScheduledResult))
		{
			return $createScheduledResult;
		}
		
		if ($order->getTotal() > 0.00)
		{
			$productItems = $order->getProducts();
			$orderItemId = null;
			if (count($productItems) == 1)
			{
				$orderItem = reset($productItems);
				$orderItemId = $orderItem->getId();
			}
			
			$description = "Payment for order# {$order->getOrderNumber()}, item: {$orderItem->getDescription()}";
			$invoiceNumber = $order->getOrderNumber()."-".$orderItem->getItemId();
			$chargeResponse = $this->sendAuthNetCIMCharge($litleCustomerInfo, $order->getTotal(), $invoiceNumber, $description);
			
			if (MM_PaymentServiceResponse::isError($chargeResponse) || MM_PaymentServiceResponse::isFailed($chargeResponse))
			{
				$createdSubscriptions = $createScheduledResult->message;
				if (is_array($createdSubscriptions) && (count($createdSubscriptions) > 0))
				{
					$this->cancelScheduledSubscriptions($createdSubscriptions);
				}
				return $chargeResponse;
			}
			
			//log to transactions tables
			$chargeObject = $chargeResponse->getMessage();
			
			$transactionDescription = "Payment for order# {$order->getOrderNumber()}";
			$transactionDate = MM_Utils::getCurrentTime();
			$insertData = array( "order_id"          	=> $order->getId(),
								 "order_item_id"     	=> $orderItemId,
								 "charge_id"     	 	=> $chargeObject->transaction_id,
								 "authorization_code"	=> (isset($chargeObject->authorization_code)) ? $chargeObject->authorization_code : "",
								 "last_four"			=> (isset($chargeObject->card_type)) ? str_replace("X", "", $chargeObject->card_type) : "",
								 "amount"            	=> $order->getTotal(),
								 "transaction_date"  	=> $transactionDate
			);
			$wpdb->insert(MM_TABLE_LITLE_CHARGES,$insertData);
			$authNetChargeId = $wpdb->insert_id;
			
			//now log the payment in the transactions table
			$res = MM_TransactionLog::createTransactionEntry($order->getId(), $orderItemId, $order->getTotal(), $order->getCurrency(), $transactionDescription, MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT,true,$this->id,$authNetChargeId,$transactionDate);
		}
		
		//reaching this point means the subscriptions were scheduled and the initial charge was successful
		return new MM_PaymentServiceResponse();
	}	
	
	
	/**
	 * Send a charge to Litle, and returns an object containing the unfiltered result.
	 * 
	 * @param array $litleCustomerInfo An array of Litle customer info to charge. 
	 * @param integer $amount The amount to charge in cents. If a amount is given that is a float, it is assumed to be dollars and multiplied by 100 to get the integer value
	 * @param string $invoiceNumber The invoice number to attach to the charge
	 * @param string $description The description to attach to the charge
	 * 
	 * @return MM_PaymentServiceResponse On success, contains the braintree charge object returned by the gateway, on failure contains an error message
	 */
	protected function sendAuthNetCIMCharge($litleCustomerInfo, $amount, $invoiceNumber, $description="")
	{
		if (is_null($litleCustomerInfo))
		{
			return new MM_PaymentServiceResponse("Unable to create charge: No payment method was provided",MM_PaymentServiceResponse::$ERROR);
		}
		
		if (!is_numeric($amount))
		{
			return new MM_PaymentServiceResponse("Unable to create charge: Received a non-numeric amount to charge",MM_PaymentServiceResponse::$ERROR);
		}
		
		$transaction = new AuthorizeNetTransaction();
		$transaction->amount = $amount;
		$transaction->order->invoiceNumber = $invoiceNumber;
		$transaction->order->description = $description;
		$transaction->customerProfileId = $litleCustomerInfo["customer_id"];
		$transaction->customerPaymentProfileId = $litleCustomerInfo["payment_id"];
		
		$litle = new LitleOnlineRequest();
		$response = $litle->createCustomerProfileTransaction("AuthCapture", $transaction);
		
		if($response->isOk()) 
		{
			$transactionResponse = $response->getTransactionResponse();
			return new MM_PaymentServiceResponse($transactionResponse);
		}
		else 
		{
			return new MM_PaymentServiceResponse("Unable to create charge: {$response->getMessageText()}", MM_PaymentServiceResponse::$ERROR);
		}
	}
	
	
	protected function executeSubscriptionPayment(MM_OrderItem $orderItem, $currentRebillNumber)
	{
		global $wpdb;
		
		if ($orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING_CANCELLED)
		{
			return new MM_PaymentServiceResponse("Subscription for order item id ".$orderItem->getId()." was not charged because the item is cancelled");
		}
		
		if ($orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING_COMPLETE)
		{
			return new MM_PaymentServiceResponse("Subscription for order item id ".$orderItem->getId()." was not charged because billing is complete for this item");
		}
		
		$order = new MM_Order($orderItem->getOrderId());
		
		$litleCustomerInfo = $this->lookupCustomer(MM_Order::getUserIdByOrderId($order->id));
		if ($litleCustomerInfo === false)
		{
			return new MM_PaymentServiceResponse("Invalid card on file for user id {$paymentEvent->getUserId()}",MM_Response::$ERROR);
		}

		$description = "Payment for order# {$order->getOrderNumber()}, item: {$orderItem->getDescription()}";
		$invoiceNumber = $order->getOrderNumber()."-".$orderItem->getItemId();
		$chargeResponse = $this->sendAuthNetCIMCharge($litleCustomerInfo, $orderItem->getRecurringAmount(), $invoiceNumber, $description);
		
		if (MM_PaymentServiceResponse::isError($chargeResponse) || MM_PaymentServiceResponse::isFailed($chargeResponse))
		{
			$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING_REBILL_FAILED);
			$orderItem->commitData();
			parent::handleOverdueSubscriptionItem($orderItem);
			return $chargeResponse;
		}
		
		//log successful transaction
		$chargeObject = $chargeResponse->getMessage();
		$transactionDate = MM_Utils::getCurrentTime();
		$insertData = array( "order_id" => $order->getId(),
				"order_item_id"     	=> $orderItem->getId(),
				"charge_id"     		=> $chargeObject->transaction_id,
				"authorization_code"	=> (isset($chargeObject->authorization_code)) ? $chargeObject->authorization_code : "",
				"last_four"				=> (isset($chargeObject->card_type)) ? str_replace("X", "", $chargeObject->card_type) : "",
				"amount"           	 	=> $orderItem->getRecurringAmount(),
				"transaction_date"  	=> $transactionDate);
		
		$wpdb->insert(MM_TABLE_LITLE_CHARGES,$insertData);
		$litleTableChargeId = $wpdb->insert_id;
	
		MM_TransactionLog::createTransactionEntry($orderItem->getOrderId(), $orderItem->getId(), $orderItem->getRecurringAmount(), $order->getCurrency(), $description, MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT,true,$this->getId(),$litleTableChargeId);

		// schedule another payment if necessary
		return $this->scheduleNextPaymentForExistingSubscription($orderItem, $order->getCustomer(), $currentRebillNumber);
	}
	
	
	/**
	 * Looks up the Litle customer id linked to a MemberMouse user
	 * 
	 * @param int $userId The MemberMouse user id
	 * @return The (array) Litle customer id and payment id if found, boolean false if not found or errored
	 */
	protected function lookupCustomer($userId)
	{
		global $wpdb;
		
		$lookupSQL = "SELECT litle_customer_id, litle_payment_id from ".MM_TABLE_LITLE_CUSTOMER_LINKS." WHERE membermouse_customer_id='{$userId}'";
		$row = $wpdb->get_row($lookupSQL);
		if (is_null($row))
		{
			return false;
		}
		
		$customerInfo = array();
		$customerInfo["customer_id"] = $row->litle_customer_id;
		$customerInfo["payment_id"] = $row->litle_payment_id;
		
		return $customerInfo;
	}
	
	
	/**
	 * Updates the payment gateway with new information, and update the MemberMouse order with the new billing address
	 * @see MM_PaymentService::updateSubscriptionInfo()
	 * 
	 * @param MM_OrderItem $orderItem The order item representing the subscription being updated
	 * @param MM_CardInfo $cardInfo (optional) The new card to store on file
	 * @param MM_CustomerAddress $billingAddress The new billing address to store. Should be the address associated with the customer's card on file
	 * 
	 * @return MM_PaymentServiceResponse representing success or error. Contains a descriptive error message on error
	 * 
	 */
	public function updateSubscriptionInfo(MM_OrderItem $orderItem, MM_CardInfo $cardInfo=null, MM_CustomerAddress $billingAddress=null) 
	{
		global $wpdb;
		
		if (is_null($cardInfo) || is_null($billingAddress))
		{
			return new MM_PaymentServiceResponse("Error: Both a credit card and a billing address must be supplied to update a subscription",MM_PaymentServiceResponse::$ERROR);
		}
		
		$cardValid = $cardInfo->validate();
		if ($cardValid !== true)
		{
			return new MM_PaymentServiceResponse("Error: {$cardValid}",MM_PaymentServiceResponse::$ERROR);
		}
		
		$customerId = MM_Order::getUserIdByOrderId($orderItem->getOrderId());
		if ($customerId == -1)
		{
			return new MM_PaymentServiceResponse("Unable to update subscription: customer was not found",MM_PaymentServiceResponse::$ERROR);
		}
		
		$litleCustomerInfo = $this->lookupCustomer($customerId);
		if ($litleCustomerInfo === false)
		{
			return new MM_PaymentServiceResponse("Unable to update subscription: customer was not found",MM_PaymentServiceResponse::$ERROR);
		}
		
		$user = new MM_User($customerId);
		if (!$user->isValid())
		{
			return new MM_PaymentServiceResponse("Unable to update subscription: invalid customer provided",MM_PaymentServiceResponse::$ERROR);
		}
		
		// update payment profile to customer
		$paymentProfile = new AuthorizeNetPaymentProfile();
		$paymentProfile->customerType = "individual";
		
		$paymentProfile->billTo->firstName = $user->getFirstName();
		$paymentProfile->billTo->lastName = $user->getLastName();
		$paymentProfile->billTo->address = $billingAddress->getAddressLine1();
		$paymentProfile->billTo->city = $billingAddress->getCity();
		$paymentProfile->billTo->state = $billingAddress->getState();
		$paymentProfile->billTo->zip = $billingAddress->getPostalCode();
		$paymentProfile->billTo->country = $billingAddress->getCountry();
		$paymentProfile->billTo->phoneNumber = $user->getPhone();
			
		$paymentProfile->payment->creditCard->cardNumber = $cardInfo->getCardNumber();
		$paymentProfile->payment->creditCard->expirationDate = $cardInfo->getExpirationYear()."-".$cardInfo->getExpirationMonth();
		$paymentProfile->payment->creditCard->cardCode = $cardInfo->getCVV();
		
		$litle = new LitleOnlineRequest();
		$response = $litle->updateCustomerPaymentProfile($litleCustomerInfo["customer_id"], $litleCustomerInfo["payment_id"], $paymentProfile);
		
		if($response->isOk())
		{
			parent::updateSubscriptionInfo($orderItem,$cardInfo,$billingAddress);
			if ($orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING_REBILL_FAILED)
			{
				$this->resumeSubscription($orderItem);
			}
			return new MM_PaymentServiceResponse();
		}
		else
		{	
			return new MM_PaymentServiceResponse("Unable to update credit card on subscription:\n{$response->getMessageText()}", MM_Response::$ERROR);
		}
	}
	
	
	/**
	 * Refunds a transaction
	 * 
	 * @param integer $transactionId The MemberMouse transaction to refund
	 * @return MM_PaymentServiceResponse indicating success, failure, or error
	 */
	public function refundTransaction($transactionId)
	{
		return $this->_refundTransaction($transactionId,true);
	}
	
	
	/**
	 * Internal refund method that allows a refund to be processed the same way, even if it is initiated on Litle and sent to us via webhook
	 * 
	 * @param integer $transactionId The id of the MemberMouse transaction being refunded
	 * @param boolean $shouldAttemptGatewayRefund (optional) Indicates whether the method should attempt to issue a refund through the Litle api. If Litle notifies us via webhook, the charge is already refunded, so this should be false
	 * 
	 * @return MM_PaymentServiceResponse indicating success or failure
	 */
	protected function _refundTransaction($transactionId,$shouldAttemptGatewayRefund=true) 
	{
		global $wpdb;
		
		//make sure we have a valid transaction id
		if (empty($transactionId))
		{
			return new MM_PaymentServiceResponse("Unable to process refund, invalid transaction id supplied",MM_PaymentServiceResponse::$ERROR);
		}
		
		//make sure the transaction exists
		$transactionRow = $wpdb->get_row($wpdb->prepare("SELECT * from ".MM_TABLE_TRANSACTION_LOG." where id = %s",$transactionId));
		if (is_null($transactionRow))
		{
			return new MM_PaymentServiceResponse("Unable to process refund, transaction does not exist",MM_PaymentServiceResponse::$ERROR);
		}
		
		//make sure its not already refunded
		if (!is_null($transactionRow->refund_id))
		{
			return new MM_PaymentServiceResponse("Transaction has already been refunded",MM_PaymentServiceResponse::$ERROR);
		}
		
		//determine where the transaction information is stored based on the type
		$transactionAmount = abs($transactionRow->amount);
		$gatewayRefundRequired = false;
		switch ($transactionRow->transaction_type)
		{
			case MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT:
			case MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT:
				$litleChargeQuery = "SELECT * from ".MM_TABLE_LITLE_CHARGES." WHERE id = %s";
				$litleChargeInfo = $wpdb->get_row($wpdb->prepare($litleChargeQuery,$transactionRow->payment_service_detail_id));
				$authNetChargeId = $litleChargeInfo->charge_id;
				$gatewayRefundRequired = true;
				break;
			case MM_TransactionLog::$TRANSACTION_TYPE_CHARGE:
			case MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_CHARGE:
				return new MM_PaymentServiceResponse("Unable to refund transaction: Not a payment",MM_PaymentServiceResponse::$ERROR);
				break;
			default:
				return new MM_PaymentServiceResponse("Unknown transaction type, unable to process refund",MM_PaymentServiceResponse::$ERROR);
		}
		
		if ($gatewayRefundRequired && $shouldAttemptGatewayRefund)
		{
			if (empty($authNetChargeId)) //necessary for both voids and credits
			{
				return new MM_PaymentServiceResponse("A configuration error was encountered during the attempt to void the transaction",MM_PaymentServiceResponse::$ERROR);
			}
			$litleCustomerInfo = $this->lookupCustomer(MM_Order::getUserIdByOrderId($litleChargeInfo->order_id));
			return $this->refundAuthNetCIMChargeId($litleCustomerInfo, $authNetChargeId, $litleChargeInfo->amount, $transactionId);
		}
		
		return new MM_PaymentServiceResponse(); //success
	}	
	
	
	/**
	 * Refunds a Litle charge, and logs the refund in the transaction table
	 * 
	 * @param array $litleCustomerInfo An array of Litle customer info to charge. 
	 * @param string $authNetChargeId The Litle identifier for the charge to be refunded
	 * @param float $refundAmount the amount to refund
	 * @param int $originalTransactionId The identifier for the MemberMouse transaction
	 * 
	 * @return MM_PaymentServiceResponse indicating success or failure
	 */
	protected function refundAuthNetCIMChargeId($litleCustomerInfo, $authNetChargeId, $refundAmount, $originalTransactionId)
	{
		global $wpdb;

		$litle = new LitleOnlineRequest();
		
		// attempt to issue a refund
		$transaction = new AuthorizeNetTransaction();
		$transaction->amount = $refundAmount;
		$transaction->transId = $authNetChargeId;
		$transaction->customerProfileId = $litleCustomerInfo["customer_id"];
		$transaction->customerPaymentProfileId = $litleCustomerInfo["payment_id"];

		$response = $litle->createCustomerProfileTransaction("Refund", $transaction);
		
		if(!$response->isOk())
		{
			// if refund fails, attempt to void the charge	
			$transaction = new AuthorizeNetTransaction();
			$transaction->transId = $authNetChargeId;
			$transaction->customerProfileId = $litleCustomerInfo["customer_id"];
			$transaction->customerPaymentProfileId = $litleCustomerInfo["payment_id"];
			
			$response = $litle->createCustomerProfileTransaction("Void", $transaction);
			$refundAmount = 0;
			if(!$response->isOk())
			{	
				return new MM_PaymentServiceResponse("Unable to issue a refund: {$response->getMessageText()}", MM_PaymentServiceResponse::$ERROR);
			}
		}
			
		//get original transaction details
		$originalTransactionInfo = $wpdb->get_row($wpdb->prepare("SELECT * FROM ".MM_TABLE_TRANSACTION_LOG." WHERE id=%s",$originalTransactionId));
		$transactionDescription = "Refund for transaction# {$originalTransactionId}";
		$transactionDate = MM_Utils::getCurrentTime();
		
		$response = MM_TransactionLog::createTransactionEntry($originalTransactionInfo->order_id,
				$originalTransactionInfo->order_item_id,
				$refundAmount,
				$originalTransactionInfo->currency,
				$transactionDescription,
				MM_TransactionLog::$TRANSACTION_TYPE_REFUND,
				false,
				$this->getId(),
				null,
				$transactionDate,
				$originalTransactionId);
		if (MM_Response::isSuccess($response))
		{
			$wpdb->query($wpdb->prepare("UPDATE ".MM_TABLE_TRANSACTION_LOG." SET refund_id = %s WHERE id = %s",$response->message,$originalTransactionId));
		}
		
		return new MM_PaymentServiceResponse();
	}
	
	
	public function getUrl()
	{
		$url = "https://www.testlitle.com/sandbox/communicator/online";
		
		switch($this->environment)
		{
			case MM_LitleService::$ENVIRONMENT_SANDBOX:
				$url = "https://www.testlitle.com/sandbox/communicator/online";
				break;
				
			case MM_LitleService::$ENVIRONMENT_PRELIVE:
				switch($this->urlType)
				{
					case MM_LitleService::$URL_TYPE_WHITELISTED:
						$url = "https://prelive.litle.com/vap/communicator/online";
						break;
						
					case MM_LitleService::$URL_TYPE_OPEN:
						$url = "https://transact-prelive.litle.com/vap/communicator/online";
						break;
				}
				break;
				
			case MM_LitleService::$ENVIRONMENT_PRODUCTION:
				switch($this->urlType)
				{
					case MM_LitleService::$URL_TYPE_WHITELISTED:
						$url = "https://payments.litle.com/vap/communicator/online";
						break;
				
					case MM_LitleService::$URL_TYPE_OPEN:
						$url = "https://transact.litle.com/vap/communicator/online";
						break;
				}
				break;
			
			case MM_LitleService::$ENVIRONMENT_POSTLIVE:
				switch($this->urlType)
				{
					case MM_LitleService::$URL_TYPE_WHITELISTED:
						$url = "https://postlive.litle.com/vap/communicator/online";
						break;
				
					case MM_LitleService::$URL_TYPE_OPEN:
						$url = "https://transact-postlive.litle.com/vap/communicator/online";
						break;
				}
				break;
		}
		
		return $url;
	}
	
	
	public function getEnvironment()
	{
		return $this->environment;
	}
	
	
	public function setEnvironment($environment)
	{
		$this->environment = $environment;
	}
	
	
	public function getUrlType()
	{
		return $this->urlType;
	}
	
	
	public function setUrlType($urlType)
	{
		$this->urlType = $urlType;
	}
	
	
	public function getReportGroup()
	{
		return $this->reportGroup;
	}
	
	
	public function setReportGroup($reportGroup)
	{
		$this->reportGroup = $reportGroup;
	}
	
	
	// Pre-Live Methods
	
	public function getPreLiveMerchantId()
	{
		return $this->preliveMerchantId;
	}
	
	
	public function setPreLiveMerchantId($merchantId)
	{
		$this->preliveMerchantId = $merchantId;
	}
	
	public function getPreLiveUsername()
	{
		return $this->preliveUsername;
	}
	
	
	public function setPreLiveUsername($username)
	{
		$this->preliveUsername = $username;
	}
	
	public function getPreLivePassword()
	{
		return $this->prelivePassword;
	}
	
	
	public function setPreLivePassword($password)
	{
		$this->prelivePassword = $password;
	}
	
	// Production Methods
	
	public function getProdMerchantId()
	{
		return $this->prodMerchantId;
	}
	
	
	public function setProdMerchantId($merchantId)
	{
		$this->prodMerchantId = $merchantId;
	}
	
	public function getProdUsername()
	{
		return $this->prodUsername;
	}
	
	
	public function setProdUsername($username)
	{
		$this->prodUsername = $username;
	}
	
	public function getProdPassword()
	{
		return $this->prodPassword;
	}
	
	
	public function setProdPassword($password)
	{
		$this->prodPassword = $password;
	}
	
	// Post-Live Methods
	
	public function getPostLiveMerchantId()
	{
		return $this->postliveMerchantId;
	}
	
	
	public function setPostLiveMerchantId($merchantId)
	{
		$this->postliveMerchantId = $merchantId;
	}
	
	public function getPostLiveUsername()
	{
		return $this->postliveUsername;
	}
	
	
	public function setPostLiveUsername($username)
	{
		$this->postliveUsername = $username;
	}
	
	public function getPostLivePassword()
	{
		return $this->postlivePassword;
	}
	
	
	public function setPostLivePassword($password)
	{
		$this->postlivePassword = $password;
	}
}
