/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 * 
 * 
 * MM_CardInfo is a value-object meant to store [transient] credit card information
 *
 */
class MM_CardInfo 
{
	public static $CARD_TYPE_INVALID = "invalid";
	public static $CARD_TYPE_VISA = "visa";
	public static $CARD_TYPE_MASTERCARD = "master";
	public static $CARD_TYPE_AMEX = "amex";
	public static $CARD_TYPE_DISCOVER = "discover";
	public static $CARD_TYPE_DINERS = "diners";
	public static $CARD_TYPE_JCB = "jcb";
	
	private $cardNumber = "";
	private $expirationMonth = "";
	private $expirationYear = "";
	private $cvv = "";
	
	private $testCard = false; //TODO: REFACTOR: SET ME TO FALSE BEFORE PRODUCTION
	
	
	/**
	 * Creates a new CardInfo object. Optional parameters allow it to be populated upon creation
	 * 
	 * @param String (optional) $cardNumber The credit card number
	 * @param String (optional) $expirationMonth The credit card expiration month. This value is not cast to int
	 * @param String (optional) $expirationYear The credit card expiration year. This value is not cast to int
	 * @param String (optional) $cvv The CVV/CVV2 security code. This value is not cast to int
	 */
	public function __construct($cardNumber="",$expirationMonth="",$expirationYear="",$cvv="")
	{
		$fields = array("cardNumber","expirationMonth","expirationYear","cvv");
		foreach ($fields as $field)
		{
			if (!empty($$field))
			{
				$this->$field = $$field;
			}
		}
	}
	
	
	/** Returns the card type based on the card number
	 * 
	 * @return String containing the card type
	 */
	public function getCardType()
	{	
		if(!empty($this->cardNumber))
		{
			$visaRegex = "/^4[0-9]{12}(?:[0-9]{3})?$/";
			$masterRegex = "/^5[1-5][0-9]{14}$/";
			$amexRegex = "/^3[47][0-9]{13}$/";
			$dinersRegex = "/^3(?:0[0-5]|[68][0-9])[0-9]{11}$/";
			$discoverRegex = "/^6(?:011|5[0-9]{2})[0-9]{12}$/";
			$jcbRegex = "/^(?:2131|1800|35\d{3})\d{11}$/";
		
			if(preg_match($visaRegex, $this->cardNumber)) 
			{
				return self::$CARD_TYPE_VISA;
			}
			
			if(preg_match($masterRegex, $this->cardNumber))
			{
				return self::$CARD_TYPE_MASTERCARD;
			}
			
			if(preg_match($amexRegex, $this->cardNumber))
			{
				return self::$CARD_TYPE_AMEX;
			}
			
			if(preg_match($dinersRegex, $this->cardNumber))
			{
				return self::$CARD_TYPE_DINERS;
			}
			
			if(preg_match($discoverRegex, $this->cardNumber))
			{
				return self::$CARD_TYPE_DISCOVER;
			}
			
			if(preg_match($jcbRegex, $this->cardNumber))
			{
				return self::$CARD_TYPE_JCB;
			}
		}
		
		return self::$CARD_TYPE_INVALID;
	}
	
	
	/**
	 * Returns the card number
	 * 
	 * @return String containing the card number
	 */
	public function getCardNumber()
	{
		return $this->cardNumber;
	}
	
	
	/**
	 * Set the card number
	 * 
	 * @param String $cardNumber The credit card number
	 */
	public function setCardNumber($cardNumber)
	{
		$this->cardNumber = $cardNumber;
	}
	
	
	/**
	 * Returns the expiration month
	 * 
	 * @return String representing the expiration month
	 */
	public function getExpirationMonth()
	{
		return $this->expirationMonth;
	}
	
	
	/**
	 * Sets the expiration month
	 * 
	 * @param String $expirationMonth The expiration month
	 */
	public function setExpirationMonth($expirationMonth)
	{
		$this->expirationMonth = $expirationMonth;
	}
	
	
	/**
	 * Returns the expiration year
	 * 
	 * @return String representing the expiration year
	 */
	public function getExpirationYear()
	{
		return $this->expirationYear;
	}
	
	
	/**
	 * Sets the expiration year
	 * 
	 * @param String $expirationYear
	 */
	public function setExpirationYear($expirationYear)
	{
		$this->expirationYear = $expirationYear;
	}
	
	
	/**
	 * Returns the cvv/cvv2 code
	 * 
	 * @return String representing the cvv/code
	 */
	public function getCVV()
	{
		return $this->cvv;
	}
	
	
	/**
	 * Set the cvv/cvv2 code
	 * 
	 * @param String $cvv
	 */
	public function setCVV($cvv)
	{
		$this->cvv = $cvv;
	}
	
	/**
	 * Checks to make sure the object has all of the required credit card information to conduct a transaction
	 * @param boolean $requireCVV (optional) Whether or not the cvv should be considered required. Defaults to true
	 * @return boolean value of true if all required information is set, false otherwise
	 */
	public function hasRequiredInfo($requireCVV=false)
	{
		$fields = array("cardNumber","expirationMonth","expirationYear");
		if ($requireCVV)
		{
			$fields[] = "cvv";
		}
		foreach ($fields as $field)
		{
			if (empty($this->$field))
			{
				return false;
			}
		}
		return true;
	}	
	
	
	/**
	 * Validates whether the MM_CardInfo object contains valid values for a credit card
	 * 
	 * @return boolean true if the information is present and valid, or a string error message if it does not
	 */
	public function validate()
	{
		if ($this->testCard)
		{
			//bypass validation to allow bogus values for testing
			return true;
		}
		
		if (!$this->hasRequiredInfo())
		{
			return "Not all credit card information was supplied";
		}
		
		$cardError = "";
		$currentYear = intval(date('Y'));
		if (empty($this->expirationMonth) || ($this->expirationMonth > 12) || ($this->expirationMonth < 1)
				|| empty($this->expirationYear) || ($this->expirationYear < $currentYear))
		{
			$cardError.="Please enter a valid expiration date\n";
		}
		
		if (strlen($this->cardNumber) < 10)
		{
			$cardError.="Please enter a valid card number\n";
		}
		
		return (empty($cardError))?true:$cardError;
	}
	
	
	/**
	 * Designates this as test card info, which relaxes the validation restrictions
	 * 
	 * @param boolean $isTest set to true if this is test card info, false otherwise
	 */
	public function setTestCard($isTest)
	{
		$this->testCard = ($isTest === true);
	}
}
