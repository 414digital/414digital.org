class MM_ReportDataRetriever
{
	
	//data generation statuses
	public static $DATA_PENDING_STATUS = "pending";
	public static $DATA_PROCESSING_STATUS = "processing";
	public static $DATA_READY_STATUS = "ready";
	public static $DATA_ERROR_STATUS = "error";
	
	//default timeout
	public static $DEFAULT_CACHE_TIMEOUT = 1200;
	
	public static $RESULTSET_TYPE_COMPOUND = "compound";

	
	/**
	 * Requests data to be used to supply a visual element. If the requested data is cached, it is retrieved from the cache 
	 * and returned, otherwise generation is started in the background
	 * 
	 * @param mixed $queryTarget The class that has the ability to generate the required data if its not in the cache
	 * @param string $queryIdentifier An identifier representing a specific query to be run
	 * @param array $params The params to supply to the method generating the query
	 * @param string $timeout (optional) The ttl for the cached data, defaults to the global timeout defined in the data retriever (1200 secs)
	 * @param boolean $asynchronous (optional) Whether or not the cache request should be handled by a separate process, defaults to true
	 * 
	 * @return MM_ReportResponse containing the results on success, a descriptive message if the status is error or not-ready
	 */
	public static function requestData($queryTarget, $queryIdentifier,$params,$timeout="",$asynchronous=true)
	{
		global $wpdb;
		$queryTarget = is_object($queryTarget)?get_class($queryTarget):$queryTarget;
		
		//order the parameters and json encode them
		$paramString = self::encodeParams($params);
		$paramHash = md5($paramString);
		
		$currentTime = MM_Utils::getCurrentTime();
		
		//now check the data cache for non-expired data matching the request
		$cacheQuery = $wpdb->prepare("SELECT * FROM ".MM_TABLE_REPORT_DATA_CACHE." WHERE query_target=%s AND query_token = %s AND ".
					  "param_hash = %s AND expiration_date > %s",$queryTarget, $queryIdentifier,$paramHash,$currentTime);
		$cacheData = $wpdb->get_row($cacheQuery);
		
		if (is_null($cacheData)) 
		{
			//cache miss
			if ($asynchronous)
			{
				$freshlyCached = false;
				if (is_null($cacheData))
				{
					$cacheResponse = self::createCacheRequest($queryTarget, $queryIdentifier,$params,$timeout);
					if (MM_ReportResponse::isNotReady($cacheResponse))
					{
						//request was just created.. delay to see if the results were immediately ready
						$freshlyCached = true;
						usleep(200000);
						$cacheData = $wpdb->get_row($cacheQuery);
					}
					else 
					{
						return $cacheResponse;
					}
				}
		
				if (is_null($cacheData) && $freshlyCached)
				{
					$returnVal = new MM_ReportResponse("Cache request succeeded", MM_ReportResponse::$NOT_READY);
					return  $returnVal;
				}
			}
			else 
			{
				//non-asynchronous - data needs to be retrieved immediately, and then cached for next hit
				$generationResponse = self::generateData($queryTarget, $queryIdentifier, $params, $timeout);	
				if (MM_ReportResponse::isSuccess($generationResponse))
				{
					$cacheData = $generationResponse->message;
				}
				else if (MM_ReportResponse::hasNoData($generationResponse))
				{
					//we can bail early, the front-end knows what to do with this response
					return $generationResponse;
				}
				else 
				{
					$cacheData = new stdClass();
					$cacheData->status = ($generationResponse instanceof MM_ReportResponse)?$generationResponse->type:self::$DATA_ERROR_STATUS;
				}
			}
		}
		
		//should be a status at this point
		if ($cacheData->status == self::$DATA_READY_STATUS) 
		{
			$response = new MM_ReportResponse();
			$response->message = unserialize($cacheData->query_data);
			if (($response->message === "") || (is_array($response->message) && (count($response->message) == 0)))
			{
				$response->type = MM_ReportResponse::$NO_DATA;
			}
			return $response;
		}
		else if (($cacheData->status == self::$DATA_PENDING_STATUS) || ($cacheData->status == self::$DATA_PROCESSING_STATUS))
		{
			//not ready, return status
			return new MM_ReportResponse("Data not yet available",MM_ReportResponse::$NOT_READY);
		}
		
		//error status
		$msg = isset($cacheData->query_data)?$cacheData->query_data:"Error generating data";
		return new MM_ReportResponse($msg,MM_ReportResponse::$ERROR);
	}
	
	
	/**
	 * Creates an entry in the report data cache table with a pending status, and then starts a background process
	 * responsible for populating that data
	 * 
	 * @param String $queryIdentifier An identifier designating the data that should be generated
	 * @param array $params The parameters to use when generating the requested data
	 * @param int $timeout (optional) how long the generated data is valid. If not set, defaults to 1200 secs (20 mins)
	 * 
	 * @return MM_ReportResponse success if all operations succeed, failure otherwise
	 */
	protected static function createCacheRequest($queryTarget, $queryIdentifier,$params,$timeout="")
	{
		global $wpdb;
		
		$timeout = empty($timeout)?self::$DEFAULT_CACHE_TIMEOUT:intval($timeout);
		$expirationDate = gmdate("Y-m-d H:i",strtotime("+{$timeout} seconds",MM_Utils::getCurrentTime("timestamp"))); //by default 1200 secs (30 mins)
		$encodedParams = self::encodeParams($params);
		$insertData = array(
				"query_target"    => $queryTarget,
				"query_token" 	  => $queryIdentifier,
				"query_params" 	  => self::encodeParams($params),
				"param_hash" 	  => md5($encodedParams),
				"status" 		  => self::$DATA_PENDING_STATUS,
				"expiration_date" => $expirationDate
		);
		$res = $wpdb->replace(MM_TABLE_REPORT_DATA_CACHE,$insertData);
		if ($res === false)
		{
			return new MM_ReportResponse("Could not create report data request",MM_ReportResponse::$ERROR);
		}
		else 
		{
			return self::startBackgroundProcess($wpdb->insert_id);
		}
	}
	
	
	/**
	 * Create a background process responsible for generating the data attached to a cache id
	 * 
	 * @param int $cacheId The id of the report cache data scan 
	 * @return MM_ReportResponse 'not ready' status if the request succeeds to start the background process, failure otherwise
	 */
	protected static function startBackgroundProcess($cacheId)
	{
		global $wpdb;
		if (is_null($cacheId))
		{
			return new MM_ReportResponse("Unable to start background process: No cache id provided",MM_ReportResponse::$ERROR);
		}
		$reportDataGeneratorURL = MM_PLUGIN_URL."/async/reportdatagenerator.php";
		$apiRow = $wpdb->get_row("SELECT * FROM ".MM_TABLE_API_KEYS." WHERE STATUS='1' LIMIT 1");
		if (is_null($apiRow))
		{
			return new MM_ReportResponse("Unable to start background process: No api keys available",MM_ReportResponse::$ERROR);
		}
		
		$response = wp_remote_post($reportDataGeneratorURL,array('blocking'=>'false',
																'body'=>array('apikey'    => $apiRow->api_key,
																			  'apisecret' => $apiRow->api_secret,
																			  'cacheId'   => $cacheId)
																)
									);
		if (is_wp_error($response))
		{
			return new MM_ReportResponse("Unable to start background process:".$response->get_error_message());
		}
		return new MM_ReportResponse("Background process started successfully",MM_ReportResponse::$NOT_READY);
	}
	
	
	/**
	 * Routes to the correct handler method for the query with the id $cacheId and the parameters contained within $params
	 * 
	 * @param String $queryTarget
	 * @param String $queryIdentifier
	 * @param array $params
	 * @param int $timeout
	 * 
	 * @return MM_ReportResponse containing the results on success, or an error message on failure
	 */
	public static function generateData($queryTarget, $queryIdentifier, $params,$timeout=1200)
	{
		$queryTarget = is_object($queryTarget)?get_class($queryTarget):$queryTarget;
		$resultsetResponse = call_user_func(array($queryTarget,"generateData"),$queryIdentifier,$params);
		if (MM_ReportDataset::isSuccess($resultsetResponse))
		{
			$dataset = $resultsetResponse->getPrimaryDataset();
			$cacheRequestResponse = self::cacheDataset($queryTarget,$queryIdentifier,$dataset->params,$dataset->data,$timeout);
			if ($resultsetResponse->datasetType == MM_ReportDataset::$COMPOUND_DATASET)
			{
				$dsArray = $resultsetResponse->getAdditionalDatasets();
				foreach ($dsArray as $dataset)
				{
					self::cacheDataset($queryTarget,$queryIdentifier,$dataset->params,$dataset->data,$timeout);
				}
			}
			return $cacheRequestResponse;
		}
		else if (MM_ReportDataset::hasNoData($resultsetResponse))
		{
			return $resultsetResponse;
		}
		else 
		{
			return new MM_ReportResponse("Error generating data for query {$queryTarget}::{$queryIdentifier} - {$resultsetResponse->message}",MM_ReportResponse::$ERROR);
		}			
	}
	
	
	protected static function cacheDataset($queryTarget, $queryIdentifier, $params, $data, $timeout=1200)
	{
		global $wpdb;
		
		$timeout = empty($timeout)?self::$DEFAULT_CACHE_TIMEOUT:$timeout;
		$encodedParams = self::encodeParams($params);
		$encodedData = serialize($data);
		$paramHash = md5($encodedParams);
		$expiration = date("Y-m-d H:i:s",strtotime("+{$timeout} seconds",MM_Utils::getCurrentTime("timestamp"))); //by default 1200 secs (30 mins)
		$res = $wpdb->replace(MM_TABLE_REPORT_DATA_CACHE,array(
							 "query_target"    => $queryTarget,
					   		 "query_token"     => $queryIdentifier,
							 "query_params"    => $encodedParams,
					   		 "param_hash"      => $paramHash,
							 "query_data"      => $encodedData,
							 "status"          => MM_ReportDataRetriever::$DATA_READY_STATUS,
		                	 "expiration_date" => $expiration));
		
		if ($res === false)
		{
			return new MM_ReportResponse("Could not store generated report dataset",MM_ReportResponse::$ERROR);
		}
		
		$cv = new stdClass(); //cached values
		$cv->query_target = $queryTarget;
		$cv->query_token = $queryIdentifier;
		$cv->query_params = $encodedParams;
		$cv->param_hash = $paramHash;
		$cv->query_data = $encodedData;
		$cv->status = MM_ReportDataRetriever::$DATA_READY_STATUS;
		$cv->expiration_date = $expiration;
		return new MM_ReportResponse($cv);
	}
	
	
	/**
	 * Takes a hashed array and produces a json-encoded string. 
	 * Equivalent arrays will produce the same string, regardless of the ordering of the contents
	 * The params array cannot contain || (double pipe) in the keys or values
	 * 
	 * @param array $params
	 * @return String containing the json-encoded contents, false on error
	 */
	public static function encodeParams($params)
	{
		if (!is_array($params))
		{
			return false;
		}
		
		foreach ($params as &$v)
		{
			if (is_array($v))
			{
				ksort($v);
			}
		}
		ksort($params);
		return json_encode($params);
	}
	
	
	/**
	 * Takes a string encoded with MM_ReportDataRetriever::encodeParams(..) and decodes it into a hashed array
	 *
	 * @param String $paramString The encoded string
	 * @return array of the decoded values, false on error
	 */
	public static function decodeParams($paramString)
	{
		return json_decode($paramString,true);
	}

	
	/**
	 * Deletes entries from the data cache
	 * 
	 * @param boolean $expiredOnly (optional) Determines whether only expired entries should be deleted, defaults to false
	 */
	public static function clearDataCache($expiredOnly=false)
	{
		global $wpdb;
		
		$sql = "DELETE FROM ".MM_TABLE_REPORT_DATA_CACHE.(($expiredOnly)?" WHERE expiration_date <= '".MM_Utils::getCurrentTime()."'":"");
		$wpdb->query($sql);
	}
}

