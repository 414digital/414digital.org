/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_MembersView extends MM_View
{	
	public static $TIME_PER_ORDER = 1.5;
	
	public static $MM_JSACTION_SEARCH = "search";
	public static $MM_JSACTION_RESET_FORM = "resetForm";
	public static $MM_JSACTION_STORE_SEARCH_STATE = "storeSearchState";
	public static $MM_JSACTION_CREATE_MEMBER = "createMember";
	

 	public function performAction($post) 
	{	
		$response = parent::performAction($post);
		
		if(!($response instanceof MM_Response))
		{
			switch($post[self::$MM_JSACTION]) 
			{
				case self::$MM_JSACTION_RESET_FORM:
					return $this->generateSearchForm($post);	
					
				case self::$MM_JSACTION_SEARCH:
					return $this->generateDataGrid($post);
					
				case self::$MM_JSACTION_STORE_SEARCH_STATE:
					return $this->storeSearchState($post);	
					
				case self::$MM_JSACTION_CREATE_MEMBER:
					return $this->createMember($post);
					
				case self::$MM_JSACTION_REMOVE:
					return $this->removeMember($post);
					
				default:
					return new MM_Response($response);
			}
		}
		else 
		{
			return $response;
		}
	}
	
 	public function search($post, MM_DataGrid $dg, $doGenerateCsv=false)
	{
		global $wpdb;
		
		$bundlesJoinSql = "";
		$bundlesColumnSql = "";
		$bundlesWhereSql = "";
		$bundleIds = "";
		
		$customFieldJoinSql = "";
		$customFieldColumnSql = "";
		$customFieldWhereSql = "";
		
		$customFieldJoinSql2 = "";
		$customFieldColumnSql2 = "";
		$customFieldWhereSql2 = "";
		
		if(!empty($post["mm_bundles"]))
		{
			$bundleIds = join(',' , $post["mm_bundles"]);
			$bundlesJoinSql = ",  ".MM_TABLE_APPLIED_BUNDLES." bundles ";
			$bundlesColumnSql = "";
			$bundlesWhereSql = " ((bundles.access_type_id=u.ID) ";
			$bundlesWhereSql .= " AND (bundles.bundle_id IN ( {$bundleIds} )) ";
			$bundlesWhereSql .= " AND (bundles.access_type='".MM_AppliedBundle::$ACCESS_TYPE_USER."') ";
			$bundlesWhereSql .= " AND (bundles.status = '".MM_Status::$ACTIVE."' OR bundles.status = '".MM_Status::$PENDING_CANCELLATION."')) ";
		}
		
		if(!empty($post["mm_member_custom_field"]))
		{
			$customFieldJoinSql = ",  ".MM_TABLE_CUSTOM_FIELD_DATA." cfd ";
			$customFieldColumnSql = ", cfd.value as custom_field_value ";
			$customFieldWhereSql = " ((cfd.user_id=u.id) AND (cfd.custom_field_id='{$post["mm_member_custom_field"]}') AND (cfd.value LIKE '%".$post["mm_member_custom_field_value"]."%')) ";
		}
		
		if(!empty($post["mm_member_custom_field2"]))
		{
			$customFieldJoinSql2 = ",  ".MM_TABLE_CUSTOM_FIELD_DATA." cfd2 ";
			$customFieldColumnSql2 = ", cfd2.value as custom_field_value2 ";
			$customFieldWhereSql2 = " ((cfd2.user_id=u.id) AND (cfd2.custom_field_id='{$post["mm_member_custom_field2"]}') AND (cfd2.value LIKE '%".$post["mm_member_custom_field2_value"]."%')) ";
		}
		
		$sqlFrom = " FROM ".$wpdb->users." u, ".MM_TABLE_USER_DATA." mmu ".$customFieldJoinSql.$customFieldJoinSql2.$bundlesJoinSql;
		
		$filters = "";
		$newFilter = "";
		
		if(!empty($post['mm_from_date'])) 
		{
			$post['mm_from_date'] = $post['mm_from_date']." 0:00:00";
			$newFilter = "u.user_registered >= '".date("Y-m-d G:i:s", strtotime($post['mm_from_date']))."'";
			$filters = $this->addFilter($filters, $newFilter);
		}
		
		if(!empty($post['mm_to_date'])) 
		{
			$post['mm_to_date'] = $post['mm_to_date']." 23:59:59";
			$newFilter = "u.user_registered <= '".date("Y-m-d G:i:s", strtotime($post['mm_to_date']))."'";
			$filters = $this->addFilter($filters, $newFilter);
		}
		
		// Member ID
		if(!empty($post['mm_member_id'])) 
		{
			$filters = $this->addFilter($filters, "u.id = '".$post["mm_member_id"]."'");
		}
		
		// First Name
		if(!empty($post['mm_first_name'])) 
		{
			$filters = $this->addFilter($filters, "mmu.first_name LIKE '%".$post["mm_first_name"]."%'");
		}
		
		// Last Name
		if(!empty($post['mm_last_name'])) 
		{
			$filters = $this->addFilter($filters, "mmu.last_name LIKE '%".$post["mm_last_name"]."%'");
		}
		
		// Email
		if(!empty($post['mm_email'])) 
		{
			$filters = $this->addFilter($filters, "u.user_email LIKE '%".$post["mm_email"]."%'");
		}
		
		global $current_user;
		$employee = MM_Employee::findByUserId($current_user->ID);
		
		// Membership Level IDs
		$membershipFilterSet = false;
		if(!empty($post['mm_memberships'])) 
		{
			// make sure current employee has access to the requested membership IDs
			if($employee->isValid())
			{
				$filteredList = array();
				
				foreach($post["mm_memberships"] as $id)
				{
					if($employee->hasAccess(MM_Employee::$ACCESS_TYPE_MEMBERSHIP, $id))
					{
						$filteredList[] = $id;
					}
				}
				
				$post["mm_memberships"] = $filteredList;
			}
			
			if(count($post["mm_memberships"]) > 0)
			{
				$membershipFilterSet = true;
				$newFilter = "mmu.membership_level_id IN (".join(',' , $post["mm_memberships"]).")";
				$filters = $this->addFilter($filters, $newFilter);
			}
		}
		
		// filter membership IDs to only include those the current employee has access to
		if(!$membershipFilterSet && $employee->isValid())
		{
			$membershipRestrictions = $employee->getAccessRescrictions(MM_Employee::$ACCESS_TYPE_MEMBERSHIP);
				
			if(count($membershipRestrictions) > 0)
			{
				$newFilter = "mmu.membership_level_id IN (".join(',' , $membershipRestrictions).")";
				$filters = $this->addFilter($filters, $newFilter);
			}
		}
		
		// Member Status
		if(!empty($post['mm_member_status_types'])) 
		{
			$newFilter = "mmu.status IN (".join(',' , $post["mm_member_status_types"]).")";
			
			if($newFilter != "") 
			{
				$filters = $this->addFilter($filters, $newFilter);
			}
		}
		
		// bundles
		if(!empty($bundlesWhereSql))
		{
			$filters = $this->addFilter($filters, $bundlesWhereSql);
		}
		
		// custom fields
		if(!empty($customFieldWhereSql))
		{
			$filters = $this->addFilter($filters, $customFieldWhereSql);
		}
		
		if(!empty($customFieldWhereSql2))
		{
			$filters = $this->addFilter($filters, $customFieldWhereSql2);
		}
		
		$sqlWhere = " WHERE u.ID = mmu.wp_user_id";
		
		if($filters != "") 
		{
			$sqlWhere .= " AND ".$filters;
		}
		
		if(isset($dg->sortBy) && !is_null($dg->sortBy) && !empty($dg->sortBy)) 
		{
			$mmUserDataColumns = array("membership_level_id", "status", "last_name", "phone", "last_login_date");
			$tableName = (in_array($dg->sortBy, $mmUserDataColumns)) ? "mmu" : "u";
			$sqlGroupBy = " ORDER BY {$tableName}.{$dg->sortBy} {$dg->sortDir} ";
		}
		
		$sqlResultCount = "select count(distinct u.ID) as total ";
		$sqlResultCount .= $sqlFrom;
		$sqlResultCount .= $sqlWhere;
		$countRow = $wpdb->get_row($sqlResultCount);
		
		if($countRow->total > 0) 
		{
			$sql = "select u.id, '{$countRow->total}' as total, u.user_registered, u.user_email, ";
			$sql .= "mmu.membership_level_id, mmu.status, mmu.first_name, mmu.last_name, mmu.phone, mmu.last_login_date ";
			if($doGenerateCsv)
			{
				$sql .= ", mmu.billing_address1, mmu.billing_city, mmu.billing_state, mmu.billing_postal_code, mmu.billing_country ";
				$sql .= ", mmu.shipping_address1, mmu.shipping_city, mmu.shipping_state, mmu.shipping_postal_code, mmu.shipping_country ";
			}
			$sql .= " ".$customFieldColumnSql;
			$sql .= " ".$customFieldColumnSql2;
		}
		else 
		{
			return array();
		}
		
		$sql .= $sqlFrom;
		$sql .= $sqlWhere;
		$sql .= $sqlGroupBy;
		
		if(!$doGenerateCsv)
		{
			$sql .= $dg->getLimitSql();
			$batch_size = $dg->resultSize;
		}
		else 
		{
			$batch_size = 50; //larger batch should be more efficient for full result sets	
		}
		
		$rows = $wpdb->get_results($sql, OBJECT_K);
		
		// Execute additional sub-queries on the result set in batches
		$i=0;
		$id_batch = array();
		foreach ($rows as $id=>$member)
		{
			$id_batch[] = $id;
			if ((++$i) >= $batch_size) 
			{
				$userIds = implode(",",$id_batch);
				$sql = $this->buildAppliedBundlesSQL($userIds, $bundleIds);
				$batchRows = $wpdb->get_results($sql, ARRAY_A);
				foreach ($batchRows as $batchRowNum=>$batchInfo)
				{
					$memberId = $batchInfo['access_type_id'];
					foreach ($batchInfo as $propName=>$propValue)
					{
						$rows[$memberId]->$propName = $propValue;
					}
				}
				$id_batch = array();
			}
		}
		
		if (!empty($id_batch))
		{
			$userIds = implode(",",$id_batch);
			$sql = $this->buildAppliedBundlesSQL($userIds, $bundleIds);
			$batchRows = $wpdb->get_results($sql, ARRAY_A);
			foreach ($batchRows as $batchRowNum=>$batchInfo)
			{
				$memberId = $batchInfo['access_type_id'];
				foreach ($batchInfo as $propName=>$propValue)
				{
					$rows[$memberId]->$propName = $propValue;
				}
			}
		}
		
		return array_values($rows);
	}
	
	/**
	 * This method create the SQL to execute to get the bundles applied to a particular set of users. 
	 * If the $bundleIds parameter is set, it will also limit the results to a specific group of bundles.
	 * @param String $userIds comma-delimiated list of user IDs 
	 * @param String $bundleIds comma-deliminated list of bundle IDs
	 */
	private function buildAppliedBundlesSQL($userIds, $bundleIds)
	{
		$sql = "SELECT access_type_id, group_concat(bundle_id) AS bundles FROM ".MM_TABLE_APPLIED_BUNDLES;
		$sql .= " WHERE (access_type = '".MM_AppliedBundle::$ACCESS_TYPE_USER."') AND (access_type_id IN ({$userIds})) ";
		$sql .= " AND (status = '".MM_Status::$ACTIVE."' OR status = '".MM_Status::$PENDING_CANCELLATION."') ";
		
		if(!empty($bundleIds))
		{
			$sql .= " AND (bundle_id IN ({$bundleIds})) ";
		}
		
		$sql .= " GROUP BY access_type_id;";
		return $sql;
	}
	
	private function addFilter($filters, $newFilter) 
	{
		if($filters == "") {
			$filters = " ".$newFilter;
		}
		else if($newFilter != "") {
			$filters .= " AND ".$newFilter;
		}
		
		return $filters;
	}
	
	private function storeSearchState($post) 
	{
		if(isset($post["mm_show_search"])) 
		{
			if(isset($post["mm_admin_id"]))
			{
				$optionName = MM_OptionUtils::$OPTION_KEY_SHOW_MBRS_SEARCH."-".$post["mm_admin_id"];
				MM_OptionUtils::setOption($optionName, $post["mm_show_search"]);
				return new MM_Response();
			}
			else
			{
				return new MM_Response("Unable to store search state. Couldn't find current user ID.", MM_Response::$ERROR);
			}
		}
		else
		{
			return new MM_Response("Unable to store search state. Missing current state value.", MM_Response::$ERROR);
		}
	}
	
	public function createMember($post) 
	{
		if(isset($post["mm_new_membership"]) && isset($post["mm_new_email"]))
		{
			$membership = new MM_MembershipLevel($post["mm_new_membership"]);
			if(!$membership->isValid())
			{
				return new MM_Response("Error creating member. Membership level with ID '{$post["mm_new_membership"]}' is invalid.", MM_Response::$ERROR);
			}
			
			$user = MM_User::findByEmail($post["mm_new_email"]);
			
			if(!$user->isValid())
			{
				$user = new MM_User();
				$user->setStatus(MM_Status::$PENDING_ACTIVATION);
				$user->setStatusMessage("Customer account created by administrator using the Create Member tool but not completed.");
			}
			
			$user->setEmail($post["mm_new_email"]);
			
			if(isset($post["mm_new_first_name"]))
			{
				$user->setFirstName($post["mm_new_first_name"]);
			}
			
			if(isset($post["mm_new_last_name"]))
			{
				$user->setLastName($post["mm_new_last_name"]);
			}
			
			if(isset($post["mm_new_phone"]))
			{
				$user->setPhone($post["mm_new_phone"]);
			}
			
			if(isset($post["mm_new_password"]))
			{
				$user->setPassword($post["mm_new_password"]);
			}
			
			$result = $user->commitData();
			
			if(MM_Response::isSuccess($result))
			{
				return MM_AccessControlEngine::assignMembershipToUser($user, $membership);
			}
			else
			{
				return $result;
			}
		}
		else
		{
			return new MM_Response("Error creating member. Membership level and email address are required.", MM_Response::$ERROR);
		}
	}
	
	private function removeMember($post) 
	{
		$user = new MM_User($post["id"]);
		
		if($user->isValid()) 
		{
			$result = $user->delete();
			
			return $result;
		}
		
		return new MM_Response("Unable to delete member. No ID specified.", MM_Response::$ERROR);
	}
	
	public function generateSearchForm($post=null)
	{
		return MM_TEMPLATE::generate(MM_MODULES."/members.form.php", $post);
	}
	
	public function generateDataGrid($post=null)
	{
		return MM_TEMPLATE::generate(MM_MODULES."/members.datagrid.php", $post);
	}
 }
