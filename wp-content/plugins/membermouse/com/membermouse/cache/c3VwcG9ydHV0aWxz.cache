/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_SupportUtils
{
	public static function hasEmailSupport()
	{
		if(MM_MemberMouseService::hasPermission(MM_MemberMouseService::$SUPPORT_EMAIL))
		{
			return true;
		}
		return false;
	}
	
	public static function hasPhoneSupport()
	{
		if(MM_MemberMouseService::hasPermission(MM_MemberMouseService::$SUPPORT_PHONE))
		{
			return true;
		}
		return false;
	}
	
	public static function getSupportPin()
	{
		$pin = "";
		
		if(self::hasPhoneSupport())
		{
			$pin .= "P";
		}
		
		if(self::hasEmailSupport())
		{
			$pin .= "E";
		}
		
		$license = new MM_License();
		
		if($license->isValid())
		{
			$pin .= $license->getId();
			return $pin;
		}
		else
		{
			return "";
		}
	}
	
	public static function supportMenuItem($module)
	{
		$url = "https://membermouse.uservoice.com";
		
		switch($module)
		{
			case MM_MODULE_API:
				$url .= "/search?filter=merged&query=api";
				break;
				
			case MM_MODULE_PUSH_NOTIFICATIONS:
				$url .= "/search?filter=merged&query=push+notifications";
				break;
				
			case MM_MODULE_WORDPRESS_HOOKS:
				$url .= "/search?filter=merged&query=wordpress+hooks";
				break;
				
			case MM_MODULE_PHP_INTERFACE:
				$url .= "/search?filter=merged&query=php+interface";
				break;
				
			case MM_MODULE_PAYMENT_METHODS:
				$url .= "/search?filter=merged&query=payment+methods";
				break;
				
			case MM_MODULE_TEST_DATA:
				$url .= "/search?filter=merged&query=test+data";
				break;
				
			case MM_MODULE_CHECKOUT_OTHER_SETTINGS:
				$url .= "/search?filter=merged&query=checkout+settings";
				break;
				
			case MM_MODULE_CANCELLATION_METHOD:
				$url .= "/search?filter=merged&query=cancellation+method";
				break;
				
			case MM_MODULE_LIMELIGHT_PRODUCTS:
			case MM_MODULE_LIMELIGHT_SHIPPING_METHODS:
				$url .= "/search?filter=merged&query=lime+light";
				break;
				
			case MM_MODULE_AFFILIATE_INTEGRATION:
				$url .= "/search?filter=merged&query=affiliate+integration";
				break;
				
			case MM_MODULE_COMMISSION_PROFILES:
				$url .= "/search?filter=merged&query=commission+profiles";
				break;
				
			case MM_MODULE_AFFILIATE_TRACKING:
				$url .= "/search?filter=merged&query=affiliate+tracking";
				break;
				
			case MM_MODULE_EMAIL_INTEGRATION:
				$url .= "/search?filter=merged&query=email+integration";
				break;
				
			case MM_EMAIL_TEMPLATES:
				$url .= "/search?filter=merged&query=email+templates";
				break;
				
			case MM_MODULE_MEMBERSHIP_LEVELS:
				$url .= "/search?filter=merged&query=membership+levels";
				break;
				
			case MM_MODULE_BUNDLES:
				$url .= "/search?filter=merged&query=bundles";
				break;
				
			case MM_MODULE_PRODUCTS:
				$url .= "/search?filter=merged&query=products";
				break;
				
			case MM_MODULE_COUPONS:
				$url .= "/search?filter=merged&query=coupons";
				break;
				
			case MM_MODULE_CUSTOM_FIELDS:
				$url .= "/search?filter=merged&query=custom+fields";
				break;
				
			case MM_MODULE_COUNTRIES:
				$url .= "/search?filter=merged&query=countries";
				break;
				
			case MM_MODULE_SHIPPING:
				$url .= "/search?filter=merged&query=shipping+methods";
				break;
				
			case MM_MODULE_FREE_MEMBER_FORM:
				$url .= "/search?filter=merged&query=free+member+webform";
				break;
				
			case MM_MODULE_LOGIN_FORM:
				$url .= "/search?filter=merged&query=login+webform";
				break;
				
			case MM_MODULE_LOGS:
				$url .= "/search?filter=merged&query=log";
				break;
				
			case MM_MODULE_ACTIVITY_LOG:
			case MM_MODULE_MEMBER_DETAILS_ACTIVITY_LOG:
				$url .= "/search?filter=merged&query=activity+log";
				break;
				
			case MM_MODULE_EMPLOYEES:
				$url .= "/search?filter=merged&query=employees";
				break;
				
			case MM_MODULE_DRIP_CONTENT_SCHEDULE:
				$url .= "/search?filter=merged&query=drip+content+schedule";
				break;
			
			case MM_MODULE_MEMBER_DETAILS_GENERAL:
				$url .= "/search?filter=merged&query=manage+member+general";
				break;
				
			case MM_MODULE_MEMBER_DETAILS_ACCESS_RIGHTS:
				$url .= "/search?filter=merged&query=manage+member+access+rights";
				break;
			
			case MM_MODULE_MEMBER_DETAILS_SUBSCRIPTIONS:
				$url .= "/search?filter=merged&query=manage+member+subscriptions";
				break;
				
			case MM_MODULE_MEMBER_DETAILS_TRANSACTION_HISTORY:
				$url .= "/search?filter=merged&query=manage+member+transaction+history";
				break;
				
			case MM_MODULE_MEMBER_DETAILS_GIFT_HISTORY:
				$url .= "/search?filter=merged&query=manage+member+gift+history";
				break;
				
			case MM_MODULE_MEMBER_DETAILS_CUSTOM_FIELDS:
				$url .= "/search?filter=merged&query=manage+member+custom+fields";
				break;
				
			case MM_MODULE_IMPORT_WIZARD:
				$url .= "/search?filter=merged&query=import+wizard";
				break;
				
			case MM_MODULE_DUPLICATE_SUBSCRIPTION_TOOL:
				$url .= "/search?filter=merged&query=duplicate+subscriptions";
				break;
				
			case MM_MODULE_EXTENSIONS:
				$url .= "/search?filter=merged&query=extensions";
				break;
				
			case MM_MODULE_OTHER_SETTINGS:
				$url .= "/search?filter=merged&query=general+settings";
				break;
				
			case MM_MODULE_VERSION_HISTORY:
			case MM_MODULE_REPAIR_MEMBERMOUSE:
			case MM_MODULE_REPAIR_INSTALL:
				break;
		}
		
		echo "<li class=\"dropdown right\">";
		echo "<a href=\"{$url}\" target=\"_blank\"><i class=\"fa fa-support\"></i> Need help?</a>";
		
		if(self::hasEmailSupport() || self::hasPhoneSupport())
		{
			echo "<ul>";
			
			echo "<li><a href=\"{$url}\" target=\"_blank\"><i class=\"fa fa-support\"></i> Support Center</a></li>";
				
			if(self::hasEmailSupport())
			{
				echo "<li><a href=\"http://support.membermouse.com/knowledgebase/articles/417246\" target=\"_blank\"><i class=\"fa fa-envelope\"></i> Email Us</a></li>";
			}
			
			if(self::hasPhoneSupport())
			{
				echo "<li><a href=\"#\"><i class=\"fa fa-phone\"></i> (512) 630-2219</a></li>";
			}
			
			echo "</ul>";
		}
		
		echo "</li>";
	}
}
