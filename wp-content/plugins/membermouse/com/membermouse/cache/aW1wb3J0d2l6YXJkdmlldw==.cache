/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_ImportWizardView extends MM_View
{	
	public static $REQUIRED_NUM_COLUMNS = 23;
	public static $IMPORT_SOURCE_COMPUTER = "computer";
	public static $IMPORT_SOURCE_URL = "url";
	
	private $importFile = "";
	private $newMemberCount = 0;
	private $updatedMemberCount = 0;
	private $membershipLevelId = 0;
	private $membership;
	
	public function import($post)
	{
		$mtime = explode(" ", microtime());
		$executionStartTime = $mtime[1] + $mtime[0];
		$executionStatus = new MM_Response();
		
		$this->printLine("<textarea id=\"mm-import-results-log\" style=\"width: 700px; height: 400px; font-family: courier; font-size: 12px; margin-top:20px;\">");
		
		if(isset($post["mm-import-file-source"]))
		{
			$importSource = $post["mm-import-file-source"];
			
			switch($importSource)
			{
				case self::$IMPORT_SOURCE_COMPUTER:
					if(isset($post["mm-import-file-from-computer"]))
					{
						$this->importFile = $post["mm-import-file-from-computer"];
						
						if(!preg_match("/(\.csv)$/", strtolower($this->importFile)))
						{
							$executionStatus = new MM_Response("Invalid file extension on '{$this->importFile}'. Must be .csv.", MM_Response::$ERROR);
						}
					}
					else
					{
						$executionStatus = new MM_Response("Missing import file", MM_Response::$ERROR);
					}
					break;
					
				case self::$IMPORT_SOURCE_URL:
					if(isset($post["mm-import-file-from-url"]))
					{
						$this->printLine("Downloading import file from URL '{$post["mm-import-file-from-url"]}'... ");
						$this->importFile = download_url($post["mm-import-file-from-url"]);
						
						if($this->importFile instanceof WP_Error)
						{
							$executionStatus = new MM_Response("Error downloading import file.", MM_Response::$ERROR);
						}
						else
						{
							$this->printLine("complete\n\n");
							
							if(!preg_match("/(\.csv)$/", strtolower($post["mm-import-file-from-url"])))
							{
								$executionStatus = new MM_Response("Invalid file extension on '{$this->importFile}'. Must be .csv.", MM_Response::$ERROR);
							}
						}
					}
					else
					{
						$executionStatus = new MM_Response("Missing import file", MM_Response::$ERROR);
					}
					break;
					
				default:
					$executionStatus = new MM_Response("Invalid import file source '{$post["mm-import-file-source"]}'", MM_Response::$ERROR);
					break;
			}
		}
		else
		{
			$executionStatus = new MM_Response("Missing import file source", MM_Response::$ERROR);
		}
		
		if(MM_Response::isSuccess($executionStatus))
		{
			if(isset($post["mm-membership-selector"]))
			{
				$this->membershipLevelId = $post["mm-membership-selector"];
				
				$this->membership = new MM_MembershipLevel($this->membershipLevelId);
				
				if(!$this->membership->isValid())
				{
					$executionStatus = new MM_Response("Invalid Membership level ID '{$this->membershipLevelId}'.", MM_Response::$ERROR);
				}
			}
			else
			{
				$executionStatus = new MM_Response("Membership level ID is required.", MM_Response::$ERROR);
			}
			
			if(MM_Response::isSuccess($executionStatus))
			{
				if(isset($post["mm-send-welcome-email"]) && $post["mm-send-welcome-email"] == "on")
				{
					$this->doImport(true);
				}
				else 
				{
					$this->doImport(false);
				}
			}
		}
		
		$this->printLine("</textarea>");

		if(MM_Response::isSuccess($executionStatus))
		{
			$mtime = explode(" ", microtime());
			$endtime = $mtime[1] + $mtime[0];
			$totalExecutionTime = round(($endtime - $executionStartTime), 2);
			
			unlink($this->importFile);
			
			$resultsHtml = "<script>";
			$resultsHtml .= "jQuery(\"#mm-import-progress-message\").html(\"IMPORT COMPLETED SUCCESSFULLY ({$totalExecutionTime} secs)\");
			";
			$resultsHtml .= "jQuery(\"#mm-progressbar-container\").hide();
			";
			$resultsHtml .= "jQuery(\"#mm-results-container\").html('";
			$resultsHtml .= "<p>{$this->newMemberCount} members imported</p>";
			$resultsHtml .= "<p>{$this->updatedMemberCount} members updated</p>";
			$resultsHtml .= "<p><a class=\"mm-ui-button green\" href=\"".MM_Utils::constructPageUrl()."\">Import More Members</a></p>";
			$resultsHtml .= "');
			";
			$resultsHtml .= "</script>";
		}
		else
		{
			$resultsHtml = "<script>";
			$resultsHtml .= "jQuery(\"#mm-import-progress-message\").html(\"IMPORT FAILED\");
			";
			$resultsHtml .= "jQuery(\"#mm-progressbar-container\").hide();
			";
			$resultsHtml .= "jQuery(\"#mm-import-results-log\").hide();
			";
			$resultsHtml .= "jQuery(\"#mm-results-container\").html('";
			$resultsHtml .= "<p>Fatal Error: {$executionStatus->message}</p>";
			$resultsHtml .= "<p><a class=\"mm-ui-button\" href=\"".MM_Utils::constructPageUrl()."\">Try Again</a></p>";
			$resultsHtml .= "');
			";
			$resultsHtml .= "</script>";
		}
		
		$this->printLine($resultsHtml);
	}
	
	private function doImport($doSendWelcomeEmail)
	{
		$headerSkipped = false;
		$crntRow = 0;
	 	$customFieldIds = array();
		
	 	ini_set('auto_detect_line_endings', true);
	 	
		if(($handle = fopen($this->importFile, "r")) !== false)
		{
			while(($csvData = fgetcsv($handle, 1000, ",")) !== false)
			{
				$crntColumnCount = count($csvData);
				$crntRow++;
		
				if(!$headerSkipped)
				{
					// grab custom field IDs
					if($crntColumnCount > self::$REQUIRED_NUM_COLUMNS)
					{
						for($i = self::$REQUIRED_NUM_COLUMNS; $i < $crntColumnCount; $i++)
						{
							if(preg_match("/(custom)/", strtolower($csvData[$i])))
							{
								$fieldId = preg_replace("/[^0-9]+/", "", $csvData[$i]);
								$customFieldIds[$i] = $fieldId;
							}
						}
					}
		
					$headerSkipped = true;
					continue;
				}
		
				$this->printLine("ROW {$crntRow}: ");
		
				if(intval($crntColumnCount) < self::$REQUIRED_NUM_COLUMNS)
				{
					$this->printLine("ERROR: Invalid column count of {$crntColumnCount} found. There should be at least ".self::$REQUIRED_NUM_COLUMNS." columns in each row.\n");
					continue;
				}
		
				$rowData = $this->parseRowData($csvData);
		
				if(!isset($rowData->email) || empty($rowData->email))
				{
					$this->printLine("ERROR: Email address is required.\n");
					continue;
				}
		
				$user = MM_User::findByEmail($rowData->email);
				
				if($user->isValid())
				{
					$isUpdate = true;
					
					// determine if this is just a WordPress user, if so, create a row in MM user data table
					// so that the update goes through successfully
					global $wpdb;
					$sql = "SELECT * FROM ".MM_TABLE_USER_DATA." WHERE wp_user_id='{$user->getId()}' LIMIT 1;";
					$mmUserData = $wpdb->get_row($sql);
					
					if(!$mmUserData)
					{
						$mmUserData = array();
						$mmUserData["wp_user_id"] = $user->getId();
						$result = $wpdb->insert(MM_TABLE_USER_DATA, $mmUserData);
						
						$this->printLine("MIGRATING EXISTING WORDPRESS USER '{$rowData->email}':\n");
					}
					else 
					{
						$this->printLine("UPDATING EXISTING MEMBER '{$rowData->email}':\n");
					}
				}
				else
				{
					$isUpdate = false;
					$this->printLine("ADDING NEW MEMBER '{$rowData->email}':\n");
					$user->setImportedFlag(true);
				}
		
				// set fields on user object
				$user->setEmail($rowData->email);
				$user->setMembershipId($this->membershipLevelId);

				if(isset($rowData->status) && !empty($rowData->status))
				{
					// only set status if it's valid
					if(MM_Status::getName($rowData->status) != "")
					{
						$user->setStatus($rowData->status);
					}
				}
				
				if($doSendWelcomeEmail)
				{
					if($user->getStatus() == MM_Status::$ACTIVE)
					{
						$user->setSendWelcomeEmailFlag(true);
					}
				}
				else
				{
					$user->setSendWelcomeEmailFlag(false);
				}

				if(isset($rowData->username) && !empty($rowData->username))
				{
					$user->setUsername($rowData->username);
				}
				if(isset($rowData->firstName) && !empty($rowData->firstName))
				{
					$user->setFirstName($rowData->firstName);
				}
				if(isset($rowData->lastName) && !empty($rowData->lastName))
				{
					$user->setLastName($rowData->lastName);
				}
				if(isset($rowData->phone) && !empty($rowData->phone))
				{
					$user->setPhone($rowData->phone);
				}
				if(isset($rowData->registrationDate) && !empty($rowData->registrationDate))
				{
					$timestamp = strtotime($rowData->registrationDate);
			
					if($timestamp != -1)
					{
						$user->setRegistrationDate(date("Y-m-d", $timestamp));
					}
				}
				if($this->membership->doesExpire())
				{
					if(isset($rowData->expirationDate) && !empty($rowData->expirationDate))
					{
						$timestamp = strtotime($rowData->expirationDate);
							
						if($timestamp != -1)
						{
							$expirationDate = date("Y-m-d", $timestamp);
						}
					}
					else 
					{
						// set expiration date based on start date
						if(isset($rowData->registrationDate) && !empty($rowData->registrationDate))
						{
							$timestamp = strtotime($rowData->registrationDate);
								
							if($timestamp != -1)
							{
								$startDate = date("Y-m-d", $timestamp);
							}
							else 
							{
								$startDate = MM_Utils::getCurrentTime();
							}
						}
						else 
						{
							$startDate = MM_Utils::getCurrentTime();
						}
						
						$expirationDate = $this->membership->getExpirationDate($startDate);
					}
					
					$user->setExpirationDate($expirationDate);
				}
				if(isset($rowData->password) && !empty($rowData->password))
				{
					// only set password for new members
					if(!$isUpdate)
					{
						$user->setPassword($rowData->password);
					}
				}
				if(isset($rowData->billingAddress) && !empty($rowData->billingAddress))
				{
					$user->setBillingAddress($rowData->billingAddress);
				}
				if(isset($rowData->billingCity) && !empty($rowData->billingCity))
				{
					$user->setBillingCity($rowData->billingCity);
				}
				if(isset($rowData->billingState) && !empty($rowData->billingState))
				{
					$user->setBillingState($rowData->billingState);
				}
				if(isset($rowData->billingZip) && !empty($rowData->billingZip))
				{
					$user->setBillingZipCode($rowData->billingZip);
				}
				if(isset($rowData->billingCountry) && !empty($rowData->billingCountry))
				{
					$user->setBillingCountry($rowData->billingCountry);
				}
				if(isset($rowData->shippingAddress) && !empty($rowData->shippingAddress))
				{
					$user->setShippingAddress($rowData->shippingAddress);
				}
				if(isset($rowData->shippingCity) && !empty($rowData->shippingCity))
				{
					$user->setShippingCity($rowData->shippingCity);
				}
				if(isset($rowData->shippingState) && !empty($rowData->shippingState))
				{
					$user->setShippingState($rowData->shippingState);
				}
				if(isset($rowData->shippingZip) && !empty($rowData->shippingZip))
				{
					$user->setShippingZipCode($rowData->shippingZip);
				}
				if(isset($rowData->shippingCountry) && !empty($rowData->shippingCountry))
				{
					$user->setShippingCountry($rowData->shippingCountry);
				}
		
				$result = $user->commitData();
		
				if(MM_Response::isError($result))
				{
					$this->printLine("\tERROR ".(($isUpdate) ? "UPDATING" : "ADDING")." MEMBER: ".$result->message."\n");
					continue;
				}
				else
				{
					if($isUpdate)
					{
						$this->updatedMemberCount++;
					}
					else
					{
						$this->newMemberCount++;
					}
				
					$this->printLine("\tMEMBER ".(($isUpdate) ? "UPDATED" : "ADDED")." SUCCESSFULLY\n");
				}
		
				// add custom data
				if($crntColumnCount > self::$REQUIRED_NUM_COLUMNS)
				{
					for($i = self::$REQUIRED_NUM_COLUMNS; $i < $crntColumnCount; $i++)
					{
						if(!empty($csvData[$i]))
						{
							$user->setCustomData($customFieldIds[$i], $csvData[$i]);
						}
					}
				}
		
				// add bundles
				if(isset($rowData->bundles) && count($rowData->bundles) > 0)
				{
					for($i = 0; $i < count($rowData->bundles); $i++)
					{
						$bundleId = $rowData->bundles[$i];
						
						if(intval($bundleId) > 0)
						{
							$result = $user->addBundle($bundleId, true);
							
							if(MM_Response::isError($result))
							{
								$this->printLine("\tERROR ADDING BUNDLE ID '{$bundleId}': ".$result->message."\n");
							}
							else
							{
								$appliedBundle = MM_AppliedBundle::getAppliedBundle($user->getId(), $bundleId);
								
								if($appliedBundle->isValid())
								{
									// set status 
									if(isset($rowData->bundleStatus[$i]) && !empty($rowData->bundleStatus[$i]))
									{
										if(MM_Status::isValidStatus($rowData->bundleStatus[$i]))
										{
											$appliedBundle->setStatus($rowData->bundleStatus[$i]);
										}
									}
									
									// set start date
									if(isset($rowData->bundleStartDates[$i]) && !empty($rowData->bundleStartDates[$i]))
									{
										$timestamp = strtotime($rowData->bundleStartDates[$i]);
											
										if($timestamp != -1)
										{
											$appliedBundle->setApplyDate(date("Y-m-d", $timestamp));
										}
									}
									
									// set expiration date
									if($appliedBundle->doesExpire())
									{
										if(isset($rowData->bundleExpirationDates[$i]) && !empty($rowData->bundleExpirationDates[$i]))
										{
											$timestamp = strtotime($rowData->bundleExpirationDates[$i]);
												
											if($timestamp != -1)
											{
												$expirationDate = date("Y-m-d", $timestamp);
											}
										}
										else
										{
											// set expiration date based on start date
											if(isset($rowData->bundleStartDates[$i]) && !empty($rowData->bundleStartDates[$i]))
											{
												$timestamp = strtotime($rowData->bundleStartDates[$i]);
									
												if($timestamp != -1)
												{
													$startDate = date("Y-m-d", $timestamp);
												}
												else
												{
													$startDate = MM_Utils::getCurrentTime();
												}
											}
											else
											{
												$startDate = MM_Utils::getCurrentTime();
											}
									
											$expirationDate = $appliedBundle->getBundle()->getExpirationDate($startDate);
										}
											
										$appliedBundle->setExpirationDate($expirationDate);
									}
									
									$appliedBundle->commitData();
								}
								
								$this->printLine("\tBUNDLE ID '{$bundleId}' ADDED SUCCESSFULLY\n");
							}
						}
					}
				}
		
				$this->printLine("\n");
			}
		
			fclose($handle);
		}
	}
	
	private function parseRowData($rawData)
	{
		list($username, $email, $phone, $registrationDate, $expirationDate, $password, $firstName, $lastName, $billingAddress, $billingCity,
				$billingState, $billingZip, $billingCountry, $shippingAddress, $shippingCity, $shippingState, $shippingZip,
				$shippingCountry, $status, $bundles, $bundleStatus, $bundleStartDates, $bundleExpirationDates) = $rawData;
	
		$data = new stdClass();
	
		$data->username = $username;
		$data->email = $email;
		$data->phone = $phone;
		$data->registrationDate = $registrationDate;
		$data->expirationDate = $expirationDate;
		$data->password = $password;
		$data->firstName = $firstName;
		$data->lastName = $lastName;
		$data->billingAddress = $billingAddress;
		$data->billingCity = $billingCity;
		$data->billingState = $billingState;
		$data->billingZip = $billingZip;
		$data->billingCountry = $billingCountry;
		$data->shippingAddress = $shippingAddress;
		$data->shippingCity = $shippingCity;
		$data->shippingState = $shippingState;
		$data->shippingZip = $shippingZip;
		$data->shippingCountry = $shippingCountry;
		$data->status = $status;
		
		if(!empty($bundles))
		{
			$data->bundles = explode("|", $bundles);
		}
		else
		{
			$data->bundles = array();
		}
		
		if(!empty($bundleStatus))
		{
			$data->bundleStatus = explode("|", $bundleStatus);
		}
		else
		{
			$data->bundleStatus = array();
		}
		
		if(!empty($bundleStartDates))
		{
			$data->bundleStartDates = explode("|", $bundleStartDates);
		}
		else
		{
			$data->bundleStartDates = array();
		}
		
		if(!empty($bundleExpirationDates))
		{
			$data->bundleExpirationDates = explode("|", $bundleExpirationDates);
		}
		else
		{
			$data->bundleExpirationDates = array();
		}
	
		return $data;
	}
	
	private function printLine($str)
	{
		echo $str;
		$this->flushBuffers();
	}
	
	private function flushBuffers()
	{
		@ob_end_flush();
		@ob_flush();
		@flush();
		@ob_start();
	}
	
	private function clearTestData($id)
	{
		global $wpdb;
		
		$sql = "DELETE FROM wp_users WHERE ID >= '{$id}';";
		$result = $wpdb->query($sql);
		
		$sql = "DELETE FROM mm_user_data WHERE wp_user_id >= '{$id}';";
		$result = $wpdb->query($sql);
		
		$sql = "DELETE FROM mm_custom_field_data WHERE user_id >= '{$id}';";
		$result = $wpdb->query($sql);
		
		$sql = "DELETE FROM mm_applied_bundles WHERE access_type = 'user' AND access_type_id >= '{$id}';";
		$result = $wpdb->query($sql);
	}
}
